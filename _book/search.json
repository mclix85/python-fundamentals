[{"path":"index.html","id":"run-the-codes","chapter":"Run the Codes","heading":"Run the Codes","text":"See list packages Python","code":""},{"path":"introduction-to-python.html","id":"introduction-to-python","chapter":"Introduction to Python","heading":"Introduction to Python","text":"\nPython general-purpose programming language becoming ever popular data science. Companies worldwide using Python harvest insights data gain competitive edge. Unlike Python tutorials, course focuses Python specifically data science. Introduction Python course, ’ll learn powerful ways store manipulate data, helpful data science tools begin conducting analyses. Start DataCamp’s online Python curriculum now.\n","code":""},{"path":"introduction-to-python.html","id":"python-basics","chapter":"Introduction to Python","heading":"Python Basics","text":"\nintroduction basic concepts Python. Learn use Python interactively using script. Create first variables acquaint Python’s basic data types.\n","code":""},{"path":"introduction-to-python.html","id":"hello-python","chapter":"Introduction to Python","heading":"Hello Python!","text":"","code":""},{"path":"introduction-to-python.html","id":"the-python-interface","chapter":"Introduction to Python","heading":"The Python Interface","text":"\nPython script right, can type Python code solve exercises. hit Run Code Submit Answer, python script (script.py) executed output shown IPython Shell. Submit Answer checks whether submission correct gives feedback.\n\ncan hit Run Code Submit Answer often want. ’re stuck, can click Get Hint, ultimately Get Solution.\n\ncan also use IPython Shell interactively simply typing commands hitting Enter. work shell directly, code checked correctness great way experiment.\n\nExperiment IPython Shell; type 5 / 8, example.\n\nAdd another line code Python script top-right (Shell): print(7 + 10).\n\nHit Submit Answer execute Python script receive feedback.\n\nGreat! next one!\n","code":"# Example, do not modify!\nprint(5 / 8)## 0.625# Put code below here\nprint(7 + 10)## 17"},{"path":"introduction-to-python.html","id":"when-to-use-python","chapter":"Introduction to Python","heading":"When to use Python?","text":"\nPython pretty versatile language. applications can use Python?\nwant quick calculations.new business, want develop database-driven website.boss asks clean analyze results latest satisfaction survey..\nCorrect! Python extremely versatile language.\n","code":""},{"path":"introduction-to-python.html","id":"any-comments","chapter":"Introduction to Python","heading":"Any comments?","text":"\nSomething Hugo didn’t mention videos can add comments Python scripts. Comments important make sure others can understand code .\n\nadd comments Python script, can use # tag. comments run Python code, influence result. example, take comment editor, # Division; completely ignored execution.\n\nprint(7 + 10), add comment\n\nGreat!\n","code":"# Addition\n# Division\nprint(5 / 8)## 0.625# Addition\nprint(7 + 10)## 17"},{"path":"introduction-to-python.html","id":"python-as-a-calculator","chapter":"Introduction to Python","heading":"Python as a calculator","text":"\nPython perfectly suited basic calculations. Apart addition, subtraction, multiplication division, also support advanced operations :\n\nExponentiation: **. operator raises number left power number right. example 4**2 give 16.\n\nModulo: %. operator returns remainder division number left number right. example 18 % 7 equals 4.\n\ncode script gives examples.\n\nSuppose $100, can invest 10% return year. one year, ’s \\(100 \\times 1.1 = 110\\) dollars, two years ’s \\(100 \\times 1.1 \\times 1.1 = 121\\). Add code calculate much money end 7 years, print result.\n\nTime another video!\n","code":"# Addition, subtraction\nprint(5 + 5)## 10print(5 - 5)## 0# Multiplication, division, modulo, and exponentiation\nprint(3 * 5)## 15print(10 / 2)## 5.0print(18 % 7)## 4print(4 ** 2)## 16# How much is your $100 worth after 7 years?\nprint(100 * 1.1 ** 7)## 194.87171000000012"},{"path":"introduction-to-python.html","id":"variables-and-types","chapter":"Introduction to Python","heading":"Variables and Types","text":"","code":""},{"path":"introduction-to-python.html","id":"variable-assignment","chapter":"Introduction to Python","heading":"Variable Assignment","text":"\nPython, variable allows refer value name. create variable use =, like example:\n\ncan now use name variable, x, instead actual value, 5.\n\nRemember, = Python means assignment, doesn’t test equality!\n\nCreate variable savings value 100.\n\nCheck variable typing print(savings) script.\n\nGreat! Let’s try calculations variable now!\n","code":"x = 5\n# Create a variable savings\nsavings = 100\n\n# Print out savings\nprint(savings)## 100"},{"path":"introduction-to-python.html","id":"calculations-with-variables","chapter":"Introduction to Python","heading":"Calculations with variables","text":"\nRemember calculated money ended 7 years investing $100? something like :\n\nInstead calculating actual values, can use variables instead. savings variable ’ve created previous exercise represents $100 started . ’s create new variable represent 1.1 redo calculations!\n\nCreate variable growth_multiplier, equal 1.1.\n\nCreate variable, result, equal amount money saved 7 years.\n\nPrint value result.\n\nGreat!\n","code":"100 * 1.1 ** 7\n# Create a variable growth_multiplier\ngrowth_multiplier = 1.1\n\n# Calculate result\nresult = savings * growth_multiplier ** 7\n\n# Print out result\nprint(result)## 194.87171000000012"},{"path":"introduction-to-python.html","id":"other-variable-types","chapter":"Introduction to Python","heading":"Other variable types","text":"\nprevious exercise, worked two Python data types:\n\nint, integer: number without fractional part. savings, value 100, example integer.\n\nfloat, floating point: number integer fractional part, separated point. growth_multiplier, value 1.1, example float.\n\nNext numerical data types, two common data types:\n\nstr, string: type represent text. can use single double quotes build string.\n\nbool, boolean: type represent logical values. Can True False (capitalization important!).\n\nCreate new string, desc, value “compound interest”.\n\nCreate new boolean, profitable, value True.\n\nNice!\n","code":"# Create a variable desc\ndesc = \"compound interest\"\n\n# Create a variable profitable\nprofitable = True"},{"path":"introduction-to-python.html","id":"guess-the-type","chapter":"Introduction to Python","heading":"Guess the type","text":"\nfind type value variable refers value, can use type() function. Suppose ’ve defined variable , forgot type variable. determine type , simply execute:\n\nalready went ahead created three variables: , b c. can use IPython shell discover type. following options correct?\ntype int, b type str, c type boola type float, b type bool, c type stra type float, b type str, c type boola type int, b type bool, c type str\nCorrecto perfecto!\n","code":"type(a)\n# edited/added\na=194.87171000000012\nb='True'type(a)## <class 'float'>type(b)## <class 'str'>"},{"path":"introduction-to-python.html","id":"operations-with-other-types","chapter":"Introduction to Python","heading":"Operations with other types","text":"\nHugo mentioned different types behave differently Python.\n\nsum two strings, example, ’ll get different behavior sum two integers two booleans.\n\nscript variables different types already created. ’s use .\n\nCalculate product savings growth_multiplier. Store result year1.\n\nthink resulting type ? Find printing type year1.\n\nCalculate sum desc desc store result new variable doubledesc.\n\nPrint doubledesc. expect ?\n\nNice. Notice desc + desc causes “compound interest” “compound interest” pasted together.\n","code":"# edited/added\nsavings = 100\ngrowth_multiplier = 1.1\ndesc = \"compound interest\"\n\n# Assign product of savings and growth_multiplier to year1\nyear1 = savings * growth_multiplier\n\n# Print the type of year1\nprint(type(year1))## <class 'float'># Assign sum of desc and desc to doubledesc\ndoubledesc = desc + desc\n\n# Print out doubledesc\nprint(doubledesc)## compound interestcompound interest"},{"path":"introduction-to-python.html","id":"type-conversion","chapter":"Introduction to Python","heading":"Type conversion","text":"\nUsing + operator paste together two strings can useful building custom messages.\n\nSuppose, example, ’ve calculated return investment want summarize results string. Assuming integer savings float result defined, can try something like :\n\nwork, though, simply sum strings integers/floats.\n\nfix error, ’ll need explicitly convert types variables. specifically, ’ll need str(), convert value string. str(savings), example, convert integer savings string.\n\nSimilar functions int(), float() bool() help convert Python values type.\n\nHit Run Code run code. Try understand error message.\n\nFix code printout runs without errors; use function str() convert variables strings.\n\nConvert variable pi_string float store float new variable, pi_float.\n\nGreat! profit around $95; ’s pretty awesome indeed!\n","code":"print(\"I started with $\" + savings + \" and now have $\" + result + \". Awesome!\")\n# Definition of savings and result\nsavings = 100\nresult = 100 * 1.10 ** 7\n\n# Fix the printout\n#print(\"I started with $\" + savings + \" and now have $\" + result + \". Awesome!\")\n\n# Definition of savings and result\nsavings = 100\nresult = 100 * 1.10 ** 7\n\n# Fix the printout\nprint(\"I started with $\" + str(savings) + \" and now have $\" + str(result) + \". Awesome!\")## I started with $100 and now have $194.87171000000012. Awesome!# Definition of pi_string\npi_string = \"3.1415926\"\n\n# Convert pi_string into float: pi_float\npi_float = float(pi_string)"},{"path":"introduction-to-python.html","id":"can-python-handle-everything","chapter":"Introduction to Python","heading":"Can Python handle everything?","text":"\nNow know something combining different sources information, look four Python expressions .\none throw error? can always copy paste code IPython Shell find !\n“can add integers, like” + str(5) + ” strings.”“said” + (“Hey” * 2) + “Hey!”“correct answer multiple choice exercise answer number” + 2True + False\nCorrect! ’re converting 2 string str(), give error.\n","code":""},{"path":"introduction-to-python.html","id":"python-lists","chapter":"Introduction to Python","heading":"Python Lists","text":"\nLearn store, access, manipulate data lists: first step toward efficiently working huge amounts data.\n","code":""},{"path":"introduction-to-python.html","id":"python-lists-1","chapter":"Introduction to Python","heading":"Python Lists","text":"","code":""},{"path":"introduction-to-python.html","id":"create-a-list","chapter":"Introduction to Python","heading":"Create a list","text":"\nopposed int, bool etc., list compound data type; can group values together:\n\nmeasuring height family, decide collect information house ’re living . areas different parts house stored separate variables now, shown script.\n\nCreate list, areas, contains area hallway (hall), kitchen (kit), living room (liv), bedroom (bed) bathroom (bath), order. Use predefined variables.\n\nPrint areas print() function.\n\nNice! list way better , isn’t ?\n","code":"a = \"is\"\nb = \"nice\"\nmy_list = [\"my\", \"list\", a, b]\n# Area variables (in square meters)\nhall = 11.25\nkit = 18.0\nliv = 20.0\nbed = 10.75\nbath = 9.50\n\n# Create list areas\nareas = [hall, kit, liv, bed, bath]\n\nprint(areas)## [11.25, 18.0, 20.0, 10.75, 9.5]"},{"path":"introduction-to-python.html","id":"create-list-with-different-types","chapter":"Introduction to Python","heading":"Create list with different types","text":"\nlist can contain Python type. Although ’s really common, list can also contain mix Python types including strings, floats, booleans, etc.\n\nprintout previous exercise wasn’t really satisfying. ’s just list numbers representing areas, can’t tell area corresponds part house.\n\ncode editor start solution. areas, name corresponding room already placed front. Pay attention ! “bathroom” string, bath variable represents float 9.50 specified earlier.\n\nFinish code creates areas list. Build list list first contains name room string area. words, add strings “hallway”, “kitchen” “bedroom” appropriate locations.\n\nPrint areas ; printout informative time?\n\nNice! list contains strings floats, ’s problem Python!\n","code":"# area variables (in square meters)\nhall = 11.25\nkit = 18.0\nliv = 20.0\nbed = 10.75\nbath = 9.50\n\n# Adapt list areas\nareas = [\"hallway\", hall, \"kitchen\", kit, \"living room\", liv, \"bedroom\", bed, \"bathroom\", bath]\n\n# Print areas\nprint(areas)## ['hallway', 11.25, 'kitchen', 18.0, 'living room', 20.0, 'bedroom', 10.75, 'bathroom', 9.5]"},{"path":"introduction-to-python.html","id":"select-the-valid-list","chapter":"Introduction to Python","heading":"Select the valid list","text":"\nlist can contain Python type. list also Python type. means list can also contain list! Python getting funkier minute, fear , just remember list syntax:\n\nCan tell ones following lines Python code valid ways build list?\n\n. [1, 3, 4, 2]\nB. [[1, 2, 3], [4, 5, 7]]\nC. [1 + 2, “” * 5, 3]\n, B CBB CC\nCorrect! funny may look, commands valid ways build Python list.\n","code":"my_list = [el1, el2, el3]\n"},{"path":"introduction-to-python.html","id":"list-of-lists","chapter":"Introduction to Python","heading":"List of lists","text":"\ndata scientist, ’ll often dealing lot data, make sense group data.\n\nInstead creating flat list containing strings floats, representing names areas rooms house, can create list lists. script editor can already give idea.\n\nDon’t get confused : “hallway” string, hall variable represents float 11.25 specified earlier.\n\nFinish list lists also contains bedroom bathroom data. Make sure enter order!\n\nPrint house; way structuring data make sense?\n\nPrint type house. still dealing list?\n\nGreat! Get ready learn list subsetting!\n","code":"# area variables (in square meters)\nhall = 11.25\nkit = 18.0\nliv = 20.0\nbed = 10.75\nbath = 9.50\n\n# house information as list of lists\nhouse = [[\"hallway\", hall],\n         [\"kitchen\", kit],\n         [\"living room\", liv],\n         [\"bedroom\", bed],\n         [\"bathroom\", bath]]\n         \n# Print out house\nprint(house)## [['hallway', 11.25], ['kitchen', 18.0], ['living room', 20.0], ['bedroom', 10.75], ['bathroom', 9.5]]# Print out the type of house\nprint(type(house))## <class 'list'>"},{"path":"introduction-to-python.html","id":"subsetting-lists","chapter":"Introduction to Python","heading":"Subsetting Lists","text":"","code":""},{"path":"introduction-to-python.html","id":"subset-and-conquer","chapter":"Introduction to Python","heading":"Subset and conquer","text":"\nSubsetting Python lists piece cake. Take code sample , creates list x selects “b” . Remember second element, index 1. can also use negative indexing.\n\nRemember areas list , containing strings floats? definition already script. Can add correct code Python subsetting?\n\nPrint second element areas list (value 11.25).\n\nSubset print last element areas, 9.50. Using negative index makes sense !\n\nSelect number representing area living room (20.0) print .\n\nGood job!\n","code":"x = [\"a\", \"b\", \"c\", \"d\"]\nx[1]\nx[-3] # same result!\n# Create the areas list\nareas = [\"hallway\", 11.25, \"kitchen\", 18.0, \"living room\", 20.0, \"bedroom\", 10.75, \"bathroom\", 9.50]\n\n# Print out second element from areas\nprint(areas[1])## 11.25# Print out last element from areas\nprint(areas[-1])## 9.5# Print out the area of the living room\nprint(areas[5])## 20.0"},{"path":"introduction-to-python.html","id":"subset-and-calculate","chapter":"Introduction to Python","heading":"Subset and calculate","text":"\n’ve extracted values list, can use perform additional calculations. Take example, second fourth element list x extracted. strings result pasted together using + operator:\n\nUsing combination list subsetting variable assignment, create new variable, eat_sleep_area, contains sum area kitchen area bedroom.\n\nPrint new variable eat_sleep_area.\n\nBellissimo!\n","code":"x = [\"a\", \"b\", \"c\", \"d\"]\nprint(x[1] + x[3])\n# Create the areas list\nareas = [\"hallway\", 11.25, \"kitchen\", 18.0, \"living room\", 20.0, \"bedroom\", 10.75, \"bathroom\", 9.50]\n\n# Sum of kitchen and bedroom area: eat_sleep_area\neat_sleep_area = areas[3] + areas[-3]\n\n# Print the variable eat_sleep_area\nprint(eat_sleep_area)## 28.75"},{"path":"introduction-to-python.html","id":"slicing-and-dicing","chapter":"Introduction to Python","heading":"Slicing and dicing","text":"\nSelecting single values list just one part story. ’s also possible slice list, means selecting multiple elements list. Use following syntax:\n\nstart index included, end index .\n\ncode sample shows example. list “b” “c”, corresponding indexes 1 2, selected list x:\n\nelements index 1 2 included, element index 3 .\n\nUse slicing create list, downstairs, contains first 6 elements areas.\n\nsimilar thing create new variable, upstairs, contains last 4 elements areas.\n\nPrint downstairs upstairs using print().\n\nGreat!\n","code":"my_list[start:end]\nx = [\"a\", \"b\", \"c\", \"d\"]\nx[1:3]\n# Create the areas list\nareas = [\"hallway\", 11.25, \"kitchen\", 18.0, \"living room\", 20.0, \"bedroom\", 10.75, \"bathroom\", 9.50]\n\n# Use slicing to create downstairs\ndownstairs = areas[0:6]\n\n# Use slicing to create upstairs\nupstairs = areas[6:10]\n\n# Print out downstairs and upstairs\nprint(downstairs)## ['hallway', 11.25, 'kitchen', 18.0, 'living room', 20.0]print(upstairs)## ['bedroom', 10.75, 'bathroom', 9.5]"},{"path":"introduction-to-python.html","id":"slicing-and-dicing-2","chapter":"Introduction to Python","heading":"Slicing and dicing (2)","text":"\nvideo, Hugo first discussed syntax specify begin end slice list:\n\nHowever, ’s also possible specify indexes. don’t specify begin index, Python figures want start slice beginning list. don’t specify end index, slice go way last element list. experiment , try following commands IPython Shell:\n\nCreate downstairs , first 6 elements areas. time, simplify slicing omitting begin index.\n\nCreate upstairs , last 4 elements areas. time, simplify slicing omitting end index.\n\nWonderful!\n","code":"my_list[begin:end]\nx = [\"a\", \"b\", \"c\", \"d\"]\nx[:2]\nx[2:]\nx[:]\n# Create the areas list\nareas = [\"hallway\", 11.25, \"kitchen\", 18.0, \"living room\", 20.0, \"bedroom\", 10.75, \"bathroom\", 9.50]\n\n# Alternative slicing to create downstairs\ndownstairs = areas[:6]\n\n# Alternative slicing to create upstairs\nupstairs = areas[6:]"},{"path":"introduction-to-python.html","id":"subsetting-lists-of-lists","chapter":"Introduction to Python","heading":"Subsetting lists of lists","text":"\nsaw Python list can contain practically anything; even lists! subset lists lists, can use technique : square brackets. Try commands following code sample IPython Shell:\n\nx[2] results list, can subset adding additional square brackets.\n\nhouse[-1][1] return? house, list lists created , already defined workspace. can experiment IPython Shell.\nfloat: kitchen areaA string: “kitchen”float: bathroom areaA string: “bathroom”\nCorrectomundo! last piece list puzzle manipulation.\n","code":"x = [[\"a\", \"b\", \"c\"],\n     [\"d\", \"e\", \"f\"],\n     [\"g\", \"h\", \"i\"]]\nx[2][0]\nx[2][:2]\n# edited/added\nhouse = [['hallway', 11.25],\n ['kitchen', 18.0],\n ['living room', 20.0],\n ['bedroom', 10.75],\n ['bathroom', 9.5]]\nprint(house[-1][1])## 9.5"},{"path":"introduction-to-python.html","id":"manipulating-lists","chapter":"Introduction to Python","heading":"Manipulating Lists","text":"","code":""},{"path":"introduction-to-python.html","id":"replace-list-elements","chapter":"Introduction to Python","heading":"Replace list elements","text":"\nReplacing list elements pretty easy. Simply subset list assign new values subset. can select single elements can change entire list slices .\n\nUse IPython Shell experiment commands . Can tell ’s happening ?\n\nfollowing exercises, ’ll continue working areas list contains names areas different rooms house.\n\nUpdate area bathroom area 10.50 square meters instead 9.50.\n\nMake areas list trendy! Change “living room” “chill zone”.\n\nSweet! code sample showed, can also slice list replace another list update multiple elements single command.\n","code":"x = [\"a\", \"b\", \"c\", \"d\"]\nx[1] = \"r\"\nx[2:] = [\"s\", \"t\"]\n# Create the areas list\nareas = [\"hallway\", 11.25, \"kitchen\", 18.0, \"living room\", 20.0, \"bedroom\", 10.75, \"bathroom\", 9.50]\n\n# Correct the bathroom area\nareas[-1] = 10.50\n\n# Change \"living room\" to \"chill zone\"\nareas[4] = \"chill zone\""},{"path":"introduction-to-python.html","id":"extend-a-list","chapter":"Introduction to Python","heading":"Extend a list","text":"\ncan change elements list, sure want able add elements , right? can use + operator:\n\njust won lottery, awesome! decide build poolhouse garage. Can add information areas list?\n\nUse + operator paste list [“poolhouse”, 24.5] end areas list. Store resulting list areas_1.\n\nextend areas_1 adding data garage. Add string “garage” float 15.45. Name resulting list areas_2.\n\nCool! list shaping nicely!\n","code":"x = [\"a\", \"b\", \"c\", \"d\"]\ny = x + [\"e\", \"f\"]\n# Create the areas list (updated version)\nareas = [\"hallway\", 11.25, \"kitchen\", 18.0, \"chill zone\", 20.0,\n         \"bedroom\", 10.75, \"bathroom\", 10.50]\n\n# Add poolhouse data to areas, new list is areas_1\nareas_1 = areas + [\"poolhouse\", 24.5]\n\n# Add garage data to areas_1, new list is areas_2\nareas_2 = areas_1 + [\"garage\", 15.45]"},{"path":"introduction-to-python.html","id":"delete-list-elements","chapter":"Introduction to Python","heading":"Delete list elements","text":"\nFinally, can also remove elements list. can del statement:\n\nPay attention : soon remove element list, indexes elements come deleted element change!\n\nupdated extended version areas ’ve built previous exercises coded . can copy paste IPython Shell play around result.\n\nmistake! amount won lottery big looks like poolhouse isn’t going happen. decide remove corresponding string float areas list.\n\n; sign used place commands line. following two code chunks equivalent:\n\ncode chunks job us?\ndel(areas[10]); del(areas[11])del(areas[10:11])del(areas[-4:-2])del(areas[-3]); del(areas[-4])\nCorrect! ’ll learn easier ways remove specific elements Python lists later .\n","code":"x = [\"a\", \"b\", \"c\", \"d\"]\ndel(x[1])\nareas = [\"hallway\", 11.25, \"kitchen\", 18.0,\n        \"chill zone\", 20.0, \"bedroom\", 10.75,\n         \"bathroom\", 10.50, \"poolhouse\", 24.5,\n         \"garage\", 15.45]\n# Same line\ncommand1; command2\n\n# Separate lines\ncommand1\ncommand2\n"},{"path":"introduction-to-python.html","id":"inner-workings-of-lists","chapter":"Introduction to Python","heading":"Inner workings of lists","text":"\nend video, Hugo explained Python lists work behind scenes. exercise ’ll get hands-experience .\n\nPython code script already creates list name areas copy named areas_copy. Next, first element areas_copy list changed areas list printed . hit Run Code ’ll see , although ’ve changed areas_copy, change also takes effect areas list. ’s areas areas_copy point list.\n\nwant prevent changes areas_copy also taking effect areas, ’ll explicit copy areas list. can list() using [:].\n\nChange second command, creates variable areas_copy, areas_copy explicit copy areas. edit, changes made areas_copy shouldn’t affect areas. Submit answer check .\n\nNice! difference explicit reference-based copies subtle, can really important. Try keep mind list stored computer’s memory.\n","code":"# Create list areas\nareas = [11.25, 18.0, 20.0, 10.75, 9.50]\n\n# Create areas_copy\nareas_copy = areas\n\n# Change areas_copy\nareas_copy[0] = 5.0\n\n# Print areas\nprint(areas)## [5.0, 18.0, 20.0, 10.75, 9.5]# Create list areas\nareas = [11.25, 18.0, 20.0, 10.75, 9.50]\n\n# Create areas_copy\nareas_copy = list(areas)\n\n# Change areas_copy\nareas_copy[0] = 5.0\n\n# Print areas\nprint(areas)## [11.25, 18.0, 20.0, 10.75, 9.5]"},{"path":"introduction-to-python.html","id":"functions-and-packages","chapter":"Introduction to Python","heading":"Functions and Packages","text":"\n’ll learn use functions, methods, packages efficiently leverage code brilliant Python developers written. goal reduce amount code need solve challenging problems!\n","code":""},{"path":"introduction-to-python.html","id":"functions","chapter":"Introduction to Python","heading":"Functions","text":"","code":""},{"path":"introduction-to-python.html","id":"familiar-functions","chapter":"Introduction to Python","heading":"Familiar functions","text":"\nbox, Python offers bunch built-functions make life data scientist easier. already know two functions: print() type(). ’ve also used functions str(), int(), bool() float() switch data types. built-functions well.\n\nCalling function easy. get type 3.0 store output new variable, result, can use following:\n\ngeneral recipe calling functions saving result variable thus:\n\nUse print() combination type() print type var1.\n\nUse len() get length list var1. Wrap print() call directly print .\n\nUse int() convert var2 integer. Store output out2.\n\nGreat job! len() function extremely useful; also works strings count number characters!\n","code":"result = type(3.0)\noutput = function_name(input)\n# Create variables var1 and var2\nvar1 = [1, 2, 3, 4]\nvar2 = True\n\n# Print out type of var1\nprint(type(var1))## <class 'list'># Print out length of var1\nprint(len(var1))## 4# Convert var2 to an integer: out2\nout2 = int(var2)"},{"path":"introduction-to-python.html","id":"help","chapter":"Introduction to Python","heading":"Help!","text":"\nMaybe already know name Python function, still figure use . Ironically, ask information function another function: help(). IPython specifically, can also use ? function name.\n\nget help max() function, example, can use one calls:\n\nUse Shell open documentation complex(). following statements true?\ncomplex() takes exactly two arguments: real [, imag].complex() takes two arguments: real imag. arguments required.complex() takes two arguments: real imag. real required argument, imag optional argument.complex() takes two arguments: real imag. don’t specify imag, set 1 Python.\nPerfect!\n","code":"help(max)\n?max\n"},{"path":"introduction-to-python.html","id":"multiple-arguments","chapter":"Introduction to Python","heading":"Multiple arguments","text":"\nprevious exercise, square brackets around imag documentation showed us imag argument optional. Python also uses different way tell users arguments optional.\n\nlook documentation sorted() typing help(sorted) IPython Shell.\n\n’ll see sorted() takes three arguments: iterable, key reverse.\n\nkey=None means don’t specify key argument, None. reverse=False means don’t specify reverse argument, False.\n\nexercise, ’ll specify iterable reverse, key. first input pass sorted() matched iterable argument, second input? tell Python want specify reverse without changing anything key, can use =:\n\nTwo lists created editor. Can paste together sort descending order?\n\nNote: now, can understand iterable collection objects, e.g. List.\n\nUse + merge contents first second new list: full.\n\nCall sorted() full specify reverse argument True. Save sorted list full_sorted.\n\nFinish printing full_sorted.\n\nCool! Head video Python methods.\n","code":"sorted(___, reverse = ___)\n# Create lists first and second\nfirst = [11.25, 18.0, 20.0]\nsecond = [10.75, 9.50]\n\n# Paste together first and second: full\nfull = first + second\n\n# Sort full in descending order: full_sorted\nfull_sorted = sorted(full, reverse = True)\n\n# Print out full_sorted\nprint(full_sorted)## [20.0, 18.0, 11.25, 10.75, 9.5]"},{"path":"introduction-to-python.html","id":"methods","chapter":"Introduction to Python","heading":"Methods","text":"","code":""},{"path":"introduction-to-python.html","id":"string-methods","chapter":"Introduction to Python","heading":"String Methods","text":"\nStrings come bunch methods. Follow instructions closely discover . want discover detail, can always type help(str) IPython Shell.\n\nstring place already created experiment .\n\nUse upper() method place store result place_up. Use syntax calling methods learned previous video.\n\nPrint place place_up. change?\n\nPrint number o’s variable place calling count() place passing letter ‘o’ input method. ’re talking variable place, word “place”!\n\nNice! Notice printouts upper() method change object called . different lists next exercise!\n","code":"# string to experiment with: place\nplace = \"poolhouse\"\n\n# Use upper() on place: place_up\nplace_up = place.upper()\n\n# Print out place and place_up\nprint(place)## poolhouseprint(place_up)## POOLHOUSE# Print out the number of o's in place\nprint(place.count('o'))## 3"},{"path":"introduction-to-python.html","id":"list-methods","chapter":"Introduction to Python","heading":"List Methods","text":"\nStrings Python types methods associated . Lists, floats, integers booleans also types come packaged bunch useful methods. exercise, ’ll experimenting :\n\nindex(), get index first element list matches input \n\ncount(), get number times element appears list.\n\n’ll working list area different parts house: areas.\n\nUse index() method get index element areas equal 20.0. Print index.\n\nCall count() areas find many times 9.50 appears list. , simply print number.\n\nNice! examples list methods change list called .\n","code":"# Create list areas\nareas = [11.25, 18.0, 20.0, 10.75, 9.50]\n\n# Print out the index of the element 20.0\nprint(areas.index(20.0))## 2# Print out how often 9.50 appears in areas\nprint(areas.count(9.50))## 1"},{"path":"introduction-to-python.html","id":"list-methods-2","chapter":"Introduction to Python","heading":"List Methods (2)","text":"\nlist methods change list ’re called . Examples :\n\nappend(), adds element list called ,\n\nremove(), removes first element list matches input, \n\nreverse(), reverses order elements list called .\n\n’ll working list area different parts house: areas.\n\nUse append() twice add size poolhouse garage : 24.5 15.45, respectively. Make sure add order.\n\nPrint areas\n\nUse reverse() method reverse order elements areas.\n\nPrint areas .\n\nGreat!\n","code":"# Create list areas\nareas = [11.25, 18.0, 20.0, 10.75, 9.50]\n\n# Use append twice to add poolhouse and garage size\nareas.append(24.5)\nareas.append(15.45)\n\n# Print out areas\nprint(areas)## [11.25, 18.0, 20.0, 10.75, 9.5, 24.5, 15.45]# Reverse the orders of the elements in areas\nareas.reverse()\n\n# Print out areas\nprint(areas)## [15.45, 24.5, 9.5, 10.75, 20.0, 18.0, 11.25]"},{"path":"introduction-to-python.html","id":"packages","chapter":"Introduction to Python","heading":"Packages","text":"","code":""},{"path":"introduction-to-python.html","id":"import-package","chapter":"Introduction to Python","heading":"Import package","text":"\ndata scientist, notions geometry never hurt. Let’s refresh basics.\n\nfancy clustering algorithm, want find circumference, \\(C\\), area, \\(\\), circle. radius circle r, can calculate \\(C\\) \\(\\) :\n\n\\[C = 2 \\pi r\\]\n\\[= \\pi r^2 \\]\n\nuse constant pi, ’ll need math package. variable r already coded script. Fill code calculate C see print() functions create nice printouts.\n\nImport math package. Now can access constant pi math.pi.\n\nCalculate circumference circle store C.\n\nCalculate area circle store .\n\nNice! know deal functions packages, power lot Python programmers fingertips!\n","code":"# Definition of radius\nr = 0.43\n\n# Import the math package\nimport math\n\n# Calculate C\nC = 2 * r * math.pi\n\n# Build printout\nprint(\"Circumference: \" + str(C))## Circumference: 2.701769682087222# Calculate A\nA = math.pi * r ** 2\n\n# Build printout\nprint(\"Area: \" + str(A))## Area: 0.5808804816487527"},{"path":"introduction-to-python.html","id":"selective-import","chapter":"Introduction to Python","heading":"Selective import","text":"\nGeneral imports, like import math, make functionality math package available . However, decide use specific part package, can always make import selective:\n\nLet’s say Moon’s orbit around planet Earth perfect circle, radius r (km) defined script.\n\nPerform selective import math package import radians function.\n\nCalculate distance travelled Moon 12 degrees orbit. Assign result dist. can calculate r * phi, r radius phi angle radians. convert angle degrees angle radians, use radians() function, just imported.\n\nPrint dist.\n\nNice! Head next exercise.\n","code":"from math import pi\n# Definition of radius\nr = 192500\n\n# Import radians function of math package\nfrom math import radians\n\n# Travel distance of Moon over 12 degrees. Store in dist.\ndist = r * radians(12)\n\n# Print out dist\nprint(dist)## 40317.10572106901"},{"path":"introduction-to-python.html","id":"different-ways-of-importing","chapter":"Introduction to Python","heading":"Different ways of importing","text":"\nseveral ways import packages modules Python. Depending import call, ’ll use different Python code.\n\nSuppose want use function inv(), linalg subpackage scipy package. want able use function follows:\n\nimport statement need order run code without error?\nimport scipyimport scipy.linalgfrom scipy.linalg import my_invfrom scipy.linalg import inv my_inv\nCorrect! word allows create local name function ’re importing: inv() now available my_inv().\n","code":"my_inv([[1,2], [3,4]])\n"},{"path":"introduction-to-python.html","id":"numpy","chapter":"Introduction to Python","heading":"NumPy","text":"\nNumPy fundamental Python package efficiently practice data science. Learn work powerful tools NumPy array, get started data exploration.\n\"Python Fundamenals\" written Dat Tran. last built 2023-01-09.book built bookdown R package.","code":""},{"path":"introduction-to-python.html","id":"numpy-1","chapter":"Introduction to Python","heading":"Numpy","text":"","code":""},{"path":"introduction-to-python.html","id":"your-first-numpy-array","chapter":"Introduction to Python","heading":"Your First NumPy Array","text":"\nchapter, ’re going dive world baseball. Along way, ’ll get comfortable basics numpy, powerful package data science.\n\nlist baseball already defined Python script, representing height baseball players centimeters. Can add code create numpy array ?\n\nImport numpy package np, can refer numpy np.\n\nUse np.array() create numpy array baseball. Name array np_baseball.\n\nPrint type np_baseball check got right.\n\nGreat job!\n","code":"# Import the numpy package as np\nimport numpy as np\n\n# Create list baseball\nbaseball = [180, 215, 210, 210, 188, 176, 209, 200]\n\n# Create a Numpy array from baseball: np_baseball\nnp_baseball = np.array(baseball)\n\n# Print out type of np_baseball\nprint(type(np_baseball))## <class 'numpy.ndarray'>"},{"path":"introduction-to-python.html","id":"baseball-players-height","chapter":"Introduction to Python","heading":"Baseball players’ height","text":"\nhuge baseball fan. decide call MLB (Major League Baseball) ask around statistics height main players. pass along data thousand players, stored regular Python list: height_in. height expressed inches. Can make numpy array convert units meters?\n\nheight_in already available numpy package loaded, can start straight away (Source: stat.ucla.edu).\n\nCreate numpy array height_in. Name new array np_height_in.\n\nPrint np_height_in.\n\nMultiply np_height_in 0.0254 convert height measurements inches meters. Store new values new array, np_height_m.\n\nPrint np_height_m check output makes sense.\n\nNice! blink eye, numpy performs multiplications 1000 height measurements.\n","code":"# edited/added\nimport pandas as pd\nmlb = pd.read_csv(\"datasets/Introduction-to-Python/baseball.csv\")\n\n# height_in is available as a regular list\nheight_in = mlb['Height'].tolist()\n\n# Import numpy\nimport numpy as np\n\n# Create a numpy array from height_in: np_height_in\nnp_height_in = np.array(height_in)\n\n# Print out np_height_in\nprint(np_height_in)## [74 74 72 ... 75 75 73]# Convert np_height_in to m: np_height_m\nnp_height_m = np_height_in * 0.0254\n\n# Print np_height_m\nprint(np_height_m)## [1.8796 1.8796 1.8288 ... 1.905  1.905  1.8542]"},{"path":"introduction-to-python.html","id":"baseball-players-bmi","chapter":"Introduction to Python","heading":"Baseball player’s BMI","text":"\nMLB also offers let analyze weight data. , available regular Python lists: height_in weight_lb. height_in inches weight_lb pounds.\n\n’s now possible calculate BMI baseball player. Python code convert height_in numpy array correct units already available workspace. Follow instructions step step finish game!\n\nCreate numpy array weight_lb list correct units. Multiply 0.453592 go pounds kilograms. Store resulting numpy array np_weight_kg.\n\nUse np_height_m np_weight_kg calculate BMI player. Use following equation: \\[ \\mathrm{BMI} = \\frac{\\mathrm{weight (kg)}}{\\mathrm{height (m)}^2}\\] Save resulting numpy array bmi.\n\nPrint bmi.\n\nCool! Time step game!\n","code":"# height_in and weight_lb are available as regular lists\nweight_lb = mlb['Weight'].tolist()\n\n# Import numpy\nimport numpy as np\n\n# Create array from height_in with metric units: np_height_m\nnp_height_m = np.array(height_in) * 0.0254\n\n# Create array from weight_lb with metric units: np_weight_kg\nnp_weight_kg = np.array(weight_lb) * 0.453592\n\n# Calculate the BMI: bmi\nbmi = np_weight_kg / np_height_m ** 2\n\n# Print out bmi\nprint(bmi)## [23.11037639 27.60406069 28.48080465 ... 25.62295933 23.74810865\n##  25.72686361]"},{"path":"introduction-to-python.html","id":"lightweight-baseball-players","chapter":"Introduction to Python","heading":"Lightweight baseball players","text":"\nsubset regular Python lists numpy arrays, can use square brackets:\n\nnumpy specifically, can also use boolean numpy arrays:\n\ncode calculates BMI baseball players already included. Follow instructions reveal interesting things data!\n\nCreate boolean numpy array: element array True corresponding baseball player’s BMI 21. can use < operator . Name array light.\n\nPrint array light.\n\nPrint numpy array BMIs baseball players whose BMI 21. Use light inside square brackets selection bmi array.\n\nWow! appears 11 1000 baseball players BMI 21!\n","code":"x = [4 , 9 , 6, 3, 1]\nx[1]\nimport numpy as np\ny = np.array(x)\ny[1]\nhigh = y > 5\ny[high]\n# height_in and weight_lb are available as a regular lists\n\n# Import numpy\nimport numpy as np\n\n# Calculate the BMI: bmi\nnp_height_m = np.array(height_in) * 0.0254\nnp_weight_kg = np.array(weight_lb) * 0.453592\nbmi = np_weight_kg / np_height_m ** 2\n\n# Create the light array\nlight = bmi < 21\n\n# Print out light\nprint(light)## [False False False ... False False False]# Print out BMIs of all baseball players whose BMI is below 21\nprint(bmi[light])## [20.54255679 20.54255679 20.69282047 20.69282047 20.34343189 20.34343189\n##  20.69282047 20.15883472 19.4984471  20.69282047 20.9205219 ]"},{"path":"introduction-to-python.html","id":"numpy-side-effects","chapter":"Introduction to Python","heading":"NumPy Side Effects","text":"\nHugo explained , numpy great vector arithmetic. compare functionality regular Python lists, however, things changed.\n\nFirst , numpy arrays contain elements different types. try build list, elements’ types changed end homogeneous list. known type coercion.\n\nSecond, typical arithmetic operators, +, -, * / different meaning regular Python lists numpy arrays.\n\nlook line code:\n\nCan tell code chunk builds exact Python object? numpy package already imported np, can start experimenting IPython Shell straight away!\nnp.array([True, 1, 2, 3, 4, False])np.array([4, 3, 0]) + np.array([0, 2, 2])np.array([1, 1, 2]) + np.array([3, 4, -1])np.array([0, 1, 2, 3, 4, 5])\nGreat job! True converted 1, False converted 0.\n","code":"np.array([True, 1, 2]) + np.array([3, 4, False])\n"},{"path":"introduction-to-python.html","id":"subsetting-numpy-arrays","chapter":"Introduction to Python","heading":"Subsetting NumPy Arrays","text":"\n’ve seen eyes: Python lists numpy arrays sometimes behave differently. Luckily, still certainties world. example, subsetting (using square bracket notation lists arrays) works exactly . see , try following lines code IPython Shell:\n\nscript editor already contains code imports numpy np, stores height weight MLB players numpy arrays.\n\nSubset np_weight_lb printing element index 50.\n\nPrint sub-array np_height_in contains elements index 100 including index 110.\n\nNice! Time learn something new: 2D Numpy arrays!\n","code":"x = [\"a\", \"b\", \"c\"]\nx[1]\n\nnp_x = np.array(x)\nnp_x[1]\n# height_in and weight_lb are available as a regular lists\n\n# Import numpy\nimport numpy as np\n\n# Store weight and height lists as numpy arrays\nnp_weight_lb = np.array(weight_lb)\nnp_height_in = np.array(height_in)\n\n# Print out the weight at index 50\nprint(np_weight_lb[50])## 200# Print out sub-array of np_height_in: index 100 up to and including index 110\nprint(np_height_in[100:111])## [73 74 72 73 69 72 73 75 75 73 72]"},{"path":"introduction-to-python.html","id":"d-numpy-arrays","chapter":"Introduction to Python","heading":"2D Numpy Arrays","text":"","code":""},{"path":"introduction-to-python.html","id":"your-first-2d-numpy-array","chapter":"Introduction to Python","heading":"Your First 2D NumPy Array","text":"\nworking actual MLB data, let’s try create 2D numpy array small list lists.\n\nexercise, baseball list lists. main list contains 4 elements. elements list containing height weight 4 baseball players, order. baseball already coded script.\n\nUse np.array() create 2D numpy array baseball. Name np_baseball.\n\nPrint type np_baseball.\n\nPrint shape attribute np_baseball. Use np_baseball.shape.\n\nGreat! ’re ready convert actual MLB data 2D numpy array now!\n","code":"# Create baseball, a list of lists\nbaseball = [[180, 78.4],\n            [215, 102.7],\n            [210, 98.5],\n            [188, 75.2]]\n\n# Import numpy\nimport numpy as np\n\n# Create a 2D numpy array from baseball: np_baseball\nnp_baseball = np.array(baseball)\n\n# Print out the type of np_baseball\nprint(type(np_baseball))## <class 'numpy.ndarray'># Print out the shape of np_baseball\nprint(np_baseball.shape)## (4, 2)"},{"path":"introduction-to-python.html","id":"baseball-data-in-2d-form","chapter":"Introduction to Python","heading":"Baseball data in 2D form","text":"\nanother look MLB data realize makes sense restructure information 2D numpy array. array 1015 rows, corresponding 1015 baseball players information , 2 columns (height weight).\n\nMLB , , helpful passed data different structure, Python list lists. list lists, sublist represents height weight single baseball player. name embedded list baseball.\n\nCan store data 2D array unlock numpy’s extra functionality?\n\nUse np.array() create 2D numpy array baseball. Name np_baseball.\n\nPrint shape attribute np_baseball.\n\nSlick! Time show killer features multi-dimensional numpy arrays!\n","code":"# baseball is available as a regular list of lists\n\n# Import numpy package\nimport numpy as np\n\n# Create a 2D numpy array from baseball: np_baseball\nnp_baseball = np.array(baseball)\n\n# Print out the shape of np_baseball\nprint(np_baseball.shape)## (4, 2)"},{"path":"introduction-to-python.html","id":"subsetting-2d-numpy-arrays","chapter":"Introduction to Python","heading":"Subsetting 2D NumPy Arrays","text":"\n2D numpy array regular structure, .e. row column fixed number values, complicated ways subsetting become easy. look code elements “” “c” extracted list lists.\n\nregular Python lists, real pain. 2D numpy arrays, however, ’s pretty intuitive! indexes comma refer rows, comma refer columns. : slicing; example, tells Python include rows.\n\ncode converts pre-loaded baseball list 2D numpy array already script. first column contains players’ height inches second column holds player weight, pounds. Add lines make correct selections. Remember Python, first element index 0!\n\nPrint 50th row np_baseball.\n\nMake new variable, np_weight_lb, containing entire second column np_baseball.\n\nSelect height (first column) 124th baseball player np_baseball print .\n\ngoing well!\n","code":"# regular list of lists\nx = [[\"a\", \"b\"], [\"c\", \"d\"]]\n[x[0][0], x[1][0]]\n\n# numpy\nimport numpy as np\nnp_x = np.array(x)\nnp_x[:,0]\n# edited/added\nbaseball = pd.read_csv(\"datasets/Introduction-to-Python/baseball.csv\")[['Height', 'Weight']]\n\n# baseball is available as a regular list of lists\n\n# Import numpy package\nimport numpy as np\n\n# Create np_baseball (2 cols)\nnp_baseball = np.array(baseball)\n\n# Print out the 50th row of np_baseball\nprint(np_baseball[49,:])## [ 70 195]# Select the entire second column of np_baseball: np_weight_lb\nnp_weight_lb = np_baseball[:,1]\n\n# Print out height of 124th player\nprint(np_baseball[123, 0])## 75"},{"path":"introduction-to-python.html","id":"d-arithmetic","chapter":"Introduction to Python","heading":"2D Arithmetic","text":"\nRemember calculated Body Mass Index baseball players? numpy able perform calculations element-wise (.e. element element). 2D numpy arrays isn’t different! can combine matrices single numbers, vectors, matrices.\n\nExecute code IPython shell see understand:\n\nnp_baseball coded ; ’s 2D numpy array 3 columns representing height (inches), weight (pounds) age (years).\n\nmanaged get hold changes height, weight age baseball players. available 2D numpy array, updated. Add np_baseball updated print result.\n\nwant convert units height weight metric (meters kilograms respectively). first step, create numpy array three values: 0.0254, 0.453592 1. Name array conversion.\n\nMultiply np_baseball conversion print result.\n\nGreat job! Notice little code, can change values numpy data structure specific way. useful future data scientist!\n\nnow know use numpy functions get better feeling data. basically comes importing numpy calling several simple functions numpy arrays:\n\nbaseball data available 2D numpy array 3 columns (height, weight, age) 1015 rows. name numpy array np_baseball. restructuring data, however, notice height values abnormally high. Follow instructions discover summary statistic best suited ’re dealing -called outliers.\n\nCreate numpy array np_height_in equal first column np_baseball.\n\nPrint mean np_height_in.\n\nPrint median np_height_in.\n\naverage height 1586 inches, doesn’t sound right, ? However, median seem affected outliers: 74 inches makes perfect sense. ’s always good idea check median mean, get idea overall distribution entire dataset.\n","code":"import numpy as np\nnp_mat = np.array([[1, 2],\n                   [3, 4],\n                   [5, 6]])\nnp_mat * 2\nnp_mat + np.array([10, 10])\nnp_mat + np_mat\n# edited/added\nbaseball = pd.read_csv(\"datasets/Introduction-to-Python/baseball.csv\")[['Height', 'Weight', 'Age']]\nn = len(baseball)\nupdated = np.array(pd.read_csv(\"datasets/Introduction-to-Python/update.csv\", header = None))\n\n# baseball is available as a regular list of lists\n# updated is available as 2D numpy array\n\n# Import numpy package\nimport numpy as np\n\n# Create np_baseball (3 cols)\nnp_baseball = np.array(baseball)\n\n# Print out addition of np_baseball and updated\nprint(np_baseball + updated)## [[ 75.2303559  168.83775102  23.99      ]\n##  [ 75.02614252 231.09732309  35.69      ]\n##  [ 73.1544228  215.08167641  31.78      ]\n##  ...\n##  [ 76.09349925 209.23890778  26.19      ]\n##  [ 75.82285669 172.21799965  32.01      ]\n##  [ 73.99484223 203.14402711  28.92      ]]# Create numpy array: conversion\nconversion = np.array([0.0254, 0.453592, 1])\n\n# Print out product of np_baseball and conversion\nprint(np_baseball * conversion)## [[ 1.8796  81.64656 22.99   ]\n##  [ 1.8796  97.52228 34.69   ]\n##  [ 1.8288  95.25432 30.78   ]\n##  ...\n##  [ 1.905   92.98636 25.19   ]\n##  [ 1.905   86.18248 31.01   ]\n##  [ 1.8542  88.45044 27.92   ]]import numpy as np\nx = [1, 4, 8, 10, 12]\nnp.mean(x)\nnp.median(x)\n# np_baseball is available\n\n# Import numpy\nimport numpy as np\n\n# Create np_height_in from np_baseball\nnp_height_in = np_baseball[:,0]\n\n# Print out the mean of np_height_in\nprint(np.mean(np_height_in))## 73.6896551724138# Print out the median of np_height_in\nprint(np.median(np_height_in))## 74.0"},{"path":"introduction-to-python.html","id":"numpy-basic-statistics","chapter":"Introduction to Python","heading":"Numpy: Basic Statistics","text":"","code":""},{"path":"introduction-to-python.html","id":"average-versus-median","chapter":"Introduction to Python","heading":"Average versus median","text":"\nnow know use numpy functions get better feeling data. basically comes importing numpy calling several simple functions numpy arrays:\n\nbaseball data available 2D numpy array 3 columns (height, weight, age) 1015 rows. name numpy array np_baseball. restructuring data, however, notice height values abnormally high. Follow instructions discover summary statistic best suited ’re dealing -called outliers.\n\nCreate numpy array np_height_in equal first column np_baseball.\n\nPrint mean np_height_in.\n\nPrint median np_height_in.\n","code":"import numpy as np\nx = [1, 4, 8, 10, 12]\nnp.mean(x)\nnp.median(x)\n# np_baseball is available\n\n# Import numpy\nimport numpy as np\n\n# Create np_height_in from np_baseball\nnp_height_in = np_baseball[:,0]\n\n# Print out the mean of np_height_in\nprint(np.mean(np_height_in))## 73.6896551724138"},{"path":"introduction-to-python.html","id":"explore-the-baseball-data","chapter":"Introduction to Python","heading":"Explore the baseball data","text":"\nmean median far apart, decide complain MLB. find error send corrected data . ’s available 2D Numpy array np_baseball, three columns.\n\nPython script editor already includes code print informative messages different summary statistics. Can finish job?\n\ncode print mean height already included. Complete code median height. Replace None correct code.\n\nUse np.std() first column np_baseball calculate stddev. Replace None correct code.\n\nbig players tend heavier? Use np.corrcoef() store correlation first second column np_baseball corr. Replace None correct code.\n\nGreat! Time use new data science skills last exercise!\n","code":"# np_baseball is available\n\n# Import numpy\nimport numpy as np\n\n# Print mean height (first column)\navg = np.mean(np_baseball[:,0])\nprint(\"Average: \" + str(avg))## Average: 73.6896551724138# Print median height. Replace 'None'\nmed = np.median(np_baseball[:,0])\nprint(\"Median: \" + str(med))## Median: 74.0# Print out the standard deviation on height. Replace 'None'\nstddev = np.std(np_baseball[:,0])\nprint(\"Standard Deviation: \" + str(stddev))## Standard Deviation: 2.312791881046546# Print out correlation between first and second column. Replace 'None'\ncorr = np.corrcoef(np_baseball[:,0], np_baseball[:,1])\nprint(\"Correlation: \" + str(corr))## Correlation: [[1.         0.53153932]\n##  [0.53153932 1.        ]]"},{"path":"introduction-to-python.html","id":"blend-it-all-together","chapter":"Introduction to Python","heading":"Blend it all together","text":"\nlast exercises ’ve learned everything know heights weights baseball players. Now ’s time dive another sport: soccer.\n\n’ve contacted FIFA data handed two lists. lists following:\n\nelement lists corresponds player. first list, positions, contains strings representing player’s position. possible positions : ‘GK’ (goalkeeper), ‘M’ (midfield), ‘’ (attack) ‘D’ (defense). second list, heights, contains integers representing height player cm. first player lists goalkeeper pretty tall (191 cm).\n\n’re fairly confident median height goalkeepers higher players soccer field. friends don’t believe , determined show using data received FIFA newly acquired Python skills.\n\nConvert heights positions, regular lists, numpy arrays. Call np_heights np_positions.\n\nExtract heights goalkeepers. can use little trick : use np_positions == ‘GK’ index np_heights. Assign result gk_heights.\n\nExtract heights players. time use np_positions != ‘GK’ index np_heights. Assign result other_heights.\n\nPrint median height goalkeepers using np.median(). Replace None correct code.\n\nplayers. Print median height. Replace None correct code.\n\nWonderful! right disbelievers wrong! exercise marks end Intro Python Data Science course. See another course!\n","code":"positions = ['GK', 'M', 'A', 'D', ...]\nheights = [191, 184, 185, 180, ...]\n# edited/added\nfifa =  pd.read_csv(\"datasets/Introduction-to-Python/fifa.csv\", skipinitialspace=True, usecols=['position', 'height'])\npositions = list(fifa.position)\nheights = list(fifa.height)\n\n# heights and positions are available as lists\n\n# Import numpy\nimport numpy as np\n\n# Convert positions and heights to numpy arrays: np_positions, np_heights\nnp_positions = np.array(positions)\nnp_heights = np.array(heights)\n\n# Heights of the goalkeepers: gk_heights\ngk_heights = np_heights[np_positions == 'GK']\n\n# Heights of the other players: other_heights\nother_heights = np_heights[np_positions != 'GK']\n\n# Print out the median height of goalkeepers. Replace 'None'\nprint(\"Median height of goalkeepers: \" + str(np.median(gk_heights)))## Median height of goalkeepers: 188.0# Print out the median height of other players. Replace 'None'\nprint(\"Median height of other players: \" + str(np.median(other_heights)))## Median height of other players: 181.0"}]
