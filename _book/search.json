[{"path":"index.html","id":"run-the-codes","chapter":"Run the Codes","heading":"Run the Codes","text":"See list packages Python","code":""},{"path":"introduction-to-python.html","id":"introduction-to-python","chapter":"Introduction to Python","heading":"Introduction to Python","text":"Hugo Bowne-Anderson\nHugo data scientist, educator, writer podcaster formerly DataCamp. main interests promoting data & AI literacy, helping spread data skills organizations society amateur stand comedy NYC. want know likes talk , definitely check DataFramed, DataCamp podcast, hosted produced.\nCourse Description\nPython general-purpose programming language becoming ever popular data science. Companies worldwide using Python harvest insights data gain competitive edge. Unlike Python tutorials, course focuses Python specifically data science. Introduction Python course, ’ll learn powerful ways store manipulate data, helpful data science tools begin conducting analyses. Start DataCamp’s online Python curriculum now.\n","code":""},{"path":"introduction-to-python.html","id":"python-basics","chapter":"Introduction to Python","heading":"Python Basics","text":"\nintroduction basic concepts Python. Learn use Python interactively using script. Create first variables acquaint Python’s basic data types.\n","code":""},{"path":"introduction-to-python.html","id":"hello-python","chapter":"Introduction to Python","heading":"Hello Python!","text":"","code":""},{"path":"introduction-to-python.html","id":"the-python-interface","chapter":"Introduction to Python","heading":"The Python Interface","text":"\nPython script right, can type Python code solve exercises. hit Run Code Submit Answer, python script (script.py) executed output shown IPython Shell. Submit Answer checks whether submission correct gives feedback.\n\ncan hit Run Code Submit Answer often want. ’re stuck, can click Get Hint, ultimately Get Solution.\n\ncan also use IPython Shell interactively simply typing commands hitting Enter. work shell directly, code checked correctness great way experiment.\n\nExperiment IPython Shell; type 5 / 8, example.\n\nAdd another line code Python script top-right (Shell): print(7 + 10).\n\nHit Submit Answer execute Python script receive feedback.\n\nGreat! next one!\n","code":"# Example, do not modify!\nprint(5 / 8)## 0.625# Put code below here\nprint(7 + 10)## 17"},{"path":"introduction-to-python.html","id":"when-to-use-python","chapter":"Introduction to Python","heading":"When to use Python?","text":"\nPython pretty versatile language. applications can use Python?\nwant quick calculations.new business, want develop database-driven website.boss asks clean analyze results latest satisfaction survey..\nCorrect! Python extremely versatile language.\n","code":""},{"path":"introduction-to-python.html","id":"any-comments","chapter":"Introduction to Python","heading":"Any comments?","text":"\nSomething Hugo didn’t mention videos can add comments Python scripts. Comments important make sure others can understand code .\n\nadd comments Python script, can use # tag. comments run Python code, influence result. example, take comment editor, # Division; completely ignored execution.\n\nprint(7 + 10), add comment\n\nGreat!\n","code":"# Addition\n# Division\nprint(5 / 8)## 0.625# Addition\nprint(7 + 10)## 17"},{"path":"introduction-to-python.html","id":"python-as-a-calculator","chapter":"Introduction to Python","heading":"Python as a calculator","text":"\nPython perfectly suited basic calculations. Apart addition, subtraction, multiplication division, also support advanced operations :\n\nExponentiation: **. operator raises number left power number right. example 4**2 give 16.\n\nModulo: %. operator returns remainder division number left number right. example 18 % 7 equals 4.\n\ncode script gives examples.\n\nSuppose $100, can invest 10% return year. one year, ’s \\(100 \\times 1.1 = 110\\) dollars, two years ’s \\(100 \\times 1.1 \\times 1.1 = 121\\). Add code calculate much money end 7 years, print result.\n\nTime another video!\n","code":"# Addition, subtraction\nprint(5 + 5)## 10print(5 - 5)## 0# Multiplication, division, modulo, and exponentiation\nprint(3 * 5)## 15print(10 / 2)## 5.0print(18 % 7)## 4print(4 ** 2)## 16# How much is your $100 worth after 7 years?\nprint(100 * 1.1 ** 7)## 194.87171000000012"},{"path":"introduction-to-python.html","id":"variables-and-types","chapter":"Introduction to Python","heading":"Variables and Types","text":"","code":""},{"path":"introduction-to-python.html","id":"variable-assignment","chapter":"Introduction to Python","heading":"Variable Assignment","text":"\nPython, variable allows refer value name. create variable use =, like example:\n\ncan now use name variable, x, instead actual value, 5.\n\nRemember, = Python means assignment, doesn’t test equality!\n\nCreate variable savings value 100.\n\nCheck variable typing print(savings) script.\n\nGreat! Let’s try calculations variable now!\n","code":"x = 5\n# Create a variable savings\nsavings = 100\n\n# Print out savings\nprint(savings)## 100"},{"path":"introduction-to-python.html","id":"calculations-with-variables","chapter":"Introduction to Python","heading":"Calculations with variables","text":"\nRemember calculated money ended 7 years investing $100? something like :\n\nInstead calculating actual values, can use variables instead. savings variable ’ve created previous exercise represents $100 started . ’s create new variable represent 1.1 redo calculations!\n\nCreate variable growth_multiplier, equal 1.1.\n\nCreate variable, result, equal amount money saved 7 years.\n\nPrint value result.\n\nGreat!\n","code":"100 * 1.1 ** 7\n# Create a variable growth_multiplier\ngrowth_multiplier = 1.1\n\n# Calculate result\nresult = savings * growth_multiplier ** 7\n\n# Print out result\nprint(result)## 194.87171000000012"},{"path":"introduction-to-python.html","id":"other-variable-types","chapter":"Introduction to Python","heading":"Other variable types","text":"\nprevious exercise, worked two Python data types:\n\nint, integer: number without fractional part. savings, value 100, example integer.\n\nfloat, floating point: number integer fractional part, separated point. growth_multiplier, value 1.1, example float.\n\nNext numerical data types, two common data types:\n\nstr, string: type represent text. can use single double quotes build string.\n\nbool, boolean: type represent logical values. Can True False (capitalization important!).\n\nCreate new string, desc, value “compound interest”.\n\nCreate new boolean, profitable, value True.\n\nNice!\n","code":"# Create a variable desc\ndesc = \"compound interest\"\n\n# Create a variable profitable\nprofitable = True"},{"path":"introduction-to-python.html","id":"guess-the-type","chapter":"Introduction to Python","heading":"Guess the type","text":"\nfind type value variable refers value, can use type() function. Suppose ’ve defined variable , forgot type variable. determine type , simply execute:\n\nalready went ahead created three variables: , b c. can use IPython shell discover type. following options correct?\ntype int, b type str, c type boola type float, b type bool, c type stra type float, b type str, c type boola type int, b type bool, c type str\nCorrecto perfecto!\n","code":"type(a)\n# edited/added\na=194.87171000000012\nb='True'type(a)## <class 'float'>type(b)## <class 'str'>"},{"path":"introduction-to-python.html","id":"operations-with-other-types","chapter":"Introduction to Python","heading":"Operations with other types","text":"\nHugo mentioned different types behave differently Python.\n\nsum two strings, example, ’ll get different behavior sum two integers two booleans.\n\nscript variables different types already created. ’s use .\n\nCalculate product savings growth_multiplier. Store result year1.\n\nthink resulting type ? Find printing type year1.\n\nCalculate sum desc desc store result new variable doubledesc.\n\nPrint doubledesc. expect ?\n\nNice. Notice desc + desc causes “compound interest” “compound interest” pasted together.\n","code":"# edited/added\nsavings = 100\ngrowth_multiplier = 1.1\ndesc = \"compound interest\"\n\n# Assign product of savings and growth_multiplier to year1\nyear1 = savings * growth_multiplier\n\n# Print the type of year1\nprint(type(year1))## <class 'float'># Assign sum of desc and desc to doubledesc\ndoubledesc = desc + desc\n\n# Print out doubledesc\nprint(doubledesc)## compound interestcompound interest"},{"path":"introduction-to-python.html","id":"type-conversion","chapter":"Introduction to Python","heading":"Type conversion","text":"\nUsing + operator paste together two strings can useful building custom messages.\n\nSuppose, example, ’ve calculated return investment want summarize results string. Assuming integer savings float result defined, can try something like :\n\nwork, though, simply sum strings integers/floats.\n\nfix error, ’ll need explicitly convert types variables. specifically, ’ll need str(), convert value string. str(savings), example, convert integer savings string.\n\nSimilar functions int(), float() bool() help convert Python values type.\n\nHit Run Code run code. Try understand error message.\n\nFix code printout runs without errors; use function str() convert variables strings.\n\nConvert variable pi_string float store float new variable, pi_float.\n\nGreat! profit around $95; ’s pretty awesome indeed!\n","code":"print(\"I started with $\" + savings + \" and now have $\" + result + \". Awesome!\")\n# Definition of savings and result\nsavings = 100\nresult = 100 * 1.10 ** 7\n\n# Fix the printout\n#print(\"I started with $\" + savings + \" and now have $\" + result + \". Awesome!\")\n\n# Definition of savings and result\nsavings = 100\nresult = 100 * 1.10 ** 7\n\n# Fix the printout\nprint(\"I started with $\" + str(savings) + \" and now have $\" + str(result) + \". Awesome!\")## I started with $100 and now have $194.87171000000012. Awesome!# Definition of pi_string\npi_string = \"3.1415926\"\n\n# Convert pi_string into float: pi_float\npi_float = float(pi_string)"},{"path":"introduction-to-python.html","id":"can-python-handle-everything","chapter":"Introduction to Python","heading":"Can Python handle everything?","text":"\nNow know something combining different sources information, look four Python expressions .\none throw error? can always copy paste code IPython Shell find !\n“can add integers, like” + str(5) + ” strings.”“said” + (“Hey” * 2) + “Hey!”“correct answer multiple choice exercise answer number” + 2True + False\nCorrect! ’re converting 2 string str(), give error.\n","code":""},{"path":"introduction-to-python.html","id":"python-lists","chapter":"Introduction to Python","heading":"Python Lists","text":"\nLearn store, access, manipulate data lists: first step toward efficiently working huge amounts data.\n","code":""},{"path":"introduction-to-python.html","id":"python-lists-1","chapter":"Introduction to Python","heading":"Python Lists","text":"","code":""},{"path":"introduction-to-python.html","id":"create-a-list","chapter":"Introduction to Python","heading":"Create a list","text":"\nopposed int, bool etc., list compound data type; can group values together:\n\nmeasuring height family, decide collect information house ’re living . areas different parts house stored separate variables now, shown script.\n\nCreate list, areas, contains area hallway (hall), kitchen (kit), living room (liv), bedroom (bed) bathroom (bath), order. Use predefined variables.\n\nPrint areas print() function.\n\nNice! list way better , isn’t ?\n","code":"a = \"is\"\nb = \"nice\"\nmy_list = [\"my\", \"list\", a, b]\n# Area variables (in square meters)\nhall = 11.25\nkit = 18.0\nliv = 20.0\nbed = 10.75\nbath = 9.50\n\n# Create list areas\nareas = [hall, kit, liv, bed, bath]\n\nprint(areas)## [11.25, 18.0, 20.0, 10.75, 9.5]"},{"path":"introduction-to-python.html","id":"create-list-with-different-types","chapter":"Introduction to Python","heading":"Create list with different types","text":"\nlist can contain Python type. Although ’s really common, list can also contain mix Python types including strings, floats, booleans, etc.\n\nprintout previous exercise wasn’t really satisfying. ’s just list numbers representing areas, can’t tell area corresponds part house.\n\ncode editor start solution. areas, name corresponding room already placed front. Pay attention ! “bathroom” string, bath variable represents float 9.50 specified earlier.\n\nFinish code creates areas list. Build list list first contains name room string area. words, add strings “hallway”, “kitchen” “bedroom” appropriate locations.\n\nPrint areas ; printout informative time?\n\nNice! list contains strings floats, ’s problem Python!\n","code":"# area variables (in square meters)\nhall = 11.25\nkit = 18.0\nliv = 20.0\nbed = 10.75\nbath = 9.50\n\n# Adapt list areas\nareas = [\"hallway\", hall, \"kitchen\", kit, \"living room\", liv, \"bedroom\", bed, \"bathroom\", bath]\n\n# Print areas\nprint(areas)## ['hallway', 11.25, 'kitchen', 18.0, 'living room', 20.0, 'bedroom', 10.75, 'bathroom', 9.5]"},{"path":"introduction-to-python.html","id":"select-the-valid-list","chapter":"Introduction to Python","heading":"Select the valid list","text":"\nlist can contain Python type. list also Python type. means list can also contain list! Python getting funkier minute, fear , just remember list syntax:\n\nCan tell ones following lines Python code valid ways build list?\n\n. [1, 3, 4, 2]\nB. [[1, 2, 3], [4, 5, 7]]\nC. [1 + 2, “” * 5, 3]\n, B CBB CC\nCorrect! funny may look, commands valid ways build Python list.\n","code":"my_list = [el1, el2, el3]\n"},{"path":"introduction-to-python.html","id":"list-of-lists","chapter":"Introduction to Python","heading":"List of lists","text":"\ndata scientist, ’ll often dealing lot data, make sense group data.\n\nInstead creating flat list containing strings floats, representing names areas rooms house, can create list lists. script editor can already give idea.\n\nDon’t get confused : “hallway” string, hall variable represents float 11.25 specified earlier.\n\nFinish list lists also contains bedroom bathroom data. Make sure enter order!\n\nPrint house; way structuring data make sense?\n\nPrint type house. still dealing list?\n\nGreat! Get ready learn list subsetting!\n","code":"# area variables (in square meters)\nhall = 11.25\nkit = 18.0\nliv = 20.0\nbed = 10.75\nbath = 9.50\n\n# house information as list of lists\nhouse = [[\"hallway\", hall],\n         [\"kitchen\", kit],\n         [\"living room\", liv],\n         [\"bedroom\", bed],\n         [\"bathroom\", bath]]\n         \n# Print out house\nprint(house)## [['hallway', 11.25], ['kitchen', 18.0], ['living room', 20.0], ['bedroom', 10.75], ['bathroom', 9.5]]# Print out the type of house\nprint(type(house))## <class 'list'>"},{"path":"introduction-to-python.html","id":"subsetting-lists","chapter":"Introduction to Python","heading":"Subsetting Lists","text":"","code":""},{"path":"introduction-to-python.html","id":"subset-and-conquer","chapter":"Introduction to Python","heading":"Subset and conquer","text":"\nSubsetting Python lists piece cake. Take code sample , creates list x selects “b” . Remember second element, index 1. can also use negative indexing.\n\nRemember areas list , containing strings floats? definition already script. Can add correct code Python subsetting?\n\nPrint second element areas list (value 11.25).\n\nSubset print last element areas, 9.50. Using negative index makes sense !\n\nSelect number representing area living room (20.0) print .\n\nGood job!\n","code":"x = [\"a\", \"b\", \"c\", \"d\"]\nx[1]\nx[-3] # same result!\n# Create the areas list\nareas = [\"hallway\", 11.25, \"kitchen\", 18.0, \"living room\", 20.0, \"bedroom\", 10.75, \"bathroom\", 9.50]\n\n# Print out second element from areas\nprint(areas[1])## 11.25# Print out last element from areas\nprint(areas[-1])## 9.5# Print out the area of the living room\nprint(areas[5])## 20.0"},{"path":"introduction-to-python.html","id":"subset-and-calculate","chapter":"Introduction to Python","heading":"Subset and calculate","text":"\n’ve extracted values list, can use perform additional calculations. Take example, second fourth element list x extracted. strings result pasted together using + operator:\n\nUsing combination list subsetting variable assignment, create new variable, eat_sleep_area, contains sum area kitchen area bedroom.\n\nPrint new variable eat_sleep_area.\n\nBellissimo!\n","code":"x = [\"a\", \"b\", \"c\", \"d\"]\nprint(x[1] + x[3])\n# Create the areas list\nareas = [\"hallway\", 11.25, \"kitchen\", 18.0, \"living room\", 20.0, \"bedroom\", 10.75, \"bathroom\", 9.50]\n\n# Sum of kitchen and bedroom area: eat_sleep_area\neat_sleep_area = areas[3] + areas[-3]\n\n# Print the variable eat_sleep_area\nprint(eat_sleep_area)## 28.75"},{"path":"introduction-to-python.html","id":"slicing-and-dicing","chapter":"Introduction to Python","heading":"Slicing and dicing","text":"\nSelecting single values list just one part story. ’s also possible slice list, means selecting multiple elements list. Use following syntax:\n\nstart index included, end index .\n\ncode sample shows example. list “b” “c”, corresponding indexes 1 2, selected list x:\n\nelements index 1 2 included, element index 3 .\n\nUse slicing create list, downstairs, contains first 6 elements areas.\n\nsimilar thing create new variable, upstairs, contains last 4 elements areas.\n\nPrint downstairs upstairs using print().\n\nGreat!\n","code":"my_list[start:end]\nx = [\"a\", \"b\", \"c\", \"d\"]\nx[1:3]\n# Create the areas list\nareas = [\"hallway\", 11.25, \"kitchen\", 18.0, \"living room\", 20.0, \"bedroom\", 10.75, \"bathroom\", 9.50]\n\n# Use slicing to create downstairs\ndownstairs = areas[0:6]\n\n# Use slicing to create upstairs\nupstairs = areas[6:10]\n\n# Print out downstairs and upstairs\nprint(downstairs)## ['hallway', 11.25, 'kitchen', 18.0, 'living room', 20.0]print(upstairs)## ['bedroom', 10.75, 'bathroom', 9.5]"},{"path":"introduction-to-python.html","id":"slicing-and-dicing-2","chapter":"Introduction to Python","heading":"Slicing and dicing (2)","text":"\nvideo, Hugo first discussed syntax specify begin end slice list:\n\nHowever, ’s also possible specify indexes. don’t specify begin index, Python figures want start slice beginning list. don’t specify end index, slice go way last element list. experiment , try following commands IPython Shell:\n\nCreate downstairs , first 6 elements areas. time, simplify slicing omitting begin index.\n\nCreate upstairs , last 4 elements areas. time, simplify slicing omitting end index.\n\nWonderful!\n","code":"my_list[begin:end]\nx = [\"a\", \"b\", \"c\", \"d\"]\nx[:2]\nx[2:]\nx[:]\n# Create the areas list\nareas = [\"hallway\", 11.25, \"kitchen\", 18.0, \"living room\", 20.0, \"bedroom\", 10.75, \"bathroom\", 9.50]\n\n# Alternative slicing to create downstairs\ndownstairs = areas[:6]\n\n# Alternative slicing to create upstairs\nupstairs = areas[6:]"},{"path":"introduction-to-python.html","id":"subsetting-lists-of-lists","chapter":"Introduction to Python","heading":"Subsetting lists of lists","text":"\nsaw Python list can contain practically anything; even lists! subset lists lists, can use technique : square brackets. Try commands following code sample IPython Shell:\n\nx[2] results list, can subset adding additional square brackets.\n\nhouse[-1][1] return? house, list lists created , already defined workspace. can experiment IPython Shell.\nfloat: kitchen areaA string: “kitchen”float: bathroom areaA string: “bathroom”\nCorrectomundo! last piece list puzzle manipulation.\n","code":"x = [[\"a\", \"b\", \"c\"],\n     [\"d\", \"e\", \"f\"],\n     [\"g\", \"h\", \"i\"]]\nx[2][0]\nx[2][:2]\n# edited/added\nhouse = [['hallway', 11.25],\n ['kitchen', 18.0],\n ['living room', 20.0],\n ['bedroom', 10.75],\n ['bathroom', 9.5]]\nprint(house[-1][1])## 9.5"},{"path":"introduction-to-python.html","id":"manipulating-lists","chapter":"Introduction to Python","heading":"Manipulating Lists","text":"","code":""},{"path":"introduction-to-python.html","id":"replace-list-elements","chapter":"Introduction to Python","heading":"Replace list elements","text":"\nReplacing list elements pretty easy. Simply subset list assign new values subset. can select single elements can change entire list slices .\n\nUse IPython Shell experiment commands . Can tell ’s happening ?\n\nfollowing exercises, ’ll continue working areas list contains names areas different rooms house.\n\nUpdate area bathroom area 10.50 square meters instead 9.50.\n\nMake areas list trendy! Change “living room” “chill zone”.\n\nSweet! code sample showed, can also slice list replace another list update multiple elements single command.\n","code":"x = [\"a\", \"b\", \"c\", \"d\"]\nx[1] = \"r\"\nx[2:] = [\"s\", \"t\"]\n# Create the areas list\nareas = [\"hallway\", 11.25, \"kitchen\", 18.0, \"living room\", 20.0, \"bedroom\", 10.75, \"bathroom\", 9.50]\n\n# Correct the bathroom area\nareas[-1] = 10.50\n\n# Change \"living room\" to \"chill zone\"\nareas[4] = \"chill zone\""},{"path":"introduction-to-python.html","id":"extend-a-list","chapter":"Introduction to Python","heading":"Extend a list","text":"\ncan change elements list, sure want able add elements , right? can use + operator:\n\njust won lottery, awesome! decide build poolhouse garage. Can add information areas list?\n\nUse + operator paste list [“poolhouse”, 24.5] end areas list. Store resulting list areas_1.\n\nextend areas_1 adding data garage. Add string “garage” float 15.45. Name resulting list areas_2.\n\nCool! list shaping nicely!\n","code":"x = [\"a\", \"b\", \"c\", \"d\"]\ny = x + [\"e\", \"f\"]\n# Create the areas list (updated version)\nareas = [\"hallway\", 11.25, \"kitchen\", 18.0, \"chill zone\", 20.0,\n         \"bedroom\", 10.75, \"bathroom\", 10.50]\n\n# Add poolhouse data to areas, new list is areas_1\nareas_1 = areas + [\"poolhouse\", 24.5]\n\n# Add garage data to areas_1, new list is areas_2\nareas_2 = areas_1 + [\"garage\", 15.45]"},{"path":"introduction-to-python.html","id":"delete-list-elements","chapter":"Introduction to Python","heading":"Delete list elements","text":"\nFinally, can also remove elements list. can del statement:\n\nPay attention : soon remove element list, indexes elements come deleted element change!\n\nupdated extended version areas ’ve built previous exercises coded . can copy paste IPython Shell play around result.\n\nmistake! amount won lottery big looks like poolhouse isn’t going happen. decide remove corresponding string float areas list.\n\n; sign used place commands line. following two code chunks equivalent:\n\ncode chunks job us?\ndel(areas[10]); del(areas[11])del(areas[10:11])del(areas[-4:-2])del(areas[-3]); del(areas[-4])\nCorrect! ’ll learn easier ways remove specific elements Python lists later .\n","code":"x = [\"a\", \"b\", \"c\", \"d\"]\ndel(x[1])\nareas = [\"hallway\", 11.25, \"kitchen\", 18.0,\n        \"chill zone\", 20.0, \"bedroom\", 10.75,\n         \"bathroom\", 10.50, \"poolhouse\", 24.5,\n         \"garage\", 15.45]\n# Same line\ncommand1; command2\n\n# Separate lines\ncommand1\ncommand2\n"},{"path":"introduction-to-python.html","id":"inner-workings-of-lists","chapter":"Introduction to Python","heading":"Inner workings of lists","text":"\nend video, Hugo explained Python lists work behind scenes. exercise ’ll get hands-experience .\n\nPython code script already creates list name areas copy named areas_copy. Next, first element areas_copy list changed areas list printed . hit Run Code ’ll see , although ’ve changed areas_copy, change also takes effect areas list. ’s areas areas_copy point list.\n\nwant prevent changes areas_copy also taking effect areas, ’ll explicit copy areas list. can list() using [:].\n\nChange second command, creates variable areas_copy, areas_copy explicit copy areas. edit, changes made areas_copy shouldn’t affect areas. Submit answer check .\n\nNice! difference explicit reference-based copies subtle, can really important. Try keep mind list stored computer’s memory.\n","code":"# Create list areas\nareas = [11.25, 18.0, 20.0, 10.75, 9.50]\n\n# Create areas_copy\nareas_copy = areas\n\n# Change areas_copy\nareas_copy[0] = 5.0\n\n# Print areas\nprint(areas)## [5.0, 18.0, 20.0, 10.75, 9.5]# Create list areas\nareas = [11.25, 18.0, 20.0, 10.75, 9.50]\n\n# Create areas_copy\nareas_copy = list(areas)\n\n# Change areas_copy\nareas_copy[0] = 5.0\n\n# Print areas\nprint(areas)## [11.25, 18.0, 20.0, 10.75, 9.5]"},{"path":"introduction-to-python.html","id":"functions-and-packages","chapter":"Introduction to Python","heading":"Functions and Packages","text":"\n’ll learn use functions, methods, packages efficiently leverage code brilliant Python developers written. goal reduce amount code need solve challenging problems!\n","code":""},{"path":"introduction-to-python.html","id":"functions","chapter":"Introduction to Python","heading":"Functions","text":"","code":""},{"path":"introduction-to-python.html","id":"familiar-functions","chapter":"Introduction to Python","heading":"Familiar functions","text":"\nbox, Python offers bunch built-functions make life data scientist easier. already know two functions: print() type(). ’ve also used functions str(), int(), bool() float() switch data types. built-functions well.\n\nCalling function easy. get type 3.0 store output new variable, result, can use following:\n\ngeneral recipe calling functions saving result variable thus:\n\nUse print() combination type() print type var1.\n\nUse len() get length list var1. Wrap print() call directly print .\n\nUse int() convert var2 integer. Store output out2.\n\nGreat job! len() function extremely useful; also works strings count number characters!\n","code":"result = type(3.0)\noutput = function_name(input)\n# Create variables var1 and var2\nvar1 = [1, 2, 3, 4]\nvar2 = True\n\n# Print out type of var1\nprint(type(var1))## <class 'list'># Print out length of var1\nprint(len(var1))## 4# Convert var2 to an integer: out2\nout2 = int(var2)"},{"path":"introduction-to-python.html","id":"help","chapter":"Introduction to Python","heading":"Help!","text":"\nMaybe already know name Python function, still figure use . Ironically, ask information function another function: help(). IPython specifically, can also use ? function name.\n\nget help max() function, example, can use one calls:\n\nUse Shell open documentation complex(). following statements true?\ncomplex() takes exactly two arguments: real [, imag].complex() takes two arguments: real imag. arguments required.complex() takes two arguments: real imag. real required argument, imag optional argument.complex() takes two arguments: real imag. don’t specify imag, set 1 Python.\nPerfect!\n","code":"help(max)\n?max\n"},{"path":"introduction-to-python.html","id":"multiple-arguments","chapter":"Introduction to Python","heading":"Multiple arguments","text":"\nprevious exercise, square brackets around imag documentation showed us imag argument optional. Python also uses different way tell users arguments optional.\n\nlook documentation sorted() typing help(sorted) IPython Shell.\n\n’ll see sorted() takes three arguments: iterable, key reverse.\n\nkey=None means don’t specify key argument, None. reverse=False means don’t specify reverse argument, False.\n\nexercise, ’ll specify iterable reverse, key. first input pass sorted() matched iterable argument, second input? tell Python want specify reverse without changing anything key, can use =:\n\nTwo lists created editor. Can paste together sort descending order?\n\nNote: now, can understand iterable collection objects, e.g. List.\n\nUse + merge contents first second new list: full.\n\nCall sorted() full specify reverse argument True. Save sorted list full_sorted.\n\nFinish printing full_sorted.\n\nCool! Head video Python methods.\n","code":"sorted(___, reverse = ___)\n# Create lists first and second\nfirst = [11.25, 18.0, 20.0]\nsecond = [10.75, 9.50]\n\n# Paste together first and second: full\nfull = first + second\n\n# Sort full in descending order: full_sorted\nfull_sorted = sorted(full, reverse = True)\n\n# Print out full_sorted\nprint(full_sorted)## [20.0, 18.0, 11.25, 10.75, 9.5]"},{"path":"introduction-to-python.html","id":"methods","chapter":"Introduction to Python","heading":"Methods","text":"","code":""},{"path":"introduction-to-python.html","id":"string-methods","chapter":"Introduction to Python","heading":"String Methods","text":"\nStrings come bunch methods. Follow instructions closely discover . want discover detail, can always type help(str) IPython Shell.\n\nstring place already created experiment .\n\nUse upper() method place store result place_up. Use syntax calling methods learned previous video.\n\nPrint place place_up. change?\n\nPrint number o’s variable place calling count() place passing letter ‘o’ input method. ’re talking variable place, word “place”!\n\nNice! Notice printouts upper() method change object called . different lists next exercise!\n","code":"# string to experiment with: place\nplace = \"poolhouse\"\n\n# Use upper() on place: place_up\nplace_up = place.upper()\n\n# Print out place and place_up\nprint(place)## poolhouseprint(place_up)## POOLHOUSE# Print out the number of o's in place\nprint(place.count('o'))## 3"},{"path":"introduction-to-python.html","id":"list-methods","chapter":"Introduction to Python","heading":"List Methods","text":"\nStrings Python types methods associated . Lists, floats, integers booleans also types come packaged bunch useful methods. exercise, ’ll experimenting :\n\nindex(), get index first element list matches input \n\ncount(), get number times element appears list.\n\n’ll working list area different parts house: areas.\n\nUse index() method get index element areas equal 20.0. Print index.\n\nCall count() areas find many times 9.50 appears list. , simply print number.\n\nNice! examples list methods change list called .\n","code":"# Create list areas\nareas = [11.25, 18.0, 20.0, 10.75, 9.50]\n\n# Print out the index of the element 20.0\nprint(areas.index(20.0))## 2# Print out how often 9.50 appears in areas\nprint(areas.count(9.50))## 1"},{"path":"introduction-to-python.html","id":"list-methods-2","chapter":"Introduction to Python","heading":"List Methods (2)","text":"\nlist methods change list ’re called . Examples :\n\nappend(), adds element list called ,\n\nremove(), removes first element list matches input, \n\nreverse(), reverses order elements list called .\n\n’ll working list area different parts house: areas.\n\nUse append() twice add size poolhouse garage : 24.5 15.45, respectively. Make sure add order.\n\nPrint areas\n\nUse reverse() method reverse order elements areas.\n\nPrint areas .\n\nGreat!\n","code":"# Create list areas\nareas = [11.25, 18.0, 20.0, 10.75, 9.50]\n\n# Use append twice to add poolhouse and garage size\nareas.append(24.5)\nareas.append(15.45)\n\n# Print out areas\nprint(areas)## [11.25, 18.0, 20.0, 10.75, 9.5, 24.5, 15.45]# Reverse the orders of the elements in areas\nareas.reverse()\n\n# Print out areas\nprint(areas)## [15.45, 24.5, 9.5, 10.75, 20.0, 18.0, 11.25]"},{"path":"introduction-to-python.html","id":"packages","chapter":"Introduction to Python","heading":"Packages","text":"","code":""},{"path":"introduction-to-python.html","id":"import-package","chapter":"Introduction to Python","heading":"Import package","text":"\ndata scientist, notions geometry never hurt. Let’s refresh basics.\n\nfancy clustering algorithm, want find circumference, \\(C\\), area, \\(\\), circle. radius circle r, can calculate \\(C\\) \\(\\) :\n\n\\[C = 2 \\pi r\\]\n\\[= \\pi r^2 \\]\n\nuse constant pi, ’ll need math package. variable r already coded script. Fill code calculate C see print() functions create nice printouts.\n\nImport math package. Now can access constant pi math.pi.\n\nCalculate circumference circle store C.\n\nCalculate area circle store .\n\nNice! know deal functions packages, power lot Python programmers fingertips!\n","code":"# Definition of radius\nr = 0.43\n\n# Import the math package\nimport math\n\n# Calculate C\nC = 2 * r * math.pi\n\n# Build printout\nprint(\"Circumference: \" + str(C))## Circumference: 2.701769682087222# Calculate A\nA = math.pi * r ** 2\n\n# Build printout\nprint(\"Area: \" + str(A))## Area: 0.5808804816487527"},{"path":"introduction-to-python.html","id":"selective-import","chapter":"Introduction to Python","heading":"Selective import","text":"\nGeneral imports, like import math, make functionality math package available . However, decide use specific part package, can always make import selective:\n\nLet’s say Moon’s orbit around planet Earth perfect circle, radius r (km) defined script.\n\nPerform selective import math package import radians function.\n\nCalculate distance travelled Moon 12 degrees orbit. Assign result dist. can calculate r * phi, r radius phi angle radians. convert angle degrees angle radians, use radians() function, just imported.\n\nPrint dist.\n\nNice! Head next exercise.\n","code":"from math import pi\n# Definition of radius\nr = 192500\n\n# Import radians function of math package\nfrom math import radians\n\n# Travel distance of Moon over 12 degrees. Store in dist.\ndist = r * radians(12)\n\n# Print out dist\nprint(dist)## 40317.10572106901"},{"path":"introduction-to-python.html","id":"different-ways-of-importing","chapter":"Introduction to Python","heading":"Different ways of importing","text":"\nseveral ways import packages modules Python. Depending import call, ’ll use different Python code.\n\nSuppose want use function inv(), linalg subpackage scipy package. want able use function follows:\n\nimport statement need order run code without error?\nimport scipyimport scipy.linalgfrom scipy.linalg import my_invfrom scipy.linalg import inv my_inv\nCorrect! word allows create local name function ’re importing: inv() now available my_inv().\n","code":"my_inv([[1,2], [3,4]])\n"},{"path":"introduction-to-python.html","id":"numpy","chapter":"Introduction to Python","heading":"NumPy","text":"\nNumPy fundamental Python package efficiently practice data science. Learn work powerful tools NumPy array, get started data exploration.\n\"Python Fundamenals\" written Dat Tran. last built 2023-01-13.book built bookdown R package.","code":""},{"path":"introduction-to-python.html","id":"numpy-1","chapter":"Introduction to Python","heading":"Numpy","text":"","code":""},{"path":"introduction-to-python.html","id":"your-first-numpy-array","chapter":"Introduction to Python","heading":"Your First NumPy Array","text":"\nchapter, ’re going dive world baseball. Along way, ’ll get comfortable basics numpy, powerful package data science.\n\nlist baseball already defined Python script, representing height baseball players centimeters. Can add code create numpy array ?\n\nImport numpy package np, can refer numpy np.\n\nUse np.array() create numpy array baseball. Name array np_baseball.\n\nPrint type np_baseball check got right.\n\nGreat job!\n","code":"# Import the numpy package as np\nimport numpy as np\n\n# Create list baseball\nbaseball = [180, 215, 210, 210, 188, 176, 209, 200]\n\n# Create a Numpy array from baseball: np_baseball\nnp_baseball = np.array(baseball)\n\n# Print out type of np_baseball\nprint(type(np_baseball))## <class 'numpy.ndarray'>"},{"path":"introduction-to-python.html","id":"baseball-players-height","chapter":"Introduction to Python","heading":"Baseball players’ height","text":"\nhuge baseball fan. decide call MLB (Major League Baseball) ask around statistics height main players. pass along data thousand players, stored regular Python list: height_in. height expressed inches. Can make numpy array convert units meters?\n\nheight_in already available numpy package loaded, can start straight away (Source: stat.ucla.edu).\n\nCreate numpy array height_in. Name new array np_height_in.\n\nPrint np_height_in.\n\nMultiply np_height_in 0.0254 convert height measurements inches meters. Store new values new array, np_height_m.\n\nPrint np_height_m check output makes sense.\n\nNice! blink eye, numpy performs multiplications 1000 height measurements.\n","code":"# edited/added\nimport pandas as pd\nmlb = pd.read_csv(\"datasets/Introduction-to-Python/baseball.csv\")\n\n# height_in is available as a regular list\nheight_in = mlb['Height'].tolist()\n\n# Import numpy\nimport numpy as np\n\n# Create a numpy array from height_in: np_height_in\nnp_height_in = np.array(height_in)\n\n# Print out np_height_in\nprint(np_height_in)## [74 74 72 ... 75 75 73]# Convert np_height_in to m: np_height_m\nnp_height_m = np_height_in * 0.0254\n\n# Print np_height_m\nprint(np_height_m)## [1.8796 1.8796 1.8288 ... 1.905  1.905  1.8542]"},{"path":"introduction-to-python.html","id":"baseball-players-bmi","chapter":"Introduction to Python","heading":"Baseball player’s BMI","text":"\nMLB also offers let analyze weight data. , available regular Python lists: height_in weight_lb. height_in inches weight_lb pounds.\n\n’s now possible calculate BMI baseball player. Python code convert height_in numpy array correct units already available workspace. Follow instructions step step finish game!\n\nCreate numpy array weight_lb list correct units. Multiply 0.453592 go pounds kilograms. Store resulting numpy array np_weight_kg.\n\nUse np_height_m np_weight_kg calculate BMI player. Use following equation: \\[ \\mathrm{BMI} = \\frac{\\mathrm{weight (kg)}}{\\mathrm{height (m)}^2}\\] Save resulting numpy array bmi.\n\nPrint bmi.\n\nCool! Time step game!\n","code":"# height_in and weight_lb are available as regular lists\nweight_lb = mlb['Weight'].tolist()\n\n# Import numpy\nimport numpy as np\n\n# Create array from height_in with metric units: np_height_m\nnp_height_m = np.array(height_in) * 0.0254\n\n# Create array from weight_lb with metric units: np_weight_kg\nnp_weight_kg = np.array(weight_lb) * 0.453592\n\n# Calculate the BMI: bmi\nbmi = np_weight_kg / np_height_m ** 2\n\n# Print out bmi\nprint(bmi)## [23.11037639 27.60406069 28.48080465 ... 25.62295933 23.74810865\n##  25.72686361]"},{"path":"introduction-to-python.html","id":"lightweight-baseball-players","chapter":"Introduction to Python","heading":"Lightweight baseball players","text":"\nsubset regular Python lists numpy arrays, can use square brackets:\n\nnumpy specifically, can also use boolean numpy arrays:\n\ncode calculates BMI baseball players already included. Follow instructions reveal interesting things data!\n\nCreate boolean numpy array: element array True corresponding baseball player’s BMI 21. can use < operator . Name array light.\n\nPrint array light.\n\nPrint numpy array BMIs baseball players whose BMI 21. Use light inside square brackets selection bmi array.\n\nWow! appears 11 1000 baseball players BMI 21!\n","code":"x = [4 , 9 , 6, 3, 1]\nx[1]\nimport numpy as np\ny = np.array(x)\ny[1]\nhigh = y > 5\ny[high]\n# height_in and weight_lb are available as a regular lists\n\n# Import numpy\nimport numpy as np\n\n# Calculate the BMI: bmi\nnp_height_m = np.array(height_in) * 0.0254\nnp_weight_kg = np.array(weight_lb) * 0.453592\nbmi = np_weight_kg / np_height_m ** 2\n\n# Create the light array\nlight = bmi < 21\n\n# Print out light\nprint(light)## [False False False ... False False False]# Print out BMIs of all baseball players whose BMI is below 21\nprint(bmi[light])## [20.54255679 20.54255679 20.69282047 20.69282047 20.34343189 20.34343189\n##  20.69282047 20.15883472 19.4984471  20.69282047 20.9205219 ]"},{"path":"introduction-to-python.html","id":"numpy-side-effects","chapter":"Introduction to Python","heading":"NumPy Side Effects","text":"\nHugo explained , numpy great vector arithmetic. compare functionality regular Python lists, however, things changed.\n\nFirst , numpy arrays contain elements different types. try build list, elements’ types changed end homogeneous list. known type coercion.\n\nSecond, typical arithmetic operators, +, -, * / different meaning regular Python lists numpy arrays.\n\nlook line code:\n\nCan tell code chunk builds exact Python object? numpy package already imported np, can start experimenting IPython Shell straight away!\nnp.array([True, 1, 2, 3, 4, False])np.array([4, 3, 0]) + np.array([0, 2, 2])np.array([1, 1, 2]) + np.array([3, 4, -1])np.array([0, 1, 2, 3, 4, 5])\nGreat job! True converted 1, False converted 0.\n","code":"np.array([True, 1, 2]) + np.array([3, 4, False])\n"},{"path":"introduction-to-python.html","id":"subsetting-numpy-arrays","chapter":"Introduction to Python","heading":"Subsetting NumPy Arrays","text":"\n’ve seen eyes: Python lists numpy arrays sometimes behave differently. Luckily, still certainties world. example, subsetting (using square bracket notation lists arrays) works exactly . see , try following lines code IPython Shell:\n\nscript editor already contains code imports numpy np, stores height weight MLB players numpy arrays.\n\nSubset np_weight_lb printing element index 50.\n\nPrint sub-array np_height_in contains elements index 100 including index 110.\n\nNice! Time learn something new: 2D Numpy arrays!\n","code":"x = [\"a\", \"b\", \"c\"]\nx[1]\n\nnp_x = np.array(x)\nnp_x[1]\n# height_in and weight_lb are available as a regular lists\n\n# Import numpy\nimport numpy as np\n\n# Store weight and height lists as numpy arrays\nnp_weight_lb = np.array(weight_lb)\nnp_height_in = np.array(height_in)\n\n# Print out the weight at index 50\nprint(np_weight_lb[50])## 200# Print out sub-array of np_height_in: index 100 up to and including index 110\nprint(np_height_in[100:111])## [73 74 72 73 69 72 73 75 75 73 72]"},{"path":"introduction-to-python.html","id":"d-numpy-arrays","chapter":"Introduction to Python","heading":"2D Numpy Arrays","text":"","code":""},{"path":"introduction-to-python.html","id":"your-first-2d-numpy-array","chapter":"Introduction to Python","heading":"Your First 2D NumPy Array","text":"\nworking actual MLB data, let’s try create 2D numpy array small list lists.\n\nexercise, baseball list lists. main list contains 4 elements. elements list containing height weight 4 baseball players, order. baseball already coded script.\n\nUse np.array() create 2D numpy array baseball. Name np_baseball.\n\nPrint type np_baseball.\n\nPrint shape attribute np_baseball. Use np_baseball.shape.\n\nGreat! ’re ready convert actual MLB data 2D numpy array now!\n","code":"# Create baseball, a list of lists\nbaseball = [[180, 78.4],\n            [215, 102.7],\n            [210, 98.5],\n            [188, 75.2]]\n\n# Import numpy\nimport numpy as np\n\n# Create a 2D numpy array from baseball: np_baseball\nnp_baseball = np.array(baseball)\n\n# Print out the type of np_baseball\nprint(type(np_baseball))## <class 'numpy.ndarray'># Print out the shape of np_baseball\nprint(np_baseball.shape)## (4, 2)"},{"path":"introduction-to-python.html","id":"baseball-data-in-2d-form","chapter":"Introduction to Python","heading":"Baseball data in 2D form","text":"\nanother look MLB data realize makes sense restructure information 2D numpy array. array 1015 rows, corresponding 1015 baseball players information , 2 columns (height weight).\n\nMLB , , helpful passed data different structure, Python list lists. list lists, sublist represents height weight single baseball player. name embedded list baseball.\n\nCan store data 2D array unlock numpy’s extra functionality?\n\nUse np.array() create 2D numpy array baseball. Name np_baseball.\n\nPrint shape attribute np_baseball.\n\nSlick! Time show killer features multi-dimensional numpy arrays!\n","code":"# baseball is available as a regular list of lists\n\n# Import numpy package\nimport numpy as np\n\n# Create a 2D numpy array from baseball: np_baseball\nnp_baseball = np.array(baseball)\n\n# Print out the shape of np_baseball\nprint(np_baseball.shape)## (4, 2)"},{"path":"introduction-to-python.html","id":"subsetting-2d-numpy-arrays","chapter":"Introduction to Python","heading":"Subsetting 2D NumPy Arrays","text":"\n2D numpy array regular structure, .e. row column fixed number values, complicated ways subsetting become easy. look code elements “” “c” extracted list lists.\n\nregular Python lists, real pain. 2D numpy arrays, however, ’s pretty intuitive! indexes comma refer rows, comma refer columns. : slicing; example, tells Python include rows.\n\ncode converts pre-loaded baseball list 2D numpy array already script. first column contains players’ height inches second column holds player weight, pounds. Add lines make correct selections. Remember Python, first element index 0!\n\nPrint 50th row np_baseball.\n\nMake new variable, np_weight_lb, containing entire second column np_baseball.\n\nSelect height (first column) 124th baseball player np_baseball print .\n\ngoing well!\n","code":"# regular list of lists\nx = [[\"a\", \"b\"], [\"c\", \"d\"]]\n[x[0][0], x[1][0]]\n\n# numpy\nimport numpy as np\nnp_x = np.array(x)\nnp_x[:,0]\n# edited/added\nbaseball = pd.read_csv(\"datasets/Introduction-to-Python/baseball.csv\")[['Height', 'Weight']]\n\n# baseball is available as a regular list of lists\n\n# Import numpy package\nimport numpy as np\n\n# Create np_baseball (2 cols)\nnp_baseball = np.array(baseball)\n\n# Print out the 50th row of np_baseball\nprint(np_baseball[49,:])## [ 70 195]# Select the entire second column of np_baseball: np_weight_lb\nnp_weight_lb = np_baseball[:,1]\n\n# Print out height of 124th player\nprint(np_baseball[123, 0])## 75"},{"path":"introduction-to-python.html","id":"d-arithmetic","chapter":"Introduction to Python","heading":"2D Arithmetic","text":"\nRemember calculated Body Mass Index baseball players? numpy able perform calculations element-wise (.e. element element). 2D numpy arrays isn’t different! can combine matrices single numbers, vectors, matrices.\n\nExecute code IPython shell see understand:\n\nnp_baseball coded ; ’s 2D numpy array 3 columns representing height (inches), weight (pounds) age (years).\n\nmanaged get hold changes height, weight age baseball players. available 2D numpy array, updated. Add np_baseball updated print result.\n\nwant convert units height weight metric (meters kilograms respectively). first step, create numpy array three values: 0.0254, 0.453592 1. Name array conversion.\n\nMultiply np_baseball conversion print result.\n\nGreat job! Notice little code, can change values numpy data structure specific way. useful future data scientist!\n\nnow know use numpy functions get better feeling data. basically comes importing numpy calling several simple functions numpy arrays:\n\nbaseball data available 2D numpy array 3 columns (height, weight, age) 1015 rows. name numpy array np_baseball. restructuring data, however, notice height values abnormally high. Follow instructions discover summary statistic best suited ’re dealing -called outliers.\n\nCreate numpy array np_height_in equal first column np_baseball.\n\nPrint mean np_height_in.\n\nPrint median np_height_in.\n\naverage height 1586 inches, doesn’t sound right, ? However, median seem affected outliers: 74 inches makes perfect sense. ’s always good idea check median mean, get idea overall distribution entire dataset.\n","code":"import numpy as np\nnp_mat = np.array([[1, 2],\n                   [3, 4],\n                   [5, 6]])\nnp_mat * 2\nnp_mat + np.array([10, 10])\nnp_mat + np_mat\n# edited/added\nbaseball = pd.read_csv(\"datasets/Introduction-to-Python/baseball.csv\")[['Height', 'Weight', 'Age']]\nn = len(baseball)\nupdated = np.array(pd.read_csv(\"datasets/Introduction-to-Python/update.csv\", header = None))\n\n# baseball is available as a regular list of lists\n# updated is available as 2D numpy array\n\n# Import numpy package\nimport numpy as np\n\n# Create np_baseball (3 cols)\nnp_baseball = np.array(baseball)\n\n# Print out addition of np_baseball and updated\nprint(np_baseball + updated)## [[ 75.2303559  168.83775102  23.99      ]\n##  [ 75.02614252 231.09732309  35.69      ]\n##  [ 73.1544228  215.08167641  31.78      ]\n##  ...\n##  [ 76.09349925 209.23890778  26.19      ]\n##  [ 75.82285669 172.21799965  32.01      ]\n##  [ 73.99484223 203.14402711  28.92      ]]# Create numpy array: conversion\nconversion = np.array([0.0254, 0.453592, 1])\n\n# Print out product of np_baseball and conversion\nprint(np_baseball * conversion)## [[ 1.8796  81.64656 22.99   ]\n##  [ 1.8796  97.52228 34.69   ]\n##  [ 1.8288  95.25432 30.78   ]\n##  ...\n##  [ 1.905   92.98636 25.19   ]\n##  [ 1.905   86.18248 31.01   ]\n##  [ 1.8542  88.45044 27.92   ]]import numpy as np\nx = [1, 4, 8, 10, 12]\nnp.mean(x)\nnp.median(x)\n# np_baseball is available\n\n# Import numpy\nimport numpy as np\n\n# Create np_height_in from np_baseball\nnp_height_in = np_baseball[:,0]\n\n# Print out the mean of np_height_in\nprint(np.mean(np_height_in))## 73.6896551724138# Print out the median of np_height_in\nprint(np.median(np_height_in))## 74.0"},{"path":"introduction-to-python.html","id":"numpy-basic-statistics","chapter":"Introduction to Python","heading":"Numpy: Basic Statistics","text":"","code":""},{"path":"introduction-to-python.html","id":"average-versus-median","chapter":"Introduction to Python","heading":"Average versus median","text":"\nnow know use numpy functions get better feeling data. basically comes importing numpy calling several simple functions numpy arrays:\n\nbaseball data available 2D numpy array 3 columns (height, weight, age) 1015 rows. name numpy array np_baseball. restructuring data, however, notice height values abnormally high. Follow instructions discover summary statistic best suited ’re dealing -called outliers.\n\nCreate numpy array np_height_in equal first column np_baseball.\n\nPrint mean np_height_in.\n\nPrint median np_height_in.\n","code":"import numpy as np\nx = [1, 4, 8, 10, 12]\nnp.mean(x)\nnp.median(x)\n# np_baseball is available\n\n# Import numpy\nimport numpy as np\n\n# Create np_height_in from np_baseball\nnp_height_in = np_baseball[:,0]\n\n# Print out the mean of np_height_in\nprint(np.mean(np_height_in))## 73.6896551724138"},{"path":"introduction-to-python.html","id":"explore-the-baseball-data","chapter":"Introduction to Python","heading":"Explore the baseball data","text":"\nmean median far apart, decide complain MLB. find error send corrected data . ’s available 2D Numpy array np_baseball, three columns.\n\nPython script editor already includes code print informative messages different summary statistics. Can finish job?\n\ncode print mean height already included. Complete code median height. Replace None correct code.\n\nUse np.std() first column np_baseball calculate stddev. Replace None correct code.\n\nbig players tend heavier? Use np.corrcoef() store correlation first second column np_baseball corr. Replace None correct code.\n\nGreat! Time use new data science skills last exercise!\n","code":"# np_baseball is available\n\n# Import numpy\nimport numpy as np\n\n# Print mean height (first column)\navg = np.mean(np_baseball[:,0])\nprint(\"Average: \" + str(avg))## Average: 73.6896551724138# Print median height. Replace 'None'\nmed = np.median(np_baseball[:,0])\nprint(\"Median: \" + str(med))## Median: 74.0# Print out the standard deviation on height. Replace 'None'\nstddev = np.std(np_baseball[:,0])\nprint(\"Standard Deviation: \" + str(stddev))## Standard Deviation: 2.312791881046546# Print out correlation between first and second column. Replace 'None'\ncorr = np.corrcoef(np_baseball[:,0], np_baseball[:,1])\nprint(\"Correlation: \" + str(corr))## Correlation: [[1.         0.53153932]\n##  [0.53153932 1.        ]]"},{"path":"introduction-to-python.html","id":"blend-it-all-together","chapter":"Introduction to Python","heading":"Blend it all together","text":"\nlast exercises ’ve learned everything know heights weights baseball players. Now ’s time dive another sport: soccer.\n\n’ve contacted FIFA data handed two lists. lists following:\n\nelement lists corresponds player. first list, positions, contains strings representing player’s position. possible positions : ‘GK’ (goalkeeper), ‘M’ (midfield), ‘’ (attack) ‘D’ (defense). second list, heights, contains integers representing height player cm. first player lists goalkeeper pretty tall (191 cm).\n\n’re fairly confident median height goalkeepers higher players soccer field. friends don’t believe , determined show using data received FIFA newly acquired Python skills.\n\nConvert heights positions, regular lists, numpy arrays. Call np_heights np_positions.\n\nExtract heights goalkeepers. can use little trick : use np_positions == ‘GK’ index np_heights. Assign result gk_heights.\n\nExtract heights players. time use np_positions != ‘GK’ index np_heights. Assign result other_heights.\n\nPrint median height goalkeepers using np.median(). Replace None correct code.\n\nplayers. Print median height. Replace None correct code.\n\nWonderful! right disbelievers wrong! exercise marks end Intro Python Data Science course. See another course!\n","code":"positions = ['GK', 'M', 'A', 'D', ...]\nheights = [191, 184, 185, 180, ...]\n# edited/added\nfifa =  pd.read_csv(\"datasets/Introduction-to-Python/fifa.csv\", skipinitialspace=True, usecols=['position', 'height'])\npositions = list(fifa.position)\nheights = list(fifa.height)\n\n# heights and positions are available as lists\n\n# Import numpy\nimport numpy as np\n\n# Convert positions and heights to numpy arrays: np_positions, np_heights\nnp_positions = np.array(positions)\nnp_heights = np.array(heights)\n\n# Heights of the goalkeepers: gk_heights\ngk_heights = np_heights[np_positions == 'GK']\n\n# Heights of the other players: other_heights\nother_heights = np_heights[np_positions != 'GK']\n\n# Print out the median height of goalkeepers. Replace 'None'\nprint(\"Median height of goalkeepers: \" + str(np.median(gk_heights)))## Median height of goalkeepers: 188.0# Print out the median height of other players. Replace 'None'\nprint(\"Median height of other players: \" + str(np.median(other_heights)))## Median height of other players: 181.0"},{"path":"intermediate-python.html","id":"intermediate-python","chapter":"Intermediate Python","heading":"Intermediate Python","text":"Hugo Bowne-Anderson\nHugo data scientist, educator, writer podcaster formerly DataCamp. main interests promoting data & AI literacy, helping spread data skills organizations society amateur stand comedy NYC. want know likes talk , definitely check DataFramed, DataCamp podcast, hosted produced.\nCourse Description\nLearning Python crucial aspiring data science practitioner. Learn visualize real data Matplotlib’s functions get acquainted data structures dictionary pandas DataFrame. four-hour intermediate course help build existing Python skills explore new Python applications functions expand repertoire help work efficiently.\n\n’ll discover dictionaries offer alternative Python lists, pandas dataframe popular way working tabular data. second chapter course, ’ll find can create manipulate datasets, access using structures. Hands-practice throughout course build confidence area.\n\nprogress, ’ll look logic, control flow, filtering loops. functions work control decision-making Python programs help perform operations data, including repeated statements. ’ll finish course applying new skills using hacker statistics calculate chances winning bet.\n\n’ve completed chapters, ’ll ready apply new skills job, new career, personal project, prepared move onto advanced Python learning.\n","code":""},{"path":"intermediate-python.html","id":"matplotlib","chapter":"Intermediate Python","heading":"Matplotlib","text":"\nData visualization key skill aspiring data scientists. Matplotlib makes easy create meaningful insightful plots. chapter, ’ll learn build various types plots, customize visually appealing interpretable.\n","code":""},{"path":"intermediate-python.html","id":"basic-plots-with-matplotlib","chapter":"Intermediate Python","heading":"Basic plots with Matplotlib","text":"","code":""},{"path":"intermediate-python.html","id":"line-plot-1","chapter":"Intermediate Python","heading":"Line plot (1)","text":"\nmatplotlib, can create bunch different plots Python. basic plot line plot. general recipe given .\n\nvideo, already saw much world population grown past years. continue ? world bank estimates world population years 1950 2100. years loaded workspace list called year, corresponding populations list called pop.\n\ncourse touches lot concepts may forgotten, ever need quick refresher, download Python data science Cheat Sheet keep handy!\n\nprint() last item year pop list see predicted population year 2100 . Use two print() functions.\n\ncan start, import matplotlib.pyplot plt. pyplot sub-package matplotlib, hence dot.\n\nUse plt.plot() build line plot. year mapped horizontal axis, pop vertical axis. Don’t forget finish plt.show() function actually display plot.\n\nGreat! Let’s interpret plot just created.\n","code":"import matplotlib.pyplot as plt\nplt.plot(x,y)\nplt.show()\n# edited/added\nimport numpy as np\nyear=list(range(1950,2100+1))\npop=list(np.loadtxt('datasets/Intermediate-Python/pop1.txt', dtype=float))\n\n# Print the last item from years and populations\nprint(year[-1])## 2100print(pop[-1])## 10.85# Import matplotlib.pyplot as plt\nimport matplotlib.pyplot as plt\n\n# Make a line plot: year on the x-axis, pop on the y-axis\nplt.plot(year,pop) \n# Display the plot with plt.show()\nplt.show()"},{"path":"intermediate-python.html","id":"line-plot-2-interpretation","chapter":"Intermediate Python","heading":"Line Plot (2): Interpretation","text":"\nanother look plot created previous exercise; ’s shown right. Based plot, approximately year ten billion human beings planet?\n2040206020852095\nCorrect! Time take data visualization skills next level!\n","code":""},{"path":"intermediate-python.html","id":"line-plot-3","chapter":"Intermediate Python","heading":"Line plot (3)","text":"\nNow ’ve built first line plot, let’s start working data professor Hans Rosling used build beautiful bubble chart. collected 2007. Two lists available :\n\nlife_exp contains life expectancy country \n\ngdp_cap, contains GDP per capita (.e. per person) country expressed US Dollars.\n\nGDP stands Gross Domestic Product. basically represents size economy country. Divide population get GDP per capita.\n\nmatplotlib.pyplot already imported plt, can get started straight away.\n\nPrint last item list gdp_cap, list life_exp; information Zimbabwe.\n\nBuild line chart, gdp_cap x-axis, life_exp y-axis. make sense plot data line plot?\n\nWell done, doesn’t look right. Let’s build plot makes sense.\n","code":"# edited/added\ngdp_cap=list(np.loadtxt('datasets/Intermediate-Python/gdp_cap.txt', dtype=float))\nlife_exp=list(np.loadtxt('datasets/Intermediate-Python/life_exp.txt', dtype=float))\n\n# Print the last item of gdp_cap and life_exp\nprint(gdp_cap[-1])## 469.709298print(life_exp[-1])## 43.487# Make a line plot, gdp_cap on the x-axis, life_exp on the y-axis\nplt.plot(gdp_cap, life_exp)\nplt.show()"},{"path":"intermediate-python.html","id":"scatter-plot-1","chapter":"Intermediate Python","heading":"Scatter Plot (1)","text":"\ntime scale along horizontal axis, line plot friend. many cases, ’re trying assess ’s correlation two variables, example, scatter plot better choice. example build scatter plot.\n\nLet’s continue gdp_cap versus life_exp plot, GDP life expectancy data different countries 2007. Maybe scatter plot better alternative?\n\n, matplotlib.pyplot package available plt.\n\nChange line plot ’s coded script scatter plot.\n\ncorrelation become clear display GDP per capita logarithmic scale. Add line plt.xscale(‘log’).\n\nFinish script plt.show() display plot.\n\nGreat! looks much better!\n","code":"import matplotlib.pyplot as plt\nplt.scatter(x,y)\nplt.show()\n# Change the line plot below to a scatter plot\nplt.scatter(gdp_cap, life_exp)\n\n# Put the x-axis on a logarithmic scale\nplt.xscale('log')\n\n# Show plot\nplt.show()"},{"path":"intermediate-python.html","id":"scatter-plot-2","chapter":"Intermediate Python","heading":"Scatter plot (2)","text":"\nprevious exercise, saw higher GDP usually corresponds higher life expectancy. words, positive correlation.\n\nthink ’s relationship population life expectancy country? list life_exp previous exercise already available. addition, now also pop available, listing corresponding populations countries 2007. populations millions people.\n\nStart scratch: import matplotlib.pyplot plt.\n\nBuild scatter plot, pop mapped horizontal axis, life_exp mapped vertical axis.\n\nFinish script plt.show() actually display plot. see correlation?\n\nNice! ’s clear relationship population life expectancy, makes perfect sense.\n","code":"# edited/added\npop=list(np.loadtxt('datasets/Intermediate-Python/pop2.txt', dtype=float))\n\n# Import package\nimport matplotlib.pyplot as plt\n\n# Build Scatter plot\nplt.scatter(pop, life_exp)\n# Show plot\nplt.show()"},{"path":"intermediate-python.html","id":"histogram","chapter":"Intermediate Python","heading":"Histogram","text":"","code":""},{"path":"intermediate-python.html","id":"build-a-histogram-1","chapter":"Intermediate Python","heading":"Build a histogram (1)","text":"\nlife_exp, list containing data life expectancy different countries 2007, available Python shell.\n\nsee life expectancy different countries distributed, let’s create histogram life_exp.\n\nmatplotlib.pyplot already available plt.\n\nUse plt.hist() create histogram values life_exp. specify number bins; Python set number bins 10 default .\n\nAdd plt.show() actually display histogram. Can tell bin contains observations?\n\nGreat job!\n","code":"# Create histogram of life_exp data\nplt.hist(life_exp)## (array([ 8.,  7., 10., 10., 10.,  8.,  5., 33., 23., 28.]), array([39.613, 43.912, 48.211, 52.51 , 56.809, 61.108, 65.407, 69.706,\n##        74.005, 78.304, 82.603]), <BarContainer object of 10 artists>)# Display histogram\nplt.show()"},{"path":"intermediate-python.html","id":"build-a-histogram-2-bins","chapter":"Intermediate Python","heading":"Build a histogram (2): bins","text":"\nprevious exercise, didn’t specify number bins. default, Python sets number bins 10 case. number bins pretty important. bins oversimplify reality won’t show details. many bins overcomplicate reality won’t show bigger picture.\n\ncontrol number bins divide data , can set bins argument.\n\n’s exactly ’ll exercise. ’ll making two plots . code script already includes plt.show() plt.clf() calls; plt.show() displays plot; plt.clf() cleans can start afresh.\n\n, life_exp available matplotlib.pyplot imported plt.\n\nBuild histogram life_exp, 5 bins. Can tell bin contains observations?\n\nBuild another histogram life_exp, time 20 bins. better?\n\nNice! can use buttons browse different plots ’ve created.\n","code":"# Build histogram with 5 bins\nplt.hist(life_exp, bins = 5)## (array([15., 20., 18., 38., 51.]), array([39.613, 48.211, 56.809, 65.407, 74.005, 82.603]), <BarContainer object of 5 artists>)# Show and clear plot\nplt.show()plt.clf()# Build histogram with 20 bins\nplt.hist(life_exp, bins = 20)## (array([ 1.,  7.,  2.,  5.,  4.,  6.,  5.,  5.,  4.,  6.,  3.,  5.,  5.,\n##         0., 12., 21., 13., 10., 17., 11.]), array([39.613 , 41.7625, 43.912 , 46.0615, 48.211 , 50.3605, 52.51  ,\n##        54.6595, 56.809 , 58.9585, 61.108 , 63.2575, 65.407 , 67.5565,\n##        69.706 , 71.8555, 74.005 , 76.1545, 78.304 , 80.4535, 82.603 ]), <BarContainer object of 20 artists>)# Show and clear plot again\nplt.show()plt.clf()"},{"path":"intermediate-python.html","id":"build-a-histogram-3-compare","chapter":"Intermediate Python","heading":"Build a histogram (3): compare","text":"\nvideo, saw population pyramids present day future. using histogram, easy make comparison.\n\nLet’s similar comparison. life_exp contains life expectancy data different countries 2007. also access second list now, life_exp1950, containing similar data 1950. Can make histogram datasets?\n\n’ll making two plots. plt.show() plt.clf() commands render everything nicely already included. Also matplotlib.pyplot imported , plt.\n\nBuild histogram life_exp 15 bins.\n\nBuild histogram life_exp1950, also 15 bins. big difference histogram 2007 data?\n\nGreat! Toggle created plots - notice anything interesting?\n","code":"# edited/added\nlife_exp1950=list(np.loadtxt('datasets/Intermediate-Python/life_exp1950.txt', dtype=float))\n\n# Histogram of life_exp, 15 bins\nplt.hist(life_exp, bins = 15)## (array([ 3.,  6.,  6.,  7.,  6.,  7.,  7.,  4.,  7.,  5.,  6., 27., 18.,\n##        17., 16.]), array([39.613, 42.479, 45.345, 48.211, 51.077, 53.943, 56.809, 59.675,\n##        62.541, 65.407, 68.273, 71.139, 74.005, 76.871, 79.737, 82.603]), <BarContainer object of 15 artists>)# Show and clear plot\nplt.show()plt.clf()# Histogram of life_exp1950, 15 bins\nplt.hist(life_exp1950, bins = 15)## (array([ 5.,  8., 14., 17., 20., 11.,  7.,  7.,  4.,  7.,  9.,  6., 11.,\n##        11.,  5.]), array([28.8       , 31.72466667, 34.64933333, 37.574     , 40.49866667,\n##        43.42333333, 46.348     , 49.27266667, 52.19733333, 55.122     ,\n##        58.04666667, 60.97133333, 63.896     , 66.82066667, 69.74533333,\n##        72.67      ]), <BarContainer object of 15 artists>)# Show and clear plot again\nplt.show()plt.clf()"},{"path":"intermediate-python.html","id":"choose-the-right-plot-1","chapter":"Intermediate Python","heading":"Choose the right plot (1)","text":"\n’re professor teaching Data Science Python, want visually assess grades exam follow particular distribution. plot use?\nLine plotScatter plotHistogram\nExcellent choice!\n","code":""},{"path":"intermediate-python.html","id":"choose-the-right-plot-2","chapter":"Intermediate Python","heading":"Choose the right plot (2)","text":"\n’re professor Data Analytics Python, want visually assess longer answers exam questions lead higher grades. plot use?\nLine plotScatter plotHistogram\nExcellent choice!\n","code":""},{"path":"intermediate-python.html","id":"customization","chapter":"Intermediate Python","heading":"Customization","text":"","code":""},{"path":"intermediate-python.html","id":"labels","chapter":"Intermediate Python","heading":"Labels","text":"\n’s time customize plot. fun part, see plot come life!\n\n’re going work scatter plot world development data: GDP per capita x-axis (logarithmic scale), life expectancy y-axis. code plot available script.\n\nfirst step, let’s add axis labels title plot. can xlabel(), ylabel() title() functions, available matplotlib.pyplot. sub-package already imported plt.\n\nstrings xlab ylab already set . Use variables set label x- y-axis.\n\nstring title also coded . Use add title plot.\n\ncustomizations, finish script plt.show() actually display plot.\n\nlooks much better already!\n","code":"# Basic scatter plot, log scale\nplt.scatter(gdp_cap, life_exp)\nplt.xscale('log') \n\n# Strings\nxlab = 'GDP per Capita [in USD]'\nylab = 'Life Expectancy [in years]'\ntitle = 'World Development in 2007'\n\n# Add axis labels\nplt.xlabel(xlab)\nplt.ylabel(ylab)\n\n# Add title\nplt.title(title)\n# After customizing, display the plot\nplt.show()"},{"path":"intermediate-python.html","id":"ticks","chapter":"Intermediate Python","heading":"Ticks","text":"\ncustomizations ’ve coded now available script, concise form.\n\nvideo, Hugo demonstrated control y-ticks specifying two arguments:\n\nexample, ticks corresponding numbers 0, 1 2 replaced one, two three, respectively.\n\nLet’s similar thing x-axis world development chart, xticks() function. tick values 1000, 10000 100000 replaced 1k, 10k 100k. end, two lists already created : tick_val tick_lab.\n\nUse tick_val tick_lab inputs xticks() function make plot readable.\n\nusual, display plot plt.show() ’ve added customizations.\n\nGreat! plot shaping nicely!\n","code":"plt.yticks([0,1,2], [\"one\",\"two\",\"three\"])\n# Scatter plot\nplt.scatter(gdp_cap, life_exp)\n\n# Previous customizations\nplt.xscale('log') \nplt.xlabel('GDP per Capita [in USD]')\nplt.ylabel('Life Expectancy [in years]')\nplt.title('World Development in 2007')\n\n# Definition of tick_val and tick_lab\ntick_val = [1000, 10000, 100000]\ntick_lab = ['1k', '10k', '100k']\n\n# Adapt the ticks on the x-axis\nplt.xticks(tick_val, tick_lab)## ([<matplotlib.axis.XTick object at 0x7faf80bebdf0>, <matplotlib.axis.XTick object at 0x7faf80bebcd0>, <matplotlib.axis.XTick object at 0x7faf80be2730>], [Text(1000, 0, '1k'), Text(10000, 0, '10k'), Text(100000, 0, '100k')])# After customizing, display the plot\nplt.show()"},{"path":"intermediate-python.html","id":"sizes","chapter":"Intermediate Python","heading":"Sizes","text":"\nRight now, scatter plot just cloud blue dots, indistinguishable . Let’s change . Wouldn’t nice size dots corresponds population?\n\naccomplish , list pop loaded workspace. contains population numbers country expressed millions. can see list added scatter method, argument s, size.\n\nRun script see plot changes.\n\nLooks good, increasing size bubbles make things stand .\n\nImport numpy package np.\n\nUse np.array() create numpy array list pop. Call NumPy array np_pop.\n\nDouble values np_pop setting value np_pop equal np_pop * 2. np_pop NumPy array, array element doubled.\n\nChange s argument inside plt.scatter() np_pop instead pop.\n\nBellissimo! Can already tell bubbles correspond countries?\n","code":"# Import numpy as np\n\n\n# Store pop as a numpy array: np_pop\n\n\n# Double np_pop\n\n\n# Update: set s argument to np_pop\nplt.scatter(gdp_cap, life_exp, s = pop)\n\n# Previous customizations\nplt.xscale('log') \nplt.xlabel('GDP per Capita [in USD]')\nplt.ylabel('Life Expectancy [in years]')\nplt.title('World Development in 2007')\nplt.xticks([1000, 10000, 100000],['1k', '10k', '100k'])## ([<matplotlib.axis.XTick object at 0x7faf809fffa0>, <matplotlib.axis.XTick object at 0x7faf809ff580>, <matplotlib.axis.XTick object at 0x7faf80af6f10>], [Text(1000, 0, '1k'), Text(10000, 0, '10k'), Text(100000, 0, '100k')])# Display the plot\nplt.show()# Import numpy as np\nimport numpy as np\n\n# Store pop as a numpy array: np_pop\nnp_pop = np.array(pop)\n\n# Double np_pop\nnp_pop = np_pop * 2\n\n# Update: set s argument to np_pop\nplt.scatter(gdp_cap, life_exp, s = np_pop)\n\n# Previous customizations\nplt.xscale('log') \nplt.xlabel('GDP per Capita [in USD]')\nplt.ylabel('Life Expectancy [in years]')\nplt.title('World Development in 2007')\nplt.xticks([1000, 10000, 100000],['1k', '10k', '100k'])## ([<matplotlib.axis.XTick object at 0x7faf7ec3a160>, <matplotlib.axis.XTick object at 0x7faf7ec3a340>, <matplotlib.axis.XTick object at 0x7faf7ec3ad30>], [Text(1000, 0, '1k'), Text(10000, 0, '10k'), Text(100000, 0, '100k')])# Display the plot\nplt.show()"},{"path":"intermediate-python.html","id":"colors","chapter":"Intermediate Python","heading":"Colors","text":"\ncode ’ve written now available script.\n\nnext step making plot colorful! , list col created . ’s list color corresponding country, depending continent country part .\n\nmake list col ask? Gapminder data contains list continent continent country belongs . dictionary constructed maps continents onto colors:\n\nNothing worry now; learn dictionaries next chapter.\n\nAdd c = col arguments plt.scatter() function.\n\nChange opacity bubbles setting alpha argument 0.8 inside plt.scatter(). Alpha can set zero one, zero totally transparent, one transparent.\n\nNice! looking like Hans Rosling’s plot!\n","code":"dict = {\n    'Asia':'red',\n    'Europe':'green',\n    'Africa':'blue',\n    'Americas':'yellow',\n    'Oceania':'black'\n}\n# edited/added\ncol=list(np.loadtxt('datasets/Intermediate-Python/col.txt', dtype=str))\n\n# Specify c and alpha inside plt.scatter()\nplt.scatter(x = gdp_cap, y = life_exp, s = np.array(pop) * 2, c = col, alpha = 0.8)\n\n# Previous customizations\nplt.xscale('log') \nplt.xlabel('GDP per Capita [in USD]')\nplt.ylabel('Life Expectancy [in years]')\nplt.title('World Development in 2007')\nplt.xticks([1000,10000,100000], ['1k','10k','100k'])## ([<matplotlib.axis.XTick object at 0x7faf7ec17520>, <matplotlib.axis.XTick object at 0x7faf7ec17970>, <matplotlib.axis.XTick object at 0x7faf7eb66d30>], [Text(1000, 0, '1k'), Text(10000, 0, '10k'), Text(100000, 0, '100k')])# Show the plot\nplt.show()"},{"path":"intermediate-python.html","id":"additional-customizations","chapter":"Intermediate Python","heading":"Additional Customizations","text":"\nanother look script, # Additional Customizations, ’ll see two plt.text() functions now. add words “India” “China” plot.\n\nAdd plt.grid(True) plt.text() calls gridlines drawn plot.\n\nBeautiful! visualization makes sense can interpret properly. Let’s next exercise.\n","code":"# Scatter plot\nplt.scatter(x = gdp_cap, y = life_exp, s = np.array(pop) * 2, c = col, alpha = 0.8)\n\n# Previous customizations\nplt.xscale('log') \nplt.xlabel('GDP per Capita [in USD]')\nplt.ylabel('Life Expectancy [in years]')\nplt.title('World Development in 2007')\nplt.xticks([1000,10000,100000], ['1k','10k','100k'])## ([<matplotlib.axis.XTick object at 0x7faf80bae8e0>, <matplotlib.axis.XTick object at 0x7faf80baea90>, <matplotlib.axis.XTick object at 0x7faf80baefd0>], [Text(1000, 0, '1k'), Text(10000, 0, '10k'), Text(100000, 0, '100k')])# Additional customizations\nplt.text(1550, 71, 'India')\nplt.text(5700, 80, 'China')\n\n# Add grid() call\nplt.grid(True)\n\n# Show the plot\nplt.show()"},{"path":"intermediate-python.html","id":"interpretation","chapter":"Intermediate Python","heading":"Interpretation","text":"\nlook colorful plot, ’s clear people live longer countries higher GDP per capita. high income countries really short life expectancy, low income countries long life expectancy. Still, huge difference life expectancy countries income level. people live middle income countries difference lifespan huge countries; depending income distributed used.\n\ncan say plot?\ncountries blue, corresponding Africa, low life expectancy low GDP per capita.negative correlation GDP per capita life expectancy.China lower GDP per capita lower life expectancy compared India.\nCorrect! next chapter, dictionaries!\n","code":""},{"path":"intermediate-python.html","id":"dictionaries-pandas","chapter":"Intermediate Python","heading":"Dictionaries & Pandas","text":"\nLearn dictionary, alternative Python list, pandas DataFrame, de facto standard work tabular data Python. get hands-practice creating manipulating datasets, ’ll learn access information need data structures.\n","code":""},{"path":"intermediate-python.html","id":"dictionaries-part-1","chapter":"Intermediate Python","heading":"Dictionaries, Part 1","text":"","code":""},{"path":"intermediate-python.html","id":"motivation-for-dictionaries","chapter":"Intermediate Python","heading":"Motivation for dictionaries","text":"\nsee dictionaries useful, look two lists defined script. countries contains names European countries. capitals lists corresponding names capital.\n\nUse index() method countries find index ‘germany’. Store index ind_ger.\n\nUse ind_ger access capital Germany capitals list. Print .\n\nHugo already told : works, ’s convenient. Head next exercise create dictionary data.\n","code":"# Definition of countries and capital\ncountries = ['spain', 'france', 'germany', 'norway']\ncapitals = ['madrid', 'paris', 'berlin', 'oslo']\n\n# Get index of 'germany': ind_ger\nind_ger = countries.index('germany')\n\n# Use ind_ger to print out capital of Germany\nprint(capitals[ind_ger])## berlin"},{"path":"intermediate-python.html","id":"create-dictionary","chapter":"Intermediate Python","heading":"Create dictionary","text":"\ncountries capitals lists available script. ’s job convert data dictionary country names keys capitals corresponding values. refresher, recipe creating dictionary:\n\nrecipe, keys values strings. also case exercise.\n\nstrings countries capitals, create dictionary called europe 4 key:value pairs. Beware capitalization! Make sure use lowercase characters everywhere.\n\nPrint europe see result expected.\n\nGreat! Now ’ve built first dictionaries, let’s get serious!\n","code":"my_dict = {\n   \"key1\":\"value1\",\n   \"key2\":\"value2\",\n}\n# Definition of countries and capital\ncountries = ['spain', 'france', 'germany', 'norway']\ncapitals = ['madrid', 'paris', 'berlin', 'oslo']\n\n# From string in countries and capitals, create dictionary europe\neurope = {'spain':'madrid', 'france':'paris', 'germany':'berlin', 'norway':'oslo'}\n\n# Print europe\nprint(europe)## {'spain': 'madrid', 'france': 'paris', 'germany': 'berlin', 'norway': 'oslo'}"},{"path":"intermediate-python.html","id":"access-dictionary","chapter":"Intermediate Python","heading":"Access dictionary","text":"\nkeys dictionary chosen wisely, accessing values dictionary easy intuitive. example, get capital France europe can use:\n\n, ‘france’ key ‘paris’ value returned.\n\nCheck keys europe calling keys() method europe. Print result.\n\nPrint value belongs key ‘norway’.\n\nGood job, now ’re warmed .\n","code":"europe['france']\n# Definition of dictionary\neurope = {'spain':'madrid', 'france':'paris', 'germany':'berlin', 'norway':'oslo' }\n\n# Print out the keys in europe\nprint(europe.keys())## dict_keys(['spain', 'france', 'germany', 'norway'])# Print out value that belongs to key 'norway'\nprint(europe['norway'])## oslo"},{"path":"intermediate-python.html","id":"dictionaries-part-2","chapter":"Intermediate Python","heading":"Dictionaries, Part 2","text":"","code":""},{"path":"intermediate-python.html","id":"dictionary-manipulation-1","chapter":"Intermediate Python","heading":"Dictionary Manipulation (1)","text":"\nknow access dictionary, can also assign new value . add new key-value pair europe can use something like :\n\nAdd key ‘italy’ value ‘rome’ europe.\n\nassert ‘italy’ now key europe, print ‘italy’ europe.\n\nAdd another key:value pair europe: ‘poland’ key, ‘warsaw’ corresponding value.\n\nPrint europe.\n\nWell done! Europe growing minute! notice order printout order dictionary’s definition? ’s dictionaries inherently unordered.\n","code":"europe['iceland'] = 'reykjavik'\n# Definition of dictionary\neurope = {'spain':'madrid', 'france':'paris', 'germany':'berlin', 'norway':'oslo' }\n\n# Add italy to europe\neurope['italy'] = 'rome'\n\n# Print out italy in europe\nprint('italy' in europe)## True# Add poland to europe\neurope['poland'] = 'warsaw'\n\n# Print europe\nprint(europe)## {'spain': 'madrid', 'france': 'paris', 'germany': 'berlin', 'norway': 'oslo', 'italy': 'rome', 'poland': 'warsaw'}"},{"path":"intermediate-python.html","id":"dictionary-manipulation-2","chapter":"Intermediate Python","heading":"Dictionary Manipulation (2)","text":"\nSomebody thought funny mess accurately generated dictionary. adapted version europe dictionary available script.\n\nCan clean ? adapting definition europe, adding Python commands script update remove key:value pairs.\n\ncapital Germany ‘bonn’; ’s ‘berlin’. Update value.\n\nAustralia Europe, Austria ! Remove key ‘australia’ europe.\n\nPrint europe see cleaning work paid .\n\nGreat job! ’s much better!\n","code":"# Definition of dictionary\neurope = {'spain':'madrid', 'france':'paris', 'germany':'bonn',\n          'norway':'oslo', 'italy':'rome', 'poland':'warsaw',\n          'australia':'vienna' }\n\n# Update capital of germany\neurope['germany'] = 'berlin'\n\n# Remove australia\ndel(europe['australia'])\n\n# Print europe\nprint(europe)## {'spain': 'madrid', 'france': 'paris', 'germany': 'berlin', 'norway': 'oslo', 'italy': 'rome', 'poland': 'warsaw'}"},{"path":"intermediate-python.html","id":"dictionariception","chapter":"Intermediate Python","heading":"Dictionariception","text":"\nRemember lists? contain anything, even lists. Well, dictionaries holds. Dictionaries can contain key:value pairs values dictionaries.\n\nexample, look script another version europe - dictionary ’ve working along - coded. keys still country names, values dictionaries contain information just capital.\n\n’s perfectly possible chain square brackets select elements. fetch population Spain europe, example, need:\n\nUse chained square brackets select print capital France.\n\nCreate dictionary, named data, keys ‘capital’ ‘population’. Set ‘rome’ 59.83, respectively.\n\nAdd new key-value pair europe; key ‘italy’ value data, dictionary just built.\n\nGreat! ’s time learn new data structure!\n","code":"europe['spain']['population']\n# Dictionary of dictionaries\neurope = { 'spain': { 'capital':'madrid', 'population':46.77 },\n           'france': { 'capital':'paris', 'population':66.03 },\n           'germany': { 'capital':'berlin', 'population':80.62 },\n           'norway': { 'capital':'oslo', 'population':5.084 } }\n\n\n# Print out the capital of France\nprint(europe['france']['capital'])## paris# Create sub-dictionary data\ndata = { 'capital':'rome', 'population':59.83 }\n\n# Add data to europe under key 'italy'\neurope['italy'] = data\n\n# Print europe\nprint(europe)## {'spain': {'capital': 'madrid', 'population': 46.77}, 'france': {'capital': 'paris', 'population': 66.03}, 'germany': {'capital': 'berlin', 'population': 80.62}, 'norway': {'capital': 'oslo', 'population': 5.084}, 'italy': {'capital': 'rome', 'population': 59.83}}"},{"path":"intermediate-python.html","id":"pandas-part-1","chapter":"Intermediate Python","heading":"Pandas, Part 1","text":"","code":""},{"path":"intermediate-python.html","id":"dictionary-to-dataframe-1","chapter":"Intermediate Python","heading":"Dictionary to DataFrame (1)","text":"\nPandas open source library, providing high-performance, easy--use data structures data analysis tools Python. Sounds promising!\n\nDataFrame one Pandas’ important data structures. ’s basically way store tabular data can label rows columns. One way build DataFrame dictionary.\n\nexercises follow working vehicle data different countries. observation corresponds country columns give information number vehicles per capita, whether people drive left right, .\n\nThree lists defined script:\n\nnames, containing country names data available.\n\ndr, list booleans tells whether people drive left right corresponding country.\n\ncpc, number motor vehicles per 1000 people corresponding country.\n\ndictionary key column label value list contains column elements.\n\nImport pandas pd.\n\nUse pre-defined lists create dictionary called my_dict. three key value pairs:\n\nkey ‘country’ value names.\n\n\nkey ‘drives_right’ value dr.\n\n\nkey ‘cars_per_cap’ value cpc.\n\n\nkey ‘country’ value names.\n\nkey ‘drives_right’ value dr.\n\nkey ‘cars_per_cap’ value cpc.\n\nUse pd.DataFrame() turn dict DataFrame called cars.\n\nPrint cars see beautiful .\n\nGood job! Notice columns cars can different types. possible 2D NumPy arrays!\n","code":"# Pre-defined lists\nnames = ['United States', 'Australia', 'Japan', 'India', 'Russia', 'Morocco', 'Egypt']\ndr =  [True, False, False, False, True, True, True]\ncpc = [809, 731, 588, 18, 200, 70, 45]\n\n# Import pandas as pd\nimport pandas as pd\n\n# Create dictionary my_dict with three key:value pairs: my_dict\nmy_dict = { 'country':names, 'drives_right':dr, 'cars_per_cap':cpc }\n\n# Build a DataFrame cars from my_dict: cars\ncars = pd.DataFrame(my_dict)\n\n# Print cars\nprint(cars)##          country  drives_right  cars_per_cap\n## 0  United States          True           809\n## 1      Australia         False           731\n## 2          Japan         False           588\n## 3          India         False            18\n## 4         Russia          True           200\n## 5        Morocco          True            70\n## 6          Egypt          True            45"},{"path":"intermediate-python.html","id":"dictionary-to-dataframe-2","chapter":"Intermediate Python","heading":"Dictionary to DataFrame (2)","text":"\nPython code solves previous exercise included script. noticed row labels (.e. labels different observations) automatically set integers 0 6?\n\nsolve list row_labels created. can use specify row labels cars DataFrame. setting index attribute cars, can access cars.index.\n\nHit Run Code see , indeed, row labels correctly set.\n\nSpecify row labels setting cars.index equal row_labels.\n\nPrint cars check row labels correct time.\n\nNice! looks much better already!\n","code":"import pandas as pd\n\n# Build cars DataFrame\nnames = ['United States', 'Australia', 'Japan', 'India', 'Russia', 'Morocco', 'Egypt']\ndr =  [True, False, False, False, True, True, True]\ncpc = [809, 731, 588, 18, 200, 70, 45]\ncars_dict = { 'country':names, 'drives_right':dr, 'cars_per_cap':cpc }\ncars = pd.DataFrame(cars_dict)\nprint(cars)##          country  drives_right  cars_per_cap\n## 0  United States          True           809\n## 1      Australia         False           731\n## 2          Japan         False           588\n## 3          India         False            18\n## 4         Russia          True           200\n## 5        Morocco          True            70\n## 6          Egypt          True            45# Definition of row_labels\nrow_labels = ['US', 'AUS', 'JPN', 'IN', 'RU', 'MOR', 'EG']\n\n# Specify row labels of cars\ncars.index = row_labels\n\n# Print cars again\nprint(cars)##            country  drives_right  cars_per_cap\n## US   United States          True           809\n## AUS      Australia         False           731\n## JPN          Japan         False           588\n## IN           India         False            18\n## RU          Russia          True           200\n## MOR        Morocco          True            70\n## EG           Egypt          True            45"},{"path":"intermediate-python.html","id":"csv-to-dataframe-1","chapter":"Intermediate Python","heading":"CSV to DataFrame (1)","text":"\nPutting data dictionary building DataFrame works, ’s efficient. ’re dealing millions observations? cases, data typically available files regular structure. One file types CSV file, short “comma-separated values”.\n\nimport CSV data Python Pandas DataFrame can use read_csv().\n\nLet’s explore function cars data previous exercises. time, however, data available CSV file, named cars.csv. available current working directory, path file simply ‘cars.csv’.\n\nimport CSV files still need pandas package: import pd.\n\nUse pd.read_csv() import cars.csv data DataFrame. Store DataFrame cars.\n\nPrint cars. everything look OK?\n\nNice job! Looks nice, exactly expected. Let’s fix next exercise.\n","code":"# Import pandas as pd\nimport pandas as pd\n\n# Import the cars.csv data: cars\ncars = pd.read_csv('datasets/Intermediate-Python/cars.csv') # edited/added\n\n# Print out cars\nprint(cars)##   Unnamed: 0  cars_per_cap        country  drives_right\n## 0         US           809  United States          True\n## 1        AUS           731      Australia         False\n## 2        JAP           588          Japan         False\n## 3         IN            18          India         False\n## 4         RU           200         Russia          True\n## 5        MOR            70        Morocco          True\n## 6         EG            45          Egypt          True"},{"path":"intermediate-python.html","id":"csv-to-dataframe-2","chapter":"Intermediate Python","heading":"CSV to DataFrame (2)","text":"\nread_csv() call import CSV data didn’t generate error, output entirely wanted. row labels imported another column without name.\n\nRemember index_col, argument read_csv(), can use specify column CSV file used row label? Well, ’s exactly need !\n\nPython code solves previous exercise already included; can make appropriate changes fix data import?\n\nRun code Run Code assert first column actually used row labels.\n\nSpecify index_col argument inside pd.read_csv(): set 0, first column used row labels.\n\nprintout cars improved now?\n\n’s much better!\n","code":"# Import pandas as pd\nimport pandas as pd\n\n# Fix import by including index_col\ncars = pd.read_csv('datasets/Intermediate-Python/cars.csv')\n\n# Print out cars\nprint(cars)##   Unnamed: 0  cars_per_cap        country  drives_right\n## 0         US           809  United States          True\n## 1        AUS           731      Australia         False\n## 2        JAP           588          Japan         False\n## 3         IN            18          India         False\n## 4         RU           200         Russia          True\n## 5        MOR            70        Morocco          True\n## 6         EG            45          Egypt          True# Import pandas as pd\nimport pandas as pd\n\n# Fix import by including index_col\ncars = pd.read_csv('datasets/Intermediate-Python/cars.csv', index_col = 0)\n\n# Print out cars\nprint(cars)##      cars_per_cap        country  drives_right\n## US            809  United States          True\n## AUS           731      Australia         False\n## JAP           588          Japan         False\n## IN             18          India         False\n## RU            200         Russia          True\n## MOR            70        Morocco          True\n## EG             45          Egypt          True"},{"path":"intermediate-python.html","id":"pandas-part-2","chapter":"Intermediate Python","heading":"Pandas, Part 2","text":"","code":""},{"path":"intermediate-python.html","id":"square-brackets-1","chapter":"Intermediate Python","heading":"Square Brackets (1)","text":"\nvideo, saw can index select Pandas DataFrames many different ways. simplest, powerful way, use square brackets.\n\nsample code, cars data imported CSV files Pandas DataFrame. select cars_per_cap column cars, can use:\n\nsingle bracket version gives Pandas Series, double bracket version gives Pandas DataFrame.\n\nUse single square brackets print country column cars Pandas Series.\n\nUse double square brackets print country column cars Pandas DataFrame.\n\nUse double square brackets print DataFrame country drives_right columns cars, order.\n\nNice!\n","code":"cars['cars_per_cap']\ncars[['cars_per_cap']]\n# Import cars data\nimport pandas as pd\ncars = pd.read_csv('datasets/Intermediate-Python/cars.csv', index_col = 0)\n\n# Print out country column as Pandas Series\nprint(cars['country'])## US     United States\n## AUS        Australia\n## JAP            Japan\n## IN             India\n## RU            Russia\n## MOR          Morocco\n## EG             Egypt\n## Name: country, dtype: object# Print out country column as Pandas DataFrame\nprint(cars[['country']])##            country\n## US   United States\n## AUS      Australia\n## JAP          Japan\n## IN           India\n## RU          Russia\n## MOR        Morocco\n## EG           Egypt# Print out DataFrame with country and drives_right columns\nprint(cars[['country', 'drives_right']])##            country  drives_right\n## US   United States          True\n## AUS      Australia         False\n## JAP          Japan         False\n## IN           India         False\n## RU          Russia          True\n## MOR        Morocco          True\n## EG           Egypt          True"},{"path":"intermediate-python.html","id":"square-brackets-2","chapter":"Intermediate Python","heading":"Square Brackets (2)","text":"\nSquare brackets can just selecting columns. can also use get rows, observations, DataFrame. following call selects first five rows cars DataFrame:\n\nresult another DataFrame containing rows specified.\n\nPay attention: can select rows using square brackets specify slice, like 0:4. Also, ’re using integer indexes rows , row labels!\n\nSelect first 3 observations cars print .\n\nSelect fourth, fifth sixth observation, corresponding row indexes 3, 4 5, print .\n\nGood job. can get interesting information, using square brackets indexing rather limited. Experiment advanced techniques following exercises.\n","code":"cars[0:5]\n# Import cars data\nimport pandas as pd\ncars = pd.read_csv('datasets/Intermediate-Python/cars.csv', index_col = 0)\n\n# Print out first 3 observations\nprint(cars[0:3])##      cars_per_cap        country  drives_right\n## US            809  United States          True\n## AUS           731      Australia         False\n## JAP           588          Japan         False# Print out fourth, fifth and sixth observation\nprint(cars[3:6])##      cars_per_cap  country  drives_right\n## IN             18    India         False\n## RU            200   Russia          True\n## MOR            70  Morocco          True"},{"path":"intermediate-python.html","id":"loc-and-iloc-1","chapter":"Intermediate Python","heading":"loc and iloc (1)","text":"\nloc iloc can practically data selection operation DataFrames can think . loc label-based, means specify rows columns based row column labels. iloc integer index based, specify rows columns integer index like previous exercise.\n\nTry following commands IPython Shell experiment loc iloc select observations. pair commands gives result.\n\n, code included imports cars data Pandas DataFrame.\n\nUse loc iloc select observation corresponding Japan Series. label row JPN, index 2. Make sure print resulting Series.\n\nUse loc iloc select observations Australia Egypt DataFrame. can find labels/indexes rows inspecting cars IPython Shell. Make sure print resulting DataFrame.\n\naced selecting observations DataFrames; selecting rows columns!\n","code":"cars.loc['RU']\ncars.iloc[4]\n\ncars.loc[['RU']]\ncars.iloc[[4]]\n\ncars.loc[['RU', 'AUS']]\ncars.iloc[[4, 1]]\n# Import cars data\nimport pandas as pd\ncars = pd.read_csv('datasets/Intermediate-Python/cars.csv', index_col = 0)\n\n# Print out observation for Japan\nprint(cars.iloc[2])## cars_per_cap      588\n## country         Japan\n## drives_right    False\n## Name: JAP, dtype: object# Print out observations for Australia and Egypt\nprint(cars.loc[['AUS', 'EG']])##      cars_per_cap    country  drives_right\n## AUS           731  Australia         False\n## EG             45      Egypt          True"},{"path":"intermediate-python.html","id":"loc-and-iloc-2","chapter":"Intermediate Python","heading":"loc and iloc (2)","text":"\nloc iloc also allow select rows columns DataFrame. experiment, try following commands IPython Shell. , paired commands produce result.\n\nPrint drives_right value row corresponding Morocco (row label MOR)\n\nPrint sub-DataFrame, containing observations Russia Morocco columns country drives_right.\n\nGreat work! .loc[] .iloc[] excellent tools selecting DataFrame values label index. next exercise, ’ll select entire columns using !\n","code":"cars.loc['IN', 'cars_per_cap']\ncars.iloc[3, 0]\n\ncars.loc[['IN', 'RU'], 'cars_per_cap']\ncars.iloc[[3, 4], 0]\n\ncars.loc[['IN', 'RU'], ['cars_per_cap', 'country']]\ncars.iloc[[3, 4], [0, 1]]\n# Import cars data\nimport pandas as pd\ncars = pd.read_csv('datasets/Intermediate-Python/cars.csv', index_col = 0)\n\n# Print out drives_right value of Morocco\nprint(cars.iloc[5, 2])## True# Print sub-DataFrame\nprint(cars.loc[['RU', 'MOR'], ['country', 'drives_right']])##      country  drives_right\n## RU    Russia          True\n## MOR  Morocco          True"},{"path":"intermediate-python.html","id":"loc-and-iloc-3","chapter":"Intermediate Python","heading":"loc and iloc (3)","text":"\n’s also possible select columns loc iloc. cases, simply put slice going beginning end front comma:\n\nPrint drives_right column Series using loc iloc.\n\nPrint drives_right column DataFrame using loc iloc.\n\nPrint cars_per_cap drives_right column DataFrame using loc iloc.\n\ndrill indexing selecting data Pandas DataFrames! ’ve done great! ’s time head Chapter 3 learn logic, control flow, filtering!\n","code":"cars.loc[:, 'country']\ncars.iloc[:, 1]\n\ncars.loc[:, ['country','drives_right']]\ncars.iloc[:, [1, 2]]\n# Import cars data\nimport pandas as pd\ncars = pd.read_csv('datasets/Intermediate-Python/cars.csv', index_col = 0)\n\n# Print out drives_right column as Series\nprint(cars.iloc[:, 2])## US      True\n## AUS    False\n## JAP    False\n## IN     False\n## RU      True\n## MOR     True\n## EG      True\n## Name: drives_right, dtype: bool# Print out drives_right column as DataFrame\nprint(cars.iloc[:, [2]])##      drives_right\n## US           True\n## AUS         False\n## JAP         False\n## IN          False\n## RU           True\n## MOR          True\n## EG           True# Print out cars_per_cap and drives_right as DataFrame\nprint(cars.loc[:, ['cars_per_cap', 'drives_right']])##      cars_per_cap  drives_right\n## US            809          True\n## AUS           731         False\n## JAP           588         False\n## IN             18         False\n## RU            200          True\n## MOR            70          True\n## EG             45          True"},{"path":"intermediate-python.html","id":"logic-control-flow-and-filtering","chapter":"Intermediate Python","heading":"Logic, Control Flow and Filtering","text":"\nBoolean logic foundation decision-making Python programs. Learn different comparison operators, combine Boolean operators, use Boolean outcomes control structures. ’ll also learn filter data pandas DataFrames using logic.\n","code":""},{"path":"intermediate-python.html","id":"comparison-operators","chapter":"Intermediate Python","heading":"Comparison Operators","text":"","code":""},{"path":"intermediate-python.html","id":"equality","chapter":"Intermediate Python","heading":"Equality","text":"\ncheck two Python values, variables, equal can use ==. check inequality, need !=. refresher, look following examples result True. Feel free try IPython Shell.\n\nwrite comparisons script, need wrap print() function around see output.\n\neditor right, write code see True equals False.\n\nWrite Python code check -5 * 15 equal 75.\n\nAsk Python whether strings “pyscript” “PyScript” equal.\n\nhappens compare booleans integers? Write code see True 1 equal.\n\nlast comparison worked fine actually, boolean special kind integer: True corresponds 1, False corresponds 0.\n","code":"2 == (1 + 1)\n\"intermediate\" != \"python\"\nTrue != False\n\"Python\" != \"python\"\n# Comparison of booleans\nprint(True == False)## False# Comparison of integers\nprint(-5 * 15 != 75)## True# Comparison of strings\nprint(\"pyscript\" == \"PyScript\")## False# Compare a boolean with a numeric\nprint(True == 1)## True"},{"path":"intermediate-python.html","id":"greater-and-less-than","chapter":"Intermediate Python","heading":"Greater and less than","text":"\nvideo, Hugo also talked less greater signs, < > Python. can combine equals sign: <= >=. Pay attention: <= valid syntax, =< .\n\nPython expressions following code chunk evaluate True:\n\nRemember string comparison, Python determines relationship based alphabetical order.\n\nWrite Python expressions, wrapped print() function, check whether:\n\nx greater equal -10. x already defined .\n\n“test” less equal y. y already defined .\n\nTrue greater False.\n\nGreat job!\n","code":"3 < 4\n3 <= 4\n\"alpha\" <= \"beta\"\n# Comparison of integers\nx = -3 * 6\nprint(x >= -10)## False# Comparison of strings\ny = \"test\"\nprint(\"test\" <= y)## True# Comparison of booleans\nprint(True > False)## True"},{"path":"intermediate-python.html","id":"compare-arrays","chapter":"Intermediate Python","heading":"Compare arrays","text":"\nbox, can also use comparison operators NumPy arrays.\n\nRemember areas, list area measurements different rooms house Introduction Python? time ’s two NumPy arrays: my_house your_house. contain areas kitchen, living room, bedroom bathroom order, can compare .\n\nUsing comparison operators, generate boolean arrays answer following questions:\n\nareas my_house greater equal 18?\n\ncan also compare two NumPy arrays element-wise. areas my_house smaller ones your_house?\n\nMake sure wrap commands print() statement can inspect output!\n\nGood job. appears living room bedroom my_house smaller corresponding areas your_house.\n","code":"# Create arrays\nimport numpy as np\nmy_house = np.array([18.0, 20.0, 10.75, 9.50])\nyour_house = np.array([14.0, 24.0, 14.25, 9.0])\n\n# my_house greater than or equal to 18\nprint(my_house >= 18)## [ True  True False False]# my_house less than your_house\nprint(my_house < your_house)## [False  True  True False]"},{"path":"intermediate-python.html","id":"boolean-operators","chapter":"Intermediate Python","heading":"Boolean Operators","text":"","code":""},{"path":"intermediate-python.html","id":"and-or-not-1","chapter":"Intermediate Python","heading":"and, or, not (1)","text":"\nboolean either 1 0, True False. boolean operators , , can combine booleans perform advanced queries data.\n\nsample code, two variables defined: my_kitchen your_kitchen, representing areas.\n\nWrite Python expressions, wrapped print() function, check whether:\n\nmy_kitchen bigger 10 smaller 18.\n\nmy_kitchen smaller 14 bigger 17.\n\ndouble area my_kitchen smaller triple area your_kitchen.\n\nGood job!\n","code":"# Define variables\nmy_kitchen = 18.0\nyour_kitchen = 14.0\n\n# my_kitchen bigger than 10 and smaller than 18?\nprint(my_kitchen > 10 and my_kitchen < 18)## False# my_kitchen smaller than 14 or bigger than 17?\nprint(my_kitchen < 14 or my_kitchen > 17)## True# Double my_kitchen smaller than triple your_kitchen?\nprint(my_kitchen * 2 < your_kitchen * 3)## True"},{"path":"intermediate-python.html","id":"and-or-not-2","chapter":"Intermediate Python","heading":"and, or, not (2)","text":"\nsee completely understood boolean operators, look following piece Python code:\n\nresult execute three commands IPython Shell?\n\nNB: Notice higher priority , executed first.\nTrueFalseRunning commands result error.\nCorrect! x < 3 False. y > 14 y > 10 False well. continue working like , simplifying inside outwards, ’ll end False.\n","code":"x = 8\ny = 9\nnot(not(x < 3) and not(y > 14 or y > 10))\n"},{"path":"intermediate-python.html","id":"boolean-operators-with-numpy","chapter":"Intermediate Python","heading":"Boolean operators with NumPy","text":"\n, operational operators like < >= worked NumPy arrays box. Unfortunately, true boolean operators , , .\n\nuse operators NumPy, need np.logical_and(), np.logical_or() np.logical_not(). ’s example my_house your_house arrays give idea:\n\nGenerate boolean arrays answer following questions:\n\nareas my_house greater 18.5 smaller 10?\n\nareas smaller 11 my_house your_house? Make sure wrap commands print() statement, can inspect output.\n\nCorrecto perfecto!\n","code":"np.logical_and(my_house > 13, \n               your_house < 15)\n# Create arrays\nimport numpy as np\nmy_house = np.array([18.0, 20.0, 10.75, 9.50])\nyour_house = np.array([14.0, 24.0, 14.25, 9.0])\n\n# my_house greater than 18.5 or smaller than 10\nprint(np.logical_or(my_house > 18.5, my_house < 10))## [False  True False  True]# Both my_house and your_house smaller than 11\nprint(np.logical_and(my_house < 11, your_house < 11))## [False False False  True]"},{"path":"intermediate-python.html","id":"if-elif-else","chapter":"Intermediate Python","heading":"if, elif, else","text":"","code":""},{"path":"intermediate-python.html","id":"warmup","chapter":"Intermediate Python","heading":"Warmup","text":"\nexperiment else bit, look code sample:\n\noutput run piece code IPython Shell?\nsmallmediumlargeThe syntax incorrect; code produce error.\nExactly!\n","code":"area = 10.0\nif(area < 9) :\n    print(\"small\")\nelif(area < 12) :\n    print(\"medium\")\nelse :\n    print(\"large\")\n"},{"path":"intermediate-python.html","id":"if","chapter":"Intermediate Python","heading":"if","text":"\n’s time take closer look around house.\n\nTwo variables defined sample code: room, string tells room house ’re looking , area, area room.\n\nExamine statement prints “looking around kitchen.” room equals “kit”.\n\nWrite another statement prints “big place!” area greater 15.\n\nGreat! big place! wasn’t printed, area > 15 True. Experiment values room area see printouts change.\n","code":"# Define variables\nroom = \"kit\"\narea = 14.0# if statement for room\nif room == \"kit\" :\n    print(\"looking around in the kitchen.\")\n    \n# if statement for area## looking around in the kitchen.if area > 15 :\n    print(\"big place!\")"},{"path":"intermediate-python.html","id":"add-else","chapter":"Intermediate Python","heading":"Add else","text":"\nscript, construct room extended else statement “looking around elsewhere.” printed condition room == “kit” evaluates False.\n\nCan similar thing add functionality construct area?\n\nAdd else statement second control structure “pretty small.” printed area > 15 evaluates False.\n\nNice! , feel free play around different values room area . , head next exercise ’ll take customization one step !\n","code":"# Define variables\nroom = \"kit\"\narea = 14.0# if-else construct for room\nif room == \"kit\" :\n    print(\"looking around in the kitchen.\")\nelse :\n    print(\"looking around elsewhere.\")## looking around in the kitchen.# if-else construct for area :\nif area > 15 :\n    print(\"big place!\")\nelse :\n    print(\"pretty small.\")## pretty small."},{"path":"intermediate-python.html","id":"customize-further-elif","chapter":"Intermediate Python","heading":"Customize further: elif","text":"\n’s also possible look around bedroom. sample code contains elif part checks room equals “bed”. case, “looking around bedroom.” printed .\n\n’s now! Make similar addition second control structure customize messages different values area.\n\nAdd elif second control structure “medium size, nice!” printed area greater 10.\n\nWell done!\n","code":"# Define variables\nroom = \"bed\"\narea = 14.0\n\n# if-elif-else construct for room\nif room == \"kit\" :\n    print(\"looking around in the kitchen.\")\nelif room == \"bed\":\n    print(\"looking around in the bedroom.\")\nelse :\n    print(\"looking around elsewhere.\")## looking around in the bedroom.# if-elif-else construct for area\nif area > 15 :\n    print(\"big place!\")\nelif area > 10 :\n    print(\"medium size, nice!\")\nelse :\n    print(\"pretty small.\")## medium size, nice!"},{"path":"intermediate-python.html","id":"filtering-pandas-dataframes","chapter":"Intermediate Python","heading":"Filtering pandas DataFrames","text":"","code":""},{"path":"intermediate-python.html","id":"driving-right-1","chapter":"Intermediate Python","heading":"Driving right (1)","text":"\nRemember cars dataset, containing cars per 1000 people (cars_per_cap) whether people drive right (drives_right) different countries (country)? code imports data CSV format Python DataFrame included script.\n\nvideo, saw step--step approach filter observations DataFrame based boolean arrays. Let’s start simple try find observations cars drives_right True.\n\ndrives_right boolean column, ’ll extract Series use boolean Series select observations cars.\n\nExtract drives_right column Pandas Series store dr.\n\nUse dr, boolean Series, subset cars DataFrame. Store resulting selection sel.\n\nPrint sel, assert drives_right True observations.\n\nGreat job!\n","code":"# Import cars data\nimport pandas as pd\ncars = pd.read_csv('datasets/Intermediate-Python/cars.csv', index_col = 0)\n\n# Extract drives_right column as Series: dr\ndr = cars['drives_right']\n\n# Use dr to subset cars: sel\nsel = cars[dr]\n\n# Print sel\nprint(sel)##      cars_per_cap        country  drives_right\n## US            809  United States          True\n## RU            200         Russia          True\n## MOR            70        Morocco          True\n## EG             45          Egypt          True"},{"path":"intermediate-python.html","id":"driving-right-2","chapter":"Intermediate Python","heading":"Driving right (2)","text":"\ncode previous example worked fine, actually unnecessarily created new variable dr. can achieve result without intermediate variable. Put code computes dr straight square brackets select observations cars.\n\nConvert code one-liner calculates variable sel .\n\nNice one! cars contains 7 rows observations, sel contains 4; majority countries dataset, people drive right side road.\n","code":"# Import cars data\nimport pandas as pd\ncars = pd.read_csv('datasets/Intermediate-Python/cars.csv', index_col = 0)\n\n# Convert code to a one-liner\nsel = cars[cars['drives_right']]\n\n# Print sel\nprint(sel)##      cars_per_cap        country  drives_right\n## US            809  United States          True\n## RU            200         Russia          True\n## MOR            70        Morocco          True\n## EG             45          Egypt          True"},{"path":"intermediate-python.html","id":"cars-per-capita-1","chapter":"Intermediate Python","heading":"Cars per capita (1)","text":"\nLet’s stick cars data . time want find countries high cars per capita figure. words, countries many people car, maybe multiple cars.\n\nSimilar previous example, ’ll want build boolean Series, can use subset cars DataFrame select certain observations. want one-liner, ’s perfectly fine!\n\nSelect cars_per_cap column cars Pandas Series store cpc.\n\nUse cpc combination comparison operator 500. want end boolean Series ’s True corresponding country cars_per_cap 500 False otherwise. Store boolean Series many_cars.\n\nUse many_cars subset cars, similar . Store result car_maniac.\n\nPrint car_maniac see got right.\n\nGood job! output shows US, Australia Japan cars_per_cap 500.\n","code":"# Import cars data\nimport pandas as pd\ncars = pd.read_csv('datasets/Intermediate-Python/cars.csv', index_col = 0)\n\n# Create car_maniac: observations that have a cars_per_cap over 500\ncpc = cars['cars_per_cap']\nmany_cars = cpc > 500\ncar_maniac = cars[many_cars]\n\n# Print car_maniac\nprint(car_maniac)##      cars_per_cap        country  drives_right\n## US            809  United States          True\n## AUS           731      Australia         False\n## JAP           588          Japan         False"},{"path":"intermediate-python.html","id":"cars-per-capita-2","chapter":"Intermediate Python","heading":"Cars per capita (2)","text":"\nRemember np.logical_and(), np.logical_or() np.logical_not(), NumPy variants , operators? can also use Pandas Series advanced filtering operations.\n\nTake example selects observations cars_per_cap 10 80. Try lines code step step see ’s happening.\n\nUse code sample provided create DataFrame medium, includes observations cars cars_per_cap 100 500.\n\nPrint medium.\n\nGreat work!\n","code":"cpc = cars['cars_per_cap']\nbetween = np.logical_and(cpc > 10, cpc < 80)\nmedium = cars[between]\n# Import cars data\nimport pandas as pd\ncars = pd.read_csv('datasets/Intermediate-Python/cars.csv', index_col = 0)\n\n# Import numpy, you'll need this\nimport numpy as np\n\n# Create medium: observations with cars_per_cap between 100 and 500\ncpc = cars['cars_per_cap']\nbetween = np.logical_and(cpc > 100, cpc < 500)\nmedium = cars[between]\n\n# Print medium\nprint(medium)##     cars_per_cap country  drives_right\n## RU           200  Russia          True"},{"path":"intermediate-python.html","id":"loops","chapter":"Intermediate Python","heading":"Loops","text":"\nseveral techniques can use repeatedly execute Python code. loops like repeated statements, loop iterates kinds data structures. Learn chapter.\n","code":""},{"path":"intermediate-python.html","id":"while-loop","chapter":"Intermediate Python","heading":"while loop","text":"","code":""},{"path":"intermediate-python.html","id":"while-warming-up","chapter":"Intermediate Python","heading":"while: warming up","text":"\nloop like repeated statement. code executed , long condition True. another look recipe.\n\nCan tell many printouts following loop ?\n01234\nCorrect! 3 runs, x equal 4, causing x < 4 evaluate False. means loop executed 3 times, giving three printouts.\n","code":"while condition :\n    expression\nx = 1\nwhile x < 4 :\n    print(x)\n    x = x + 1\n"},{"path":"intermediate-python.html","id":"basic-while-loop","chapter":"Intermediate Python","heading":"Basic while loop","text":"\ncan find example video error variable, initially equal 50.0, divided 4 printed every run:\n\nexample come handy, ’s time build loop ! ’re going code loop implements basic control system inverted pendulum. ’s offset standing perfectly straight, loop incrementally fix offset.\n\nNote loop takes long run, might made mistake. particular, remember indent contents loop using four spaces auto-indentation!\n\nCreate variable offset initial value 8.\n\nCode loop keeps running long offset equal 0. Inside loop:\n\nPrint sentence “correcting…”.\n\n\nNext, decrease value offset 1. can offset = offset - 1.\n\n\nFinally, still within loop, print offset can see changes.\n\n\nPrint sentence “correcting…”.\n\nNext, decrease value offset 1. can offset = offset - 1.\n\nFinally, still within loop, print offset can see changes.\n\nWell done!\n","code":"error = 50.0\nwhile error > 1 :\n    error = error / 4\n    print(error)\n# Initialize offset\noffset = 8\n\n# Code the while loop\nwhile offset != 0 :\n    print(\"correcting...\")\n    offset = offset - 1\n    print(offset)## correcting...\n## 7\n## correcting...\n## 6\n## correcting...\n## 5\n## correcting...\n## 4\n## correcting...\n## 3\n## correcting...\n## 2\n## correcting...\n## 1\n## correcting...\n## 0"},{"path":"intermediate-python.html","id":"add-conditionals","chapter":"Intermediate Python","heading":"Add conditionals","text":"\nloop corrects offset good start, offset negative? can try run following code offset initialized -6:\n\nsession disconnected. loop never stop running, offset decreased every run. offset != 0 never become False loop continues forever.\n\nFix things putting -else statement inside loop. code still taking long run, probably made mistake!\n\nInside loop, complete -else statement:\n\noffset greater zero, decrease offset 1.\n\nElse, increase offset 1.\n\n’ve coded things correctly, hitting Submit Answer work time.\n\ncode still taking long run (session expiring), probably made mistake. Check code make sure statement offset != 0 eventually evaluate FALSE!\n\nGood work! loop often used Data Science, let’s head loop.\n","code":"# Initialize offset\noffset = -6\n\n# Code the while loop\nwhile offset != 0 :\n    print(\"correcting...\")\n    offset = offset - 1\n    print(offset)\n# Initialize offset\noffset = -6\n\n# Code the while loop\nwhile offset != 0 :\n    print(\"correcting...\")\n    if offset > 0 :\n        offset = offset - 1\n    else :\n        offset = offset + 1\n    print(offset)## correcting...\n## -5\n## correcting...\n## -4\n## correcting...\n## -3\n## correcting...\n## -2\n## correcting...\n## -1\n## correcting...\n## 0"},{"path":"intermediate-python.html","id":"for-loop","chapter":"Intermediate Python","heading":"for loop","text":"","code":""},{"path":"intermediate-python.html","id":"loop-over-a-list","chapter":"Intermediate Python","heading":"Loop over a list","text":"\nanother look loop Hugo showed video:\n\nusual, simply indent code 4 spaces tell Python code executed loop.\n\nareas variable, containing area different rooms house, already defined.\n\nWrite loop iterates elements areas list prints every element separately.\n\nGreat! wasn’t hard, ?\n","code":"fam = [1.73, 1.68, 1.71, 1.89]\nfor height in fam : \n    print(height)\n# areas list\nareas = [11.25, 18.0, 20.0, 10.75, 9.50]\n\n# Code the for loop\nfor area in areas :\n    print(area)## 11.25\n## 18.0\n## 20.0\n## 10.75\n## 9.5"},{"path":"intermediate-python.html","id":"indexes-and-values-1","chapter":"Intermediate Python","heading":"Indexes and values (1)","text":"\nUsing loop iterate list gives access every list element run, one . also want access index information, list element ’re iterating located, can use enumerate().\n\nexample, look loop video converted:\n\nAdapt loop sample code use enumerate() use two iterator variables.\n\nUpdate print() statement run, line form “room x: y” printed, x index list element y actual list element, .e. area. Make sure print exact string, correct spacing.\n\nWell done!\n","code":"fam = [1.73, 1.68, 1.71, 1.89]\nfor index, height in enumerate(fam) :\n    print(\"person \" + str(index) + \": \" + str(height))\n# areas list\nareas = [11.25, 18.0, 20.0, 10.75, 9.50]\n\n# Change for loop to use enumerate() and update print()\nfor index, area in enumerate(areas) :\n    print(\"room \" + str(index) + \": \" + str(area))## room 0: 11.25\n## room 1: 18.0\n## room 2: 20.0\n## room 3: 10.75\n## room 4: 9.5"},{"path":"intermediate-python.html","id":"indexes-and-values-2","chapter":"Intermediate Python","heading":"Indexes and values (2)","text":"\nnon-programmer folks, room 0: 11.25 strange. Wouldn’t better count started 1?\n\nAdapt print() function loop first printout becomes “room 1: 11.25”, second one “room 2: 18.0” .\n\nMuch better!\n","code":"# areas list\nareas = [11.25, 18.0, 20.0, 10.75, 9.50]\n\n# Adapt the printout\nfor index, area in enumerate(areas) :\n    print(\"room \" + str(index + 1) + \": \" + str(area))## room 1: 11.25\n## room 2: 18.0\n## room 3: 20.0\n## room 4: 10.75\n## room 5: 9.5"},{"path":"intermediate-python.html","id":"loop-over-list-of-lists","chapter":"Intermediate Python","heading":"Loop over list of lists","text":"\nRemember house variable Intro Python course? look definition script. ’s basically list lists, sublist contains name area room house.\n\n’s build loop scratch time!\n\nWrite loop goes sublist house prints x y sqm, x name room y area room.\n\nnext video!\n","code":"# house list of lists\nhouse = [[\"hallway\", 11.25], \n         [\"kitchen\", 18.0], \n         [\"living room\", 20.0], \n         [\"bedroom\", 10.75], \n         [\"bathroom\", 9.50]]\n         \n# Build a for loop from scratch\nfor x in house :\n    print(\"the \" + x[0] + \" is \" + str(x[1]) + \" sqm\")## the hallway is 11.25 sqm\n## the kitchen is 18.0 sqm\n## the living room is 20.0 sqm\n## the bedroom is 10.75 sqm\n## the bathroom is 9.5 sqm"},{"path":"intermediate-python.html","id":"loop-data-structures-part-1","chapter":"Intermediate Python","heading":"Loop Data Structures Part 1","text":"","code":""},{"path":"intermediate-python.html","id":"loop-over-dictionary","chapter":"Intermediate Python","heading":"Loop over dictionary","text":"\nPython 3, need items() method loop dictionary:\n\nRemember europe dictionary contained names European countries key capitals corresponding value? Go ahead write loop iterate !\n\nWrite loop goes key:value pair europe. iteration, “capital x y” printed , x key y value pair.\n\nGreat! Notice order printouts doesn’t necessarily correspond order used defining europe. Remember: dictionaries inherently unordered!\n","code":"world = { \"afghanistan\":30.55, \n          \"albania\":2.77,\n          \"algeria\":39.21 }\n\nfor key, value in world.items() :\n    print(key + \" -- \" + str(value))\n# Definition of dictionary\neurope = {'spain':'madrid', 'france':'paris', 'germany':'berlin',\n          'norway':'oslo', 'italy':'rome', 'poland':'warsaw', 'austria':'vienna' }\n          \n# Iterate over europe\nfor key, value in europe.items() :\n     print(\"the capital of \" + str(key) + \" is \" + str(value))## the capital of spain is madrid\n## the capital of france is paris\n## the capital of germany is berlin\n## the capital of norway is oslo\n## the capital of italy is rome\n## the capital of poland is warsaw\n## the capital of austria is vienna"},{"path":"intermediate-python.html","id":"loop-over-numpy-array","chapter":"Intermediate Python","heading":"Loop over NumPy array","text":"\n’re dealing 1D NumPy array, looping elements can simple :\n\n’re dealing 2D NumPy array, ’s complicated. 2D array built multiple 1D arrays. explicitly iterate separate elements multi-dimensional array, ’ll need syntax:\n\nTwo NumPy arrays might recognize intro course available Python session: np_height, NumPy array containing heights Major League Baseball players, np_baseball, 2D NumPy array contains heights (first column) weights (second column) players.\n\nImport numpy package local alias np.\n\nWrite loop iterates elements np_height prints “x inches” element, x value array.\n\nWrite loop visits every element np_baseball array prints .\n\nWow, ’s lot output! Try add additional argument end = print() call - output mesmerizing!\n","code":"for x in my_array :\n    ...\nfor x in np.nditer(my_array) :\n    ...\n# edited/added\nimport pandas as pd\nmlb = pd.read_csv('datasets/Intermediate-Python/baseball.csv')\nnp_height = np.array(mlb['Height'])\nnp_weight = np.array(mlb['Weight'])\nbaseball = [[180, 78.4],\n            [215, 102.7],\n            [210, 98.5],\n            [188, 75.2]]\nnp_baseball = np.array(baseball)\n\n# Import numpy as np\nimport numpy as np\n\n# For loop over np_height\nfor x in np_height :\n    print(str(x) + \" inches\")## 74 inches\n## 74 inches\n## 72 inches\n## 72 inches\n## 73 inches\n## 69 inches\n## 69 inches\n## 71 inches\n## 76 inches\n## 71 inches\n## 73 inches\n## 73 inches\n## 74 inches\n## 74 inches\n## 69 inches\n## 70 inches\n## 73 inches\n## 75 inches\n## 78 inches\n## 79 inches\n## 76 inches\n## 74 inches\n## 76 inches\n## 72 inches\n## 71 inches\n## 75 inches\n## 77 inches\n## 74 inches\n## 73 inches\n## 74 inches\n## 78 inches\n## 73 inches\n## 75 inches\n## 73 inches\n## 75 inches\n## 75 inches\n## 74 inches\n## 69 inches\n## 71 inches\n## 74 inches\n## 73 inches\n## 73 inches\n## 76 inches\n## 74 inches\n## 74 inches\n## 70 inches\n## 72 inches\n## 77 inches\n## 74 inches\n## 70 inches\n## 73 inches\n## 75 inches\n## 76 inches\n## 76 inches\n## 78 inches\n## 74 inches\n## 74 inches\n## 76 inches\n## 77 inches\n## 81 inches\n## 78 inches\n## 75 inches\n## 77 inches\n## 75 inches\n## 76 inches\n## 74 inches\n## 72 inches\n## 72 inches\n## 75 inches\n## 73 inches\n## 73 inches\n## 73 inches\n## 70 inches\n## 70 inches\n## 70 inches\n## 76 inches\n## 68 inches\n## 71 inches\n## 72 inches\n## 75 inches\n## 75 inches\n## 75 inches\n## 75 inches\n## 68 inches\n## 74 inches\n## 78 inches\n## 71 inches\n## 73 inches\n## 76 inches\n## 74 inches\n## 74 inches\n## 79 inches\n## 75 inches\n## 73 inches\n## 76 inches\n## 74 inches\n## 74 inches\n## 73 inches\n## 72 inches\n## 74 inches\n## 73 inches\n## 74 inches\n## 72 inches\n## 73 inches\n## 69 inches\n## 72 inches\n## 73 inches\n## 75 inches\n## 75 inches\n## 73 inches\n## 72 inches\n## 72 inches\n## 76 inches\n## 74 inches\n## 72 inches\n## 77 inches\n## 74 inches\n## 77 inches\n## 75 inches\n## 76 inches\n## 80 inches\n## 74 inches\n## 74 inches\n## 75 inches\n## 78 inches\n## 73 inches\n## 73 inches\n## 74 inches\n## 75 inches\n## 76 inches\n## 71 inches\n## 73 inches\n## 74 inches\n## 76 inches\n## 76 inches\n## 74 inches\n## 73 inches\n## 74 inches\n## 70 inches\n## 72 inches\n## 73 inches\n## 73 inches\n## 73 inches\n## 73 inches\n## 71 inches\n## 74 inches\n## 74 inches\n## 72 inches\n## 74 inches\n## 71 inches\n## 74 inches\n## 73 inches\n## 75 inches\n## 75 inches\n## 79 inches\n## 73 inches\n## 75 inches\n## 76 inches\n## 74 inches\n## 76 inches\n## 78 inches\n## 74 inches\n## 76 inches\n## 72 inches\n## 74 inches\n## 76 inches\n## 74 inches\n## 75 inches\n## 78 inches\n## 75 inches\n## 72 inches\n## 74 inches\n## 72 inches\n## 74 inches\n## 70 inches\n## 71 inches\n## 70 inches\n## 75 inches\n## 71 inches\n## 71 inches\n## 73 inches\n## 72 inches\n## 71 inches\n## 73 inches\n## 72 inches\n## 75 inches\n## 74 inches\n## 74 inches\n## 75 inches\n## 73 inches\n## 77 inches\n## 73 inches\n## 76 inches\n## 75 inches\n## 74 inches\n## 76 inches\n## 75 inches\n## 73 inches\n## 71 inches\n## 76 inches\n## 75 inches\n## 72 inches\n## 71 inches\n## 77 inches\n## 73 inches\n## 74 inches\n## 71 inches\n## 72 inches\n## 74 inches\n## 75 inches\n## 73 inches\n## 72 inches\n## 75 inches\n## 75 inches\n## 74 inches\n## 72 inches\n## 74 inches\n## 71 inches\n## 70 inches\n## 74 inches\n## 77 inches\n## 77 inches\n## 75 inches\n## 75 inches\n## 78 inches\n## 75 inches\n## 76 inches\n## 73 inches\n## 75 inches\n## 75 inches\n## 79 inches\n## 77 inches\n## 76 inches\n## 71 inches\n## 75 inches\n## 74 inches\n## 69 inches\n## 71 inches\n## 76 inches\n## 72 inches\n## 72 inches\n## 70 inches\n## 72 inches\n## 73 inches\n## 71 inches\n## 72 inches\n## 71 inches\n## 73 inches\n## 72 inches\n## 73 inches\n## 74 inches\n## 74 inches\n## 72 inches\n## 75 inches\n## 74 inches\n## 74 inches\n## 77 inches\n## 75 inches\n## 73 inches\n## 72 inches\n## 71 inches\n## 74 inches\n## 77 inches\n## 75 inches\n## 75 inches\n## 75 inches\n## 78 inches\n## 78 inches\n## 74 inches\n## 76 inches\n## 78 inches\n## 76 inches\n## 70 inches\n## 72 inches\n## 80 inches\n## 74 inches\n## 74 inches\n## 71 inches\n## 70 inches\n## 72 inches\n## 71 inches\n## 74 inches\n## 71 inches\n## 72 inches\n## 71 inches\n## 74 inches\n## 69 inches\n## 76 inches\n## 75 inches\n## 75 inches\n## 76 inches\n## 73 inches\n## 76 inches\n## 73 inches\n## 77 inches\n## 73 inches\n## 72 inches\n## 72 inches\n## 77 inches\n## 77 inches\n## 71 inches\n## 74 inches\n## 74 inches\n## 73 inches\n## 78 inches\n## 75 inches\n## 73 inches\n## 70 inches\n## 74 inches\n## 72 inches\n## 73 inches\n## 73 inches\n## 75 inches\n## 75 inches\n## 74 inches\n## 76 inches\n## 73 inches\n## 74 inches\n## 75 inches\n## 75 inches\n## 72 inches\n## 73 inches\n## 73 inches\n## 72 inches\n## 74 inches\n## 78 inches\n## 76 inches\n## 73 inches\n## 74 inches\n## 75 inches\n## 70 inches\n## 75 inches\n## 71 inches\n## 72 inches\n## 78 inches\n## 75 inches\n## 73 inches\n## 73 inches\n## 71 inches\n## 75 inches\n## 77 inches\n## 72 inches\n## 69 inches\n## 73 inches\n## 74 inches\n## 72 inches\n## 70 inches\n## 75 inches\n## 70 inches\n## 72 inches\n## 72 inches\n## 74 inches\n## 73 inches\n## 74 inches\n## 76 inches\n## 75 inches\n## 80 inches\n## 72 inches\n## 75 inches\n## 73 inches\n## 74 inches\n## 74 inches\n## 73 inches\n## 75 inches\n## 75 inches\n## 71 inches\n## 73 inches\n## 75 inches\n## 74 inches\n## 74 inches\n## 72 inches\n## 74 inches\n## 74 inches\n## 74 inches\n## 73 inches\n## 76 inches\n## 75 inches\n## 72 inches\n## 73 inches\n## 73 inches\n## 73 inches\n## 72 inches\n## 72 inches\n## 72 inches\n## 72 inches\n## 71 inches\n## 75 inches\n## 75 inches\n## 74 inches\n## 73 inches\n## 75 inches\n## 79 inches\n## 74 inches\n## 76 inches\n## 73 inches\n## 74 inches\n## 74 inches\n## 72 inches\n## 74 inches\n## 74 inches\n## 75 inches\n## 78 inches\n## 74 inches\n## 74 inches\n## 74 inches\n## 77 inches\n## 70 inches\n## 73 inches\n## 74 inches\n## 73 inches\n## 71 inches\n## 75 inches\n## 71 inches\n## 72 inches\n## 77 inches\n## 74 inches\n## 70 inches\n## 77 inches\n## 73 inches\n## 72 inches\n## 76 inches\n## 71 inches\n## 76 inches\n## 78 inches\n## 75 inches\n## 73 inches\n## 78 inches\n## 74 inches\n## 79 inches\n## 75 inches\n## 76 inches\n## 72 inches\n## 75 inches\n## 75 inches\n## 70 inches\n## 72 inches\n## 70 inches\n## 74 inches\n## 71 inches\n## 76 inches\n## 73 inches\n## 76 inches\n## 71 inches\n## 69 inches\n## 72 inches\n## 72 inches\n## 69 inches\n## 73 inches\n## 69 inches\n## 73 inches\n## 74 inches\n## 74 inches\n## 72 inches\n## 71 inches\n## 72 inches\n## 72 inches\n## 76 inches\n## 76 inches\n## 76 inches\n## 74 inches\n## 76 inches\n## 75 inches\n## 71 inches\n## 72 inches\n## 71 inches\n## 73 inches\n## 75 inches\n## 76 inches\n## 75 inches\n## 71 inches\n## 75 inches\n## 74 inches\n## 72 inches\n## 73 inches\n## 73 inches\n## 73 inches\n## 73 inches\n## 76 inches\n## 72 inches\n## 76 inches\n## 73 inches\n## 73 inches\n## 73 inches\n## 75 inches\n## 75 inches\n## 77 inches\n## 73 inches\n## 72 inches\n## 75 inches\n## 70 inches\n## 74 inches\n## 72 inches\n## 80 inches\n## 71 inches\n## 71 inches\n## 74 inches\n## 74 inches\n## 73 inches\n## 75 inches\n## 76 inches\n## 73 inches\n## 77 inches\n## 72 inches\n## 73 inches\n## 77 inches\n## 76 inches\n## 71 inches\n## 75 inches\n## 73 inches\n## 74 inches\n## 77 inches\n## 71 inches\n## 72 inches\n## 73 inches\n## 69 inches\n## 73 inches\n## 70 inches\n## 74 inches\n## 76 inches\n## 73 inches\n## 73 inches\n## 75 inches\n## 73 inches\n## 79 inches\n## 74 inches\n## 73 inches\n## 74 inches\n## 77 inches\n## 75 inches\n## 74 inches\n## 73 inches\n## 77 inches\n## 73 inches\n## 77 inches\n## 74 inches\n## 74 inches\n## 73 inches\n## 77 inches\n## 74 inches\n## 77 inches\n## 75 inches\n## 77 inches\n## 75 inches\n## 71 inches\n## 74 inches\n## 70 inches\n## 79 inches\n## 72 inches\n## 72 inches\n## 70 inches\n## 74 inches\n## 74 inches\n## 72 inches\n## 73 inches\n## 72 inches\n## 74 inches\n## 74 inches\n## 76 inches\n## 82 inches\n## 74 inches\n## 74 inches\n## 70 inches\n## 73 inches\n## 73 inches\n## 74 inches\n## 77 inches\n## 72 inches\n## 76 inches\n## 73 inches\n## 73 inches\n## 72 inches\n## 74 inches\n## 74 inches\n## 71 inches\n## 72 inches\n## 75 inches\n## 74 inches\n## 74 inches\n## 77 inches\n## 70 inches\n## 71 inches\n## 73 inches\n## 76 inches\n## 71 inches\n## 75 inches\n## 74 inches\n## 72 inches\n## 76 inches\n## 79 inches\n## 76 inches\n## 73 inches\n## 76 inches\n## 78 inches\n## 75 inches\n## 76 inches\n## 72 inches\n## 72 inches\n## 73 inches\n## 73 inches\n## 75 inches\n## 71 inches\n## 76 inches\n## 70 inches\n## 75 inches\n## 74 inches\n## 75 inches\n## 73 inches\n## 71 inches\n## 71 inches\n## 72 inches\n## 73 inches\n## 73 inches\n## 72 inches\n## 69 inches\n## 73 inches\n## 78 inches\n## 71 inches\n## 73 inches\n## 75 inches\n## 76 inches\n## 70 inches\n## 74 inches\n## 77 inches\n## 75 inches\n## 79 inches\n## 72 inches\n## 77 inches\n## 73 inches\n## 75 inches\n## 75 inches\n## 75 inches\n## 73 inches\n## 73 inches\n## 76 inches\n## 77 inches\n## 75 inches\n## 70 inches\n## 71 inches\n## 71 inches\n## 75 inches\n## 74 inches\n## 69 inches\n## 70 inches\n## 75 inches\n## 72 inches\n## 75 inches\n## 73 inches\n## 72 inches\n## 72 inches\n## 72 inches\n## 76 inches\n## 75 inches\n## 74 inches\n## 69 inches\n## 73 inches\n## 72 inches\n## 72 inches\n## 75 inches\n## 77 inches\n## 76 inches\n## 80 inches\n## 77 inches\n## 76 inches\n## 79 inches\n## 71 inches\n## 75 inches\n## 73 inches\n## 76 inches\n## 77 inches\n## 73 inches\n## 76 inches\n## 70 inches\n## 75 inches\n## 73 inches\n## 75 inches\n## 70 inches\n## 69 inches\n## 71 inches\n## 72 inches\n## 72 inches\n## 73 inches\n## 70 inches\n## 70 inches\n## 73 inches\n## 76 inches\n## 75 inches\n## 72 inches\n## 73 inches\n## 79 inches\n## 71 inches\n## 72 inches\n## 74 inches\n## 74 inches\n## 74 inches\n## 72 inches\n## 76 inches\n## 76 inches\n## 72 inches\n## 72 inches\n## 71 inches\n## 72 inches\n## 72 inches\n## 70 inches\n## 77 inches\n## 74 inches\n## 72 inches\n## 76 inches\n## 71 inches\n## 76 inches\n## 71 inches\n## 73 inches\n## 70 inches\n## 73 inches\n## 73 inches\n## 72 inches\n## 71 inches\n## 71 inches\n## 71 inches\n## 72 inches\n## 72 inches\n## 74 inches\n## 74 inches\n## 74 inches\n## 71 inches\n## 72 inches\n## 75 inches\n## 72 inches\n## 71 inches\n## 72 inches\n## 72 inches\n## 72 inches\n## 72 inches\n## 74 inches\n## 74 inches\n## 77 inches\n## 75 inches\n## 73 inches\n## 75 inches\n## 73 inches\n## 76 inches\n## 72 inches\n## 77 inches\n## 75 inches\n## 72 inches\n## 71 inches\n## 71 inches\n## 75 inches\n## 72 inches\n## 73 inches\n## 73 inches\n## 71 inches\n## 70 inches\n## 75 inches\n## 71 inches\n## 76 inches\n## 73 inches\n## 68 inches\n## 71 inches\n## 72 inches\n## 74 inches\n## 77 inches\n## 72 inches\n## 76 inches\n## 78 inches\n## 81 inches\n## 72 inches\n## 73 inches\n## 76 inches\n## 72 inches\n## 72 inches\n## 74 inches\n## 76 inches\n## 73 inches\n## 76 inches\n## 75 inches\n## 70 inches\n## 71 inches\n## 74 inches\n## 72 inches\n## 73 inches\n## 76 inches\n## 76 inches\n## 73 inches\n## 71 inches\n## 68 inches\n## 71 inches\n## 71 inches\n## 74 inches\n## 77 inches\n## 69 inches\n## 72 inches\n## 76 inches\n## 75 inches\n## 76 inches\n## 75 inches\n## 76 inches\n## 72 inches\n## 74 inches\n## 76 inches\n## 74 inches\n## 72 inches\n## 75 inches\n## 78 inches\n## 77 inches\n## 70 inches\n## 72 inches\n## 79 inches\n## 74 inches\n## 71 inches\n## 68 inches\n## 77 inches\n## 75 inches\n## 71 inches\n## 72 inches\n## 70 inches\n## 72 inches\n## 72 inches\n## 73 inches\n## 72 inches\n## 74 inches\n## 72 inches\n## 72 inches\n## 75 inches\n## 72 inches\n## 73 inches\n## 74 inches\n## 72 inches\n## 78 inches\n## 75 inches\n## 72 inches\n## 74 inches\n## 75 inches\n## 75 inches\n## 76 inches\n## 74 inches\n## 74 inches\n## 73 inches\n## 74 inches\n## 71 inches\n## 74 inches\n## 75 inches\n## 76 inches\n## 74 inches\n## 76 inches\n## 76 inches\n## 73 inches\n## 75 inches\n## 75 inches\n## 74 inches\n## 68 inches\n## 72 inches\n## 75 inches\n## 71 inches\n## 70 inches\n## 72 inches\n## 73 inches\n## 72 inches\n## 75 inches\n## 74 inches\n## 70 inches\n## 76 inches\n## 71 inches\n## 82 inches\n## 72 inches\n## 73 inches\n## 74 inches\n## 71 inches\n## 75 inches\n## 77 inches\n## 72 inches\n## 74 inches\n## 72 inches\n## 73 inches\n## 78 inches\n## 77 inches\n## 73 inches\n## 73 inches\n## 73 inches\n## 73 inches\n## 73 inches\n## 76 inches\n## 75 inches\n## 70 inches\n## 73 inches\n## 72 inches\n## 73 inches\n## 75 inches\n## 74 inches\n## 73 inches\n## 73 inches\n## 76 inches\n## 73 inches\n## 75 inches\n## 70 inches\n## 77 inches\n## 72 inches\n## 77 inches\n## 74 inches\n## 75 inches\n## 75 inches\n## 75 inches\n## 75 inches\n## 72 inches\n## 74 inches\n## 71 inches\n## 76 inches\n## 71 inches\n## 75 inches\n## 76 inches\n## 83 inches\n## 75 inches\n## 74 inches\n## 76 inches\n## 72 inches\n## 72 inches\n## 75 inches\n## 75 inches\n## 72 inches\n## 77 inches\n## 73 inches\n## 72 inches\n## 70 inches\n## 74 inches\n## 72 inches\n## 74 inches\n## 72 inches\n## 71 inches\n## 70 inches\n## 71 inches\n## 76 inches\n## 74 inches\n## 76 inches\n## 74 inches\n## 74 inches\n## 74 inches\n## 75 inches\n## 75 inches\n## 71 inches\n## 71 inches\n## 74 inches\n## 77 inches\n## 71 inches\n## 74 inches\n## 75 inches\n## 77 inches\n## 76 inches\n## 74 inches\n## 76 inches\n## 72 inches\n## 71 inches\n## 72 inches\n## 75 inches\n## 73 inches\n## 68 inches\n## 72 inches\n## 69 inches\n## 73 inches\n## 73 inches\n## 75 inches\n## 70 inches\n## 70 inches\n## 74 inches\n## 75 inches\n## 74 inches\n## 74 inches\n## 73 inches\n## 74 inches\n## 75 inches\n## 77 inches\n## 73 inches\n## 74 inches\n## 76 inches\n## 74 inches\n## 75 inches\n## 73 inches\n## 76 inches\n## 78 inches\n## 75 inches\n## 73 inches\n## 77 inches\n## 74 inches\n## 72 inches\n## 74 inches\n## 72 inches\n## 71 inches\n## 73 inches\n## 75 inches\n## 73 inches\n## 67 inches\n## 67 inches\n## 76 inches\n## 74 inches\n## 73 inches\n## 70 inches\n## 75 inches\n## 70 inches\n## 72 inches\n## 77 inches\n## 79 inches\n## 78 inches\n## 74 inches\n## 75 inches\n## 75 inches\n## 78 inches\n## 76 inches\n## 75 inches\n## 69 inches\n## 75 inches\n## 72 inches\n## 75 inches\n## 73 inches\n## 74 inches\n## 75 inches\n## 75 inches\n## 73 inches# For loop over np_baseball\nfor x in np.nditer(np_baseball) :\n    print(x)## 180.0\n## 78.4\n## 215.0\n## 102.7\n## 210.0\n## 98.5\n## 188.0\n## 75.2"},{"path":"intermediate-python.html","id":"loop-data-structures-part-2","chapter":"Intermediate Python","heading":"Loop Data Structures Part 2","text":"","code":""},{"path":"intermediate-python.html","id":"loop-over-dataframe-1","chapter":"Intermediate Python","heading":"Loop over DataFrame (1)","text":"\nIterating Pandas DataFrame typically done iterrows() method. Used loop, every observation iterated every iteration row label actual row contents available:\n\nfollowing exercises working cars DataFrame. contains information cars per capita whether people drive right left seven countries world.\n\nWrite loop iterates rows cars iteration perform two print() calls: one print row label one print rows contents.\n\nWell done!\n","code":"for lab, row in brics.iterrows() :\n    ...\n# Import cars data\nimport pandas as pd\ncars = pd.read_csv('datasets/Intermediate-Python/cars.csv', index_col = 0)\n\n# Iterate over rows of cars\nfor lab, row in cars.iterrows() :\n    print(lab)\n    print(row)## US\n## cars_per_cap              809\n## country         United States\n## drives_right             True\n## Name: US, dtype: object\n## AUS\n## cars_per_cap          731\n## country         Australia\n## drives_right        False\n## Name: AUS, dtype: object\n## JAP\n## cars_per_cap      588\n## country         Japan\n## drives_right    False\n## Name: JAP, dtype: object\n## IN\n## cars_per_cap       18\n## country         India\n## drives_right    False\n## Name: IN, dtype: object\n## RU\n## cars_per_cap       200\n## country         Russia\n## drives_right      True\n## Name: RU, dtype: object\n## MOR\n## cars_per_cap         70\n## country         Morocco\n## drives_right       True\n## Name: MOR, dtype: object\n## EG\n## cars_per_cap       45\n## country         Egypt\n## drives_right     True\n## Name: EG, dtype: object"},{"path":"intermediate-python.html","id":"loop-over-dataframe-2","chapter":"Intermediate Python","heading":"Loop over DataFrame (2)","text":"\nrow data ’s generated iterrows() every run Pandas Series. format convenient print . Luckily, can easily select variables Pandas Series using square brackets:\n\nUsing iterators lab row, adapt code loop first iteration prints “US: 809”, second iteration “AUS: 731”, .\n\noutput form “country: cars_per_cap”. Make sure print exact string (correct spacing).\n\ncan use str() convert integer data string can print conjunction country label.\n\nSolid!\n","code":"for lab, row in brics.iterrows() :\n    print(row['country'])\n# Import cars data\nimport pandas as pd\ncars = pd.read_csv('datasets/Intermediate-Python/cars.csv', index_col = 0)\n\n# Adapt for loop\nfor lab, row in cars.iterrows() :\n    print(lab + \": \" + str(row['cars_per_cap']))## US: 809\n## AUS: 731\n## JAP: 588\n## IN: 18\n## RU: 200\n## MOR: 70\n## EG: 45"},{"path":"intermediate-python.html","id":"add-column-1","chapter":"Intermediate Python","heading":"Add column (1)","text":"\nvideo, Hugo showed add length country names brics DataFrame new column:\n\ncan similar things cars DataFrame.\n\nUse loop add new column, named COUNTRY, contains uppercase version country names “country” column. can use string method upper() .\n\nsee code worked, print cars. Don’t indent code, ’s part loop.\n\nGreat, might remember also easier way .\n","code":"for lab, row in brics.iterrows() :\n    brics.loc[lab, \"name_length\"] = len(row[\"country\"])\n# Import cars data\nimport pandas as pd\ncars = pd.read_csv('datasets/Intermediate-Python/cars.csv', index_col = 0)\n\n# Code for loop that adds COUNTRY column\nfor lab, row in cars.iterrows() :\n    cars.loc[lab, \"COUNTRY\"] = row[\"country\"].upper()\n\n# Print cars\nprint(cars)##      cars_per_cap        country  drives_right        COUNTRY\n## US            809  United States          True  UNITED STATES\n## AUS           731      Australia         False      AUSTRALIA\n## JAP           588          Japan         False          JAPAN\n## IN             18          India         False          INDIA\n## RU            200         Russia          True         RUSSIA\n## MOR            70        Morocco          True        MOROCCO\n## EG             45          Egypt          True          EGYPT"},{"path":"intermediate-python.html","id":"add-column-2","chapter":"Intermediate Python","heading":"Add column (2)","text":"\nUsing iterrows() iterate every observation Pandas DataFrame easy understand, efficient. every iteration, ’re creating new Pandas Series.\n\nwant add column DataFrame calling function another column, iterrows() method combination loop preferred way go. Instead, ’ll want use apply().\n\nCompare iterrows() version apply() version get result brics DataFrame:\n\ncan similar thing call upper() method every name country column. However, upper() method, ’ll need slightly different approach:\n\nReplace loop one-liner uses .apply(str.upper). call give result: column COUNTRY added cars, containing uppercase version country names.\n\nusual, print cars see fruits hard labor\n\nGreat job! ’s time blend everything ’ve learned together case-study. Head next chapter!\n","code":"for lab, row in brics.iterrows() :\n    brics.loc[lab, \"name_length\"] = len(row[\"country\"])\n\nbrics[\"name_length\"] = brics[\"country\"].apply(len)\n# Import cars data\nimport pandas as pd\ncars = pd.read_csv('datasets/Intermediate-Python/cars.csv', index_col = 0)\n\n# Use .apply(str.upper)\ncars[\"COUNTRY\"] = cars[\"country\"].apply(str.upper)\n\n# Print cars\nprint(cars)##      cars_per_cap        country  drives_right        COUNTRY\n## US            809  United States          True  UNITED STATES\n## AUS           731      Australia         False      AUSTRALIA\n## JAP           588          Japan         False          JAPAN\n## IN             18          India         False          INDIA\n## RU            200         Russia          True         RUSSIA\n## MOR            70        Morocco          True        MOROCCO\n## EG             45          Egypt          True          EGYPT"},{"path":"intermediate-python.html","id":"case-study-hacker-statistics","chapter":"Intermediate Python","heading":"Case Study: Hacker Statistics","text":"\nchapter allow apply concepts ’ve learned course. use hacker statistics calculate chances winning bet. Use random number generators, loops, Matplotlib gain competitive edge!\n","code":""},{"path":"intermediate-python.html","id":"random-numbers","chapter":"Intermediate Python","heading":"Random Numbers","text":"","code":""},{"path":"intermediate-python.html","id":"random-float","chapter":"Intermediate Python","heading":"Random float","text":"\nRandomness many uses science, art, statistics, cryptography, gaming, gambling, fields. ’re going use randomness simulate game.\n\nfunctionality need contained random package, sub-package numpy. exercise, ’ll using two functions package:\n\nseed(): sets random seed, results reproducible simulations. argument, takes integer choosing. call function, output generated.\n\nrand(): don’t specify arguments, generates random float zero one.\n\nImport numpy np.\n\nUse seed() set seed; argument, pass 123.\n\nGenerate first random float rand() print .\n\nGreat! Now let’s simulate dice.\n","code":"# Import numpy as np\nimport numpy as np\n\n# Set the seed\nnp.random.seed(123)\n\n# Generate and print random float\nprint(np.random.rand())## 0.6964691855978616"},{"path":"intermediate-python.html","id":"roll-the-dice","chapter":"Intermediate Python","heading":"Roll the dice","text":"\nprevious exercise, used rand(), generates random float 0 1.\n\nHugo explained video can just well use randint(), also function random package, generate integers randomly. following call generates integer 4, 5, 6 7 randomly. 8 included.\n\nNumPy already imported np seed set. Can roll dice?\n\nUse randint() appropriate arguments randomly generate integer 1, 2, 3, 4, 5 6. simulates dice. Print .\n\nRepeat outcome see second throw different. , print result.\n\nAlright! Time actually start coding things !\n","code":"import numpy as np\nnp.random.randint(4, 8)\n# Import numpy and set seed\nimport numpy as np\nnp.random.seed(123)\n\n# Use randint() to simulate a dice\nprint(np.random.randint(1,7))## 6# Use randint() again\nprint(np.random.randint(1,7))## 3"},{"path":"intermediate-python.html","id":"determine-your-next-move","chapter":"Intermediate Python","heading":"Determine your next move","text":"\nEmpire State Building bet, next move depends number eyes throw dice. can perfectly code -elif-else construct!\n\nsample code assumes ’re currently step 50. Can fill missing pieces finish script? numpy already imported np seed set 123, don’t worry anymore.\n\nRoll dice. Use randint() create variable dice.\n\nFinish -elif-else construct replacing ___:\n\ndice 1 2, go one step .\n\ndice 3, 4 5, go one step .\n\nElse, throw dice . number eyes number steps go .\n\nPrint dice step. Given value dice, step updated correctly?\n\nCool! threw 6, code else statement executed. threw , apparently threw 3, causing take three steps : ’re currently step 53.\n","code":"# NumPy is imported, seed is set\n\n# Starting step\nstep = 50\n\n# Roll the dice\ndice = np.random.randint(1,7)\n\n# Finish the control construct\nif dice <= 2 :\n    step = step - 1\nelif dice <= 5 :\n    step = step + 1\nelse :\n    step = step + np.random.randint(1,7)\n    \n# Print out dice and step\nprint(dice)## 5print(step)## 51"},{"path":"intermediate-python.html","id":"random-walk","chapter":"Intermediate Python","heading":"Random Walk","text":"","code":""},{"path":"intermediate-python.html","id":"the-next-step","chapter":"Intermediate Python","heading":"The next step","text":"\n, already written Python code determines next step based previous step. Now ’s time put code inside loop can simulate random walk.\n\nnumpy imported np.\n\nMake list random_walk contains first step, integer 0.\n\nFinish loop:\n\nloop run 100 times.\n\niteration, set step equal last element random_walk list. can use index -1 .\n\nNext, let -elif-else construct update step .\n\ncode appends step random_walk already coded.\n\nPrint random_walk.\n\nGood job! ’s still something wrong: level index 15 negative!\n","code":"# NumPy is imported, seed is set\n\n# Initialize random_walk\nrandom_walk = [0]\n\n# Complete the ___\nfor x in range(100) :\n    # Set step: last element in random_walk\n    step = random_walk[-1]\n\n    # Roll the dice\n    dice = np.random.randint(1,7)\n\n    # Determine next step\n    if dice <= 2:\n        step = step - 1\n    elif dice <= 5:\n        step = step + 1\n    else:\n        step = step + np.random.randint(1,7)\n\n    # append next_step to random_walk\n    random_walk.append(step)\n    \n# Print random_walk\nprint(random_walk)## [0, 1, 0, 1, 2, 3, 2, 1, 0, -1, -2, -3, -4, -5, -4, 1, 0, -1, 0, -1, 0, 1, 2, 3, 4, 3, 4, 3, 4, 5, 6, 7, 6, 10, 11, 10, 11, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 23, 28, 29, 33, 34, 33, 34, 35, 34, 35, 36, 38, 39, 40, 39, 38, 39, 40, 39, 38, 39, 40, 42, 41, 40, 41, 40, 41, 42, 43, 45, 44, 45, 46, 47, 48, 49, 48, 47, 48, 47, 48, 49, 48, 51, 52, 53, 54, 53, 54, 55, 59, 58]"},{"path":"intermediate-python.html","id":"how-low-can-you-go","chapter":"Intermediate Python","heading":"How low can you go?","text":"\nThings shaping nicely! already code calculates location Empire State Building 100 dice throws. However, ’s something haven’t thought - can’t go 0!\n\ntypical way solve problems like using max(). pass max() two arguments, biggest one gets returned. example, make sure variable x never goes 10 decrease , can use:\n\nUse max() similar way make sure step doesn’t go zero dice <= 2.\n\nHit Submit Answer check contents random_walk.\n\nlook closely output, ’ll see around index 15 step stays 0. ’re going zero anymore. Great!\n","code":"x = max(10, x - 1)\n# NumPy is imported, seed is set\n\n# Initialize random_walk\nrandom_walk = [0]\n\nfor x in range(100) :\n    step = random_walk[-1]\n    dice = np.random.randint(1,7)\n\n    if dice <= 2:\n        # Replace below: use max to make sure step can't go below 0\n        step = max(0, step - 1)\n    elif dice <= 5:\n        step = step + 1\n    else:\n        step = step + np.random.randint(1,7)\n\n    random_walk.append(step)\n    \nprint(random_walk)## [0, 0, 2, 1, 2, 4, 5, 6, 11, 10, 11, 12, 13, 14, 15, 14, 19, 20, 21, 22, 21, 20, 19, 18, 17, 18, 19, 20, 26, 25, 24, 23, 24, 25, 26, 25, 26, 27, 26, 31, 32, 31, 30, 29, 28, 29, 28, 27, 29, 30, 33, 34, 36, 37, 38, 39, 38, 37, 38, 39, 40, 41, 40, 41, 42, 43, 46, 47, 48, 47, 48, 47, 48, 49, 50, 54, 53, 52, 53, 54, 55, 54, 55, 54, 55, 57, 62, 61, 62, 63, 64, 65, 66, 67, 66, 67, 68, 69, 71, 73, 72]"},{"path":"intermediate-python.html","id":"visualize-the-walk","chapter":"Intermediate Python","heading":"Visualize the walk","text":"\nLet’s visualize random walk! Remember use matplotlib build line plot?\n\nfirst list pass mapped onto x axis second list mapped onto y axis.\n\npass one argument, Python know use index list map onto x axis, values list onto y axis.\n\nAdd lines code loop:\n\nImport matplotlib.pyplot plt.\n\nUse plt.plot() plot random_walk.\n\nFinish plt.show() actually display plot.\n\npretty cool! can clearly see random walk progressed.\n","code":"import matplotlib.pyplot as plt\nplt.plot(x, y)\nplt.show()\n# Import matplotlib.pyplot as plt\nimport matplotlib.pyplot as plt\n\n# NumPy is imported, seed is set\n\n# Initialization\nrandom_walk = [0]\n\nfor x in range(100) :\n    step = random_walk[-1]\n    dice = np.random.randint(1,7)\n\n    if dice <= 2:\n        step = max(0, step - 1)\n    elif dice <= 5:\n        step = step + 1\n    else:\n        step = step + np.random.randint(1,7)\n\n    random_walk.append(step)\n    \n# Plot random_walk\nplt.plot(random_walk)\n# Show the plot\nplt.show()"},{"path":"intermediate-python.html","id":"distribution","chapter":"Intermediate Python","heading":"Distribution","text":"","code":""},{"path":"intermediate-python.html","id":"simulate-multiple-walks","chapter":"Intermediate Python","heading":"Simulate multiple walks","text":"\nsingle random walk one thing, doesn’t tell good chance winning bet.\n\nget idea big chances reaching 60 steps, can repeatedly simulate random walk collect results. ’s exactly ’ll exercise.\n\nsample code already sets right direction. Another loop wrapped around code already wrote. ’s add bits pieces make sure results recorded correctly.\n\nNote: Don’t change anything initialization all_walks given. Setting number inside list cause exercise crash!\n\nFill specification loop random walk simulated 10 times.\n\nrandom_walk array entirely populated, append array all_walks list.\n\nFinally, top-level loop, print all_walks.\n\nWell done!\n","code":"# NumPy is imported; seed is set\n\n# Initialize all_walks (don't change this line)\nall_walks = []\n\n# Simulate random walk 10 times\nfor i in range(10) :\n\n    # Code from before\n    random_walk = [0]\n    for x in range(100) :\n        step = random_walk[-1]\n        dice = np.random.randint(1,7)\n\n        if dice <= 2:\n            step = max(0, step - 1)\n        elif dice <= 5:\n            step = step + 1\n        else:\n            step = step + np.random.randint(1,7)\n        random_walk.append(step)\n\n    # Append random_walk to all_walks\n    all_walks.append(random_walk)\n    \n# Print all_walks\nprint(all_walks)## [[0, 1, 2, 3, 4, 5, 6, 7, 8, 7, 8, 7, 6, 7, 6, 7, 6, 7, 8, 12, 13, 12, 18, 17, 16, 17, 16, 15, 16, 15, 19, 18, 19, 18, 19, 18, 19, 21, 20, 19, 18, 19, 18, 23, 24, 25, 24, 23, 24, 23, 24, 23, 28, 29, 28, 27, 26, 25, 26, 27, 31, 37, 38, 39, 40, 41, 40, 41, 43, 44, 45, 46, 45, 44, 45, 44, 45, 46, 47, 46, 47, 48, 49, 48, 47, 48, 49, 54, 55, 56, 61, 60, 61, 60, 61, 62, 63, 64, 63, 69, 68], [0, 1, 0, 0, 1, 5, 6, 7, 8, 9, 8, 7, 6, 5, 4, 5, 6, 7, 8, 9, 10, 9, 10, 11, 10, 11, 12, 15, 14, 15, 14, 15, 18, 19, 20, 21, 20, 19, 22, 23, 24, 25, 24, 23, 24, 27, 28, 33, 34, 33, 34, 33, 34, 33, 39, 38, 37, 38, 40, 39, 38, 37, 38, 39, 40, 41, 45, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 62, 61, 60, 61, 62, 61, 67, 66, 67, 68, 67, 66, 67, 66, 65, 71, 70, 69, 70, 71, 70, 69, 68, 67], [0, 1, 7, 8, 11, 12, 18, 19, 20, 26, 25, 31, 30, 31, 32, 33, 32, 38, 39, 38, 39, 38, 39, 38, 39, 38, 39, 43, 44, 46, 45, 46, 45, 44, 45, 44, 45, 44, 48, 52, 51, 50, 49, 50, 51, 55, 56, 57, 61, 60, 59, 58, 59, 60, 62, 61, 60, 61, 62, 64, 67, 72, 73, 72, 73, 74, 75, 76, 77, 76, 77, 78, 84, 83, 88, 87, 91, 90, 94, 93, 96, 97, 96, 97, 103, 102, 101, 100, 104, 103, 102, 103, 104, 103, 104, 105, 106, 107, 106, 105, 104], [0, 1, 0, 0, 4, 5, 7, 11, 17, 16, 15, 16, 17, 18, 17, 18, 17, 18, 19, 18, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 33, 32, 35, 36, 35, 34, 35, 36, 37, 36, 35, 34, 33, 34, 35, 36, 37, 38, 39, 40, 39, 40, 41, 43, 42, 43, 44, 47, 49, 50, 49, 48, 47, 46, 45, 46, 45, 46, 48, 49, 50, 49, 50, 49, 48, 49, 48, 47, 46, 47, 46, 45, 46, 47, 48, 50, 51, 52, 51, 50, 51, 57, 56, 57, 58, 63, 62, 63, 62, 63], [0, 1, 0, 1, 2, 8, 9, 10, 11, 10, 12, 13, 14, 15, 14, 15, 16, 17, 18, 17, 18, 17, 18, 19, 18, 19, 23, 24, 27, 28, 32, 33, 32, 33, 34, 33, 32, 37, 38, 39, 38, 37, 38, 39, 40, 39, 43, 42, 43, 44, 45, 46, 47, 48, 49, 48, 47, 46, 47, 48, 52, 53, 52, 53, 54, 53, 59, 60, 61, 62, 61, 62, 63, 66, 65, 66, 65, 64, 63, 64, 65, 67, 68, 69, 73, 74, 73, 72, 73, 74, 73, 72, 73, 74, 75, 74, 73, 74, 75, 76, 75], [0, 1, 2, 1, 0, 0, 1, 2, 3, 4, 5, 10, 14, 13, 14, 13, 12, 11, 12, 11, 12, 13, 12, 16, 17, 16, 17, 16, 15, 16, 15, 19, 20, 21, 22, 23, 24, 23, 24, 25, 26, 27, 28, 27, 32, 33, 34, 33, 34, 33, 34, 35, 34, 35, 40, 41, 42, 41, 42, 43, 44, 43, 44, 43, 44, 45, 44, 43, 42, 43, 44, 43, 42, 41, 42, 46, 47, 48, 49, 50, 51, 50, 51, 52, 51, 52, 57, 58, 57, 56, 57, 56, 55, 54, 58, 59, 60, 61, 60, 61, 62], [0, 1, 2, 3, 2, 1, 4, 3, 2, 1, 0, 1, 7, 8, 7, 8, 9, 8, 7, 8, 9, 10, 9, 13, 14, 13, 15, 16, 15, 16, 17, 18, 19, 20, 21, 20, 19, 20, 21, 20, 21, 22, 21, 20, 19, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 31, 32, 33, 34, 35, 36, 35, 34, 40, 41, 42, 41, 40, 39, 43, 44, 48, 47, 53, 54, 55, 59, 60, 59, 58, 59, 60, 61, 62, 61, 67, 68, 67, 71, 72, 71, 72, 71, 77, 83, 84, 83, 84, 85, 86, 87], [0, 1, 0, 3, 2, 4, 5, 11, 10, 11, 12, 11, 10, 11, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 23, 24, 25, 26, 25, 24, 23, 24, 23, 27, 26, 25, 26, 28, 29, 34, 33, 34, 35, 39, 38, 39, 40, 39, 38, 39, 40, 41, 40, 39, 38, 39, 38, 37, 38, 37, 36, 35, 36, 37, 36, 35, 34, 35, 36, 37, 36, 35, 36, 37, 38, 39, 38, 39, 38, 39, 40, 41, 42, 43, 48, 53, 52, 53, 54, 53, 54, 60, 59, 60, 59, 60], [0, 0, 1, 2, 3, 2, 1, 2, 3, 4, 3, 2, 1, 3, 4, 5, 4, 3, 2, 3, 4, 5, 4, 3, 4, 7, 12, 15, 16, 17, 23, 24, 25, 26, 25, 27, 32, 33, 34, 35, 36, 37, 38, 37, 38, 39, 40, 41, 42, 44, 48, 49, 50, 51, 52, 56, 61, 60, 59, 58, 57, 60, 61, 62, 63, 62, 61, 64, 65, 64, 63, 62, 63, 64, 65, 66, 65, 66, 65, 66, 67, 66, 67, 68, 69, 70, 71, 72, 73, 72, 71, 72, 73, 76, 77, 76, 75, 76, 77, 78, 83], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 4, 3, 2, 3, 4, 5, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 21, 22, 23, 24, 25, 26, 25, 24, 23, 24, 25, 26, 27, 29, 30, 31, 32, 34, 38, 37, 36, 35, 34, 35, 36, 37, 36, 35, 34, 33, 32, 31, 32, 36, 40, 41, 42, 41, 40, 41, 42, 43, 49, 50, 49, 48, 49, 48, 49, 48, 49, 50, 49, 50, 49, 48, 49, 50, 49, 50, 49, 50, 53, 54, 55, 56, 57, 56, 57, 58, 63, 62, 63, 64]]"},{"path":"intermediate-python.html","id":"visualize-all-walks","chapter":"Intermediate Python","heading":"Visualize all walks","text":"\nall_walks list lists: every sub-list represents single random walk. convert list lists NumPy array, can start making interesting plots! matplotlib.pyplot already imported plt.\n\nnested loop already coded - don’t worry . now, focus code comes loop.\n\nUse np.array() convert all_walks NumPy array, np_aw.\n\nTry use plt.plot() np_aw. Also include plt.show(). work box?\n\nTranspose np_aw calling np.transpose() np_aw. Call result np_aw_t. Now every row np_all_walks represents position 1 throw 10 random walks.\n\nUse plt.plot() plot np_aw_t; also include plt.show(). look better time?\n\nGood job! can clearly see different simulations random walk went. Transposing 2D NumPy array crucial; otherwise Python misunderstood.\n","code":"# numpy and matplotlib imported, seed set.\n\n# initialize and populate all_walks\nall_walks = []\nfor i in range(10) :\n    random_walk = [0]\n    for x in range(100) :\n        step = random_walk[-1]\n        dice = np.random.randint(1,7)\n        if dice <= 2:\n            step = max(0, step - 1)\n        elif dice <= 5:\n            step = step + 1\n        else:\n            step = step + np.random.randint(1,7)\n        random_walk.append(step)\n    all_walks.append(random_walk)\n\n# Convert all_walks to NumPy array: np_aw\nnp_aw = np.array(all_walks)\n\n# Plot np_aw and show\nplt.plot(np_aw)\nplt.show()# Clear the figure\nplt.clf()# Transpose np_aw: np_aw_t\nnp_aw_t = np.transpose(np_aw)\n\n# Plot np_aw_t and show\nplt.plot(np_aw_t)\nplt.show()"},{"path":"intermediate-python.html","id":"implement-clumsiness","chapter":"Intermediate Python","heading":"Implement clumsiness","text":"\nneatly written code , changing number times random walk simulated super-easy. simply update range() function top-level loop.\n\n’s still something forgot! ’re bit clumsy 0.1% chance falling . calls another random number generation. Basically, can generate random float 0 1. value less equal 0.001, reset step 0.\n\nChange range() function simulation performed 250 times.\n\nFinish condition step set 0 random float less equal 0.001. Use np.random.rand().\n\nSuperb! Look plot. 250 simulations ’re indeed taking deep dive !\n","code":"# numpy and matplotlib imported, seed set\n\n# Simulate random walk 250 times\nall_walks = []\nfor i in range(250) :\n    random_walk = [0]\n    for x in range(100) :\n        step = random_walk[-1]\n        dice = np.random.randint(1,7)\n        if dice <= 2:\n            step = max(0, step - 1)\n        elif dice <= 5:\n            step = step + 1\n        else:\n            step = step + np.random.randint(1,7)\n\n        # Implement clumsiness\n        if np.random.rand() <= 0.001 :\n            step = 0\n\n        random_walk.append(step)\n    all_walks.append(random_walk)\n\n# Create and plot np_aw_t\nnp_aw_t = np.transpose(np.array(all_walks))\nplt.plot(np_aw_t)\nplt.show()"},{"path":"intermediate-python.html","id":"plot-the-distribution","chapter":"Intermediate Python","heading":"Plot the distribution","text":"\nfancy visualizations put us sidetrack. still solve million-dollar problem: odds ’ll reach 60 steps high Empire State Building?\n\nBasically, want know end points random walks ’ve simulated. end points certain distribution can visualize histogram.\n\nNote code taking long run, might plotting histogram wrong data!\n\nmake sure ’ve got enough simulations, go crazy. Simulate random walk 500 times.\n\nnp_aw_t, select last row. contains endpoint 500 random walks ’ve simulated. Store NumPy array ends.\n\nUse plt.hist() build histogram ends. Don’t forget plt.show() display plot.\n\nGreat job! look histogram; think chances ?\n","code":"# numpy and matplotlib imported, seed set\n\n# Simulate random walk 500 times\nall_walks = []\nfor i in range(500) :\n    random_walk = [0]\n    for x in range(100) :\n        step = random_walk[-1]\n        dice = np.random.randint(1,7)\n        if dice <= 2:\n            step = max(0, step - 1)\n        elif dice <= 5:\n            step = step + 1\n        else:\n            step = step + np.random.randint(1,7)\n        if np.random.rand() <= 0.001 :\n            step = 0\n        random_walk.append(step)\n    all_walks.append(random_walk)\n\n# Create and plot np_aw_t\nnp_aw_t = np.transpose(np.array(all_walks))\n\n# Select last row from np_aw_t: ends\nends = np_aw_t[-1,:]\n\n# Plot histogram of ends, display plot\nplt.hist(ends)## (array([ 14.,  13.,  13.,  28.,  97., 151., 103.,  61.,  19.,   1.]), array([  2. ,  14.8,  27.6,  40.4,  53.2,  66. ,  78.8,  91.6, 104.4,\n##        117.2, 130. ]), <BarContainer object of 10 artists>)plt.show()"},{"path":"intermediate-python.html","id":"calculate-the-odds","chapter":"Intermediate Python","heading":"Calculate the odds","text":"\nhistogram previous exercise created NumPy array ends, contains 500 integers. integer represents end point random walk. calculate chance end point greater equal 60, can count number integers ends greater equal 60 divide number 500, total number simulations.\n\nWell , ’s estimated chance ’ll reach 60 steps high play Empire State Building game? ends array everything need; ’s available Python session can make calculations IPython Shell.\n48.8%76.6%78.4%95.9%\nCorrect! Seems like pretty high chance winning bet!\n","code":"# edited/added\nsum(ends>60)/len(ends)## 0.76"},{"path":"python-data-science-toolbox-part-1.html","id":"python-data-science-toolbox-part-1","chapter":"Python Data Science Toolbox (Part 1)","heading":"Python Data Science Toolbox (Part 1)","text":"Hugo Bowne-Anderson\nHugo data scientist, educator, writer podcaster formerly DataCamp. main interests promoting data & AI literacy, helping spread data skills organizations society amateur stand comedy NYC. want know likes talk , definitely check DataFramed, DataCamp podcast, hosted produced.\nCourse Description\n’s time push forward develop Python chops even . tons fantastic functions Python library ecosystem. However, data scientist, ’ll constantly need write functions solve problems dictated data. learn art function writing first Python Data Science Toolbox course. ’ll come course able write custom functions, complete multiple parameters multiple return values, along default arguments variable-length arguments. ’ll gain insight scoping Python able write lambda functions handle errors function writing practice. ’ll wrap chapter using new skills write functions analyze Twitter DataFrames.\n","code":""},{"path":"python-data-science-toolbox-part-1.html","id":"writing-your-own-functions","chapter":"Python Data Science Toolbox (Part 1)","heading":"Writing your own functions","text":"\nchapter, ’ll learn write simple functions, well functions accept multiple arguments return multiple values. ’ll also opportunity apply new skills questions commonly encountered data scientists.\n","code":""},{"path":"python-data-science-toolbox-part-1.html","id":"user-defined-functions","chapter":"Python Data Science Toolbox (Part 1)","heading":"User-defined functions","text":"","code":""},{"path":"python-data-science-toolbox-part-1.html","id":"strings-in-python","chapter":"Python Data Science Toolbox (Part 1)","heading":"Strings in Python","text":"\nvideo, learned another standard Python datatype, strings. Recall represent textual data. assign string ‘DataCamp’ variable company, execute:\n\n’ve also learned use operations + * strings. Unlike numeric types ints floats, + operator concatenates strings together, * concatenates multiple copies string together. exercise, use + * operations strings answer question . Execute following code shell:\n\nvalues object1, object2, object3, respectively?\nobject1 contains “data + analysis + visualization”, object2 contains “1*3”, object3 contains 13.object1 contains “data+analysis+visualization”, object2 contains 3, object3 contains “13”.object1 contains “dataanalysisvisualization”, object2 contains 3, object3 contains “111”.\nCorrect!\n","code":"company = 'DataCamp'\nobject1 = \"data\" + \"analysis\" + \"visualization\"\nobject2 = 1 * 3\nobject3 = \"1\" * 3\n"},{"path":"python-data-science-toolbox-part-1.html","id":"recapping-built-in-functions","chapter":"Python Data Science Toolbox (Part 1)","heading":"Recapping built-in functions","text":"\nvideo, Hugo briefly examined return behavior built-functions print() str(). , use functions examine return values. variable x preloaded exercise. Run code console. Pay close attention results answer question follows.\n\nAssign str(x) variable y1: y1 = str(x)\n\nAssign print(x) variable y2: y2 = print(x)\n\nCheck types variables x, y1, y2.\n\ntypes x, y1, y2?\nstr types.x float, y1 float, y2 str.x float, y1 str, y2 NoneType.NoneType types.\nCorrect! important remember assigning variable y2 function prints value return value result variable y2 type NoneType.\n","code":"# edited/added\nx = 4.89\ny1 = str(x)\ny2 = print(x)## 4.89type(x),type(y1),type(y2)## (<class 'float'>, <class 'str'>, <class 'NoneType'>)"},{"path":"python-data-science-toolbox-part-1.html","id":"write-a-simple-function","chapter":"Python Data Science Toolbox (Part 1)","heading":"Write a simple function","text":"\nlast video, Hugo described basics define function. now write function!\n\nDefine function, shout(), simply prints string three exclamation marks ‘!!!’ end. code square() function wrote earlier found . can use pattern define shout().\n\nNote function body indented 4 spaces already . Function bodies need indented consistent number spaces choice 4 common.\n\ncourse touches lot concepts may forgotten, ever need quick refresher, download Python Data Science Cheat Sheet keep handy!\n\nComplete function header adding appropriate function name, shout.\n\nfunction body, concatenate string, ‘congratulations’ another string, ‘!!!’. Assign result shout_word.\n\nPrint value shout_word.\n\nCall shout function.\n\nGreat work!\n","code":"def square():\n    new_value = 4 ** 2\n    return new_value\n# Define the function shout\ndef shout():\n    \"\"\"Print a string with three exclamation marks\"\"\"\n    # Concatenate the strings: shout_word\n    shout_word = 'congratulations' + '!!!'\n\n    # Print shout_word\n    print(shout_word)\n\n# Call shout\nshout()## congratulations!!!"},{"path":"python-data-science-toolbox-part-1.html","id":"single-parameter-functions","chapter":"Python Data Science Toolbox (Part 1)","heading":"Single-parameter functions","text":"\nCongratulations! successfully defined called function! ’s pretty cool.\n\nprevious exercise, defined called function shout(), printed string concatenated ‘!!!’.\nnow update shout() adding parameter can accept process string argument passed . Also note shout(word), part header specifies function name parameter(s), known signature function. may encounter term wild!\n\nComplete function header adding parameter name, word.\n\nAssign result concatenating word ‘!!!’ shout_word.\n\nPrint value shout_word.\n\nCall shout() function, passing string, ‘congratulations’.\n\nGreat work!\n","code":"# Define shout with the parameter, word\ndef shout(word):\n    \"\"\"Print a string with three exclamation marks\"\"\"\n    # Concatenate the strings: shout_word\n    shout_word = word + '!!!'\n\n    # Print shout_word\n    print(shout_word)\n    \n# Call shout with the string 'congratulations'\nshout('congratulations')## congratulations!!!"},{"path":"python-data-science-toolbox-part-1.html","id":"functions-that-return-single-values","chapter":"Python Data Science Toolbox (Part 1)","heading":"Functions that return single values","text":"\n’re getting good ! Try hand another modification shout() function now returns single value instead printing within function. Recall return keyword lets return values functions. Parts function shout(), wrote earlier, shown. Returning values generally desirable printing , saw earlier, print() call assigned variable type NoneType.\n\nfunction body, concatenate string word ‘!!!’ assign shout_word.\n\nReplace print() statement appropriate return statement.\n\nCall shout() function, passing string, ‘congratulations’, assigning call variable, yell.\n\ncheck yell contains value returned shout(), print value yell.\n\nGreat work! made sense assign output shout(‘congratulations’) variable yell function shout actually returns value, merely print one.\n","code":"# Define shout with the parameter, word\ndef shout(word):\n    \"\"\"Return a string with three exclamation marks\"\"\"\n    # Concatenate the strings: shout_word\n    shout_word = word + '!!!'\n\n    # Replace print with return\n    return shout_word\n  \n# Pass 'congratulations' to shout: yell\nyell = shout('congratulations')\n\n# Print yell\nprint(yell)## congratulations!!!"},{"path":"python-data-science-toolbox-part-1.html","id":"multiple-parameters-and-return-values","chapter":"Python Data Science Toolbox (Part 1)","heading":"Multiple parameters and return values","text":"","code":""},{"path":"python-data-science-toolbox-part-1.html","id":"functions-with-multiple-parameters","chapter":"Python Data Science Toolbox (Part 1)","heading":"Functions with multiple parameters","text":"\nHugo discussed use multiple parameters defining functions last lecture. now going use ’ve learned modify shout() function . , modify shout() accept two arguments. Parts function shout(), wrote earlier, shown.\n\nModify function header accepts two parameters, word1 word2, order.\n\nConcatenate word1 word2 ‘!!!’ assign shout1 shout2, respectively.\n\nConcatenate shout1 shout2 together, order, assign new_shout.\n\nPass strings ‘congratulations’ ‘’, order, call shout(). Assign return value yell.\n\nGreat work!\n","code":"# Define shout with parameters word1 and word2\ndef shout(word1, word2):\n    \"\"\"Concatenate strings with three exclamation marks\"\"\"\n    # Concatenate word1 with '!!!': shout1\n    shout1 = word1 + '!!!'\n    \n    # Concatenate word2 with '!!!': shout2\n    shout2 = word2 + '!!!'\n    \n    # Concatenate shout1 with shout2: new_shout\n    new_shout = shout1 + shout2\n\n    # Return new_shout\n    return new_shout\n  \n# Pass 'congratulations' and 'you' to shout: yell\nyell = shout('congratulations', 'you')\n\n# Print yell\nprint(yell)## congratulations!!!you!!!"},{"path":"python-data-science-toolbox-part-1.html","id":"a-brief-introduction-to-tuples","chapter":"Python Data Science Toolbox (Part 1)","heading":"A brief introduction to tuples","text":"\nAlongside learning functions, ’ve also learned tuples! , practice ’ve learned tuples: construct, unpack, access tuple elements. Recall Hugo unpacked tuple even_nums video:\n\n, b, c = even_nums\n\nthree-element tuple named nums preloaded exercise. completing script, perform following:\n\nPrint value nums IPython shell. Note elements tuple.\n\nIPython shell, try change first element nums value 2 assignment: nums[0] = 2. happens?\n\nUnpack nums variables num1, num2, num3.\n\nConstruct new tuple, even_nums composed elements nums, 1st element replaced value, 2.\n\nGreat work!\n","code":"# edited/added\nnums = (3,4,6)\n\n# Unpack nums into num1, num2, and num3\nnum1, num2, num3 = nums\n\n# Construct even_nums\neven_nums = (2, num2, num3)"},{"path":"python-data-science-toolbox-part-1.html","id":"functions-that-return-multiple-values","chapter":"Python Data Science Toolbox (Part 1)","heading":"Functions that return multiple values","text":"\nprevious exercise, constructed tuples, assigned tuples variables, unpacked tuples. return multiple values function using tuples. Let’s now update shout() function return multiple values. Instead returning just one string, return two strings string !!! concatenated .\n\nNote return statement return x, y result return (x, y): former actually packs x y tuple hood!\n\nModify function header function name now shout_all, accepts two parameters, word1 word2, order.\n\nConcatenate string ‘!!!’ word1 word2 assign shout1 shout2, respectively.\n\nConstruct tuple shout_words, composed shout1 shout2.\n\nCall shout_all() strings ‘congratulations’ ‘’ assign result yell1 yell2 (remember, shout_all() returns 2 variables!).\n\nGreat work!\n","code":"# Define shout_all with parameters word1 and word2\ndef shout_all(word1, word2):\n    \"\"\"Return a tuple of strings\"\"\"\n    # Concatenate word1 with '!!!': shout1\n    shout1 = word1 + '!!!'\n    \n    # Concatenate word2 with '!!!': shout2\n    shout2 = word2 + '!!!'\n    \n    # Construct a tuple with shout1 and shout2: shout_words\n    shout_words = (shout1, shout2)\n\n    # Return shout_words\n    return shout_words\n  \n# Pass 'congratulations' and 'you' to shout_all(): yell1, yell2\nyell1, yell2 = shout_all('congratulations', 'you')\n\n# Print yell1 and yell2\nprint(yell1)## congratulations!!!print(yell2)## you!!!"},{"path":"python-data-science-toolbox-part-1.html","id":"bringing-it-all-together","chapter":"Python Data Science Toolbox (Part 1)","heading":"Bringing it all together","text":"","code":""},{"path":"python-data-science-toolbox-part-1.html","id":"bringing-it-all-together-1","chapter":"Python Data Science Toolbox (Part 1)","heading":"Bringing it all together (1)","text":"\n’ve got first taste writing functions previous exercises. ’ve learned add parameters function definitions, return value multiple values tuples, call functions ’ve defined.\n\nfollowing exercise, bring together concepts apply simple data science problem. load dataset develop functionalities extract simple insights data.\n\nexercise, goal recall load dataset DataFrame. dataset contains Twitter data iterate entries column build dictionary keys names languages values number tweets given language. file tweets.csv available current directory.\n\naware real data Twitter always risk may contain profanity offensive content (exercise, following exercises also use real Twitter data).\n\nImport pandas package alias pd.\n\nImport file ‘tweets.csv’ using pandas function read_csv(). Assign resulting DataFrame df.\n\nComplete loop iterating col, ‘lang’ column DataFrame df.\n\nComplete bodies -else statements loop: key dictionary langs_count, add 1 value corresponding key dictionary, else add key langs_count set corresponding value 1. Use loop variable entry code.\n\nGreat work!\n","code":"# Import pandas\nimport pandas as pd\n\n# Import Twitter data as DataFrame: df\ndf = pd.read_csv('datasets/Python-Data-Science-Toolbox-Part-1/tweets.csv') # edited/added\n\n# Initialize an empty dictionary: langs_count\nlangs_count = {}\n\n# Extract column from DataFrame: col\ncol = df['lang']\n\n# Iterate over lang column in DataFrame\nfor entry in col:\n\n    # If the language is in langs_count, add 1\n    if entry in langs_count.keys():\n        langs_count[entry] += 1\n    # Else add the language to langs_count, set the value to 1\n    else:\n        langs_count[entry] = 1\n\n# Print the populated dictionary\nprint(langs_count)## {'en': 97, 'et': 1, 'und': 2}"},{"path":"python-data-science-toolbox-part-1.html","id":"bringing-it-all-together-2","chapter":"Python Data Science Toolbox (Part 1)","heading":"Bringing it all together (2)","text":"\nGreat job! ’ve now defined functionality iterating entries column building dictionary keys names languages values number tweets given language.\n\nexercise, define function functionality developed previous exercise, return resulting dictionary within function, call function appropriate arguments.\n\nconvenience, pandas package imported pd ‘tweets.csv’ file imported tweets_df variable.\n\nDefine function count_entries(), two parameters. first parameter df DataFrame second col_name column name.\n\nComplete bodies -else statements loop: key dictionary langs_count, add 1 current value, else add key langs_count set value 1. Use loop variable entry code.\n\nReturn langs_count dictionary inside count_entries() function.\n\nCall count_entries() function passing tweets_df name column, ‘lang’. Assign result call variable result.\n\nGreat work!\n","code":"# Define count_entries()\ndef count_entries(df, col_name):\n    \"\"\"Return a dictionary with counts of \n    occurrences as value for each key.\"\"\"\n\n    # Initialize an empty dictionary: langs_count\n    langs_count = {}\n    \n    # Extract column from DataFrame: col\n    col = df[col_name]\n\n    # Iterate over lang column in DataFrame\n    for entry in col:\n\n        # If the language is in langs_count, add 1\n        if entry in langs_count.keys():\n            langs_count[entry] += 1\n        # Else add the language to langs_count, set the value to 1\n        else:\n            langs_count[entry] = 1\n\n    # Return the langs_count dictionary\n    return langs_count\n  \n# edited/added\ntweets_df = pd.read_csv('datasets/Python-Data-Science-Toolbox-Part-1/tweets.csv')\n\n# Call count_entries(): result\nresult = count_entries(tweets_df, 'lang')\n\n# Print the result\nprint(result)## {'en': 97, 'et': 1, 'und': 2}"},{"path":"python-data-science-toolbox-part-1.html","id":"default-arguments-variable-length-arguments-and-scope","chapter":"Python Data Science Toolbox (Part 1)","heading":"Default arguments, variable-length arguments and scope","text":"\nchapter, ’ll learn write functions default arguments user doesn’t always need specify , variable-length arguments can pass arbitrary number arguments functions. ’ll also learn essential concept scope.\n","code":""},{"path":"python-data-science-toolbox-part-1.html","id":"scope-and-user-defined-functions","chapter":"Python Data Science Toolbox (Part 1)","heading":"Scope and user-defined functions","text":"","code":""},{"path":"python-data-science-toolbox-part-1.html","id":"pop-quiz-on-understanding-scope","chapter":"Python Data Science Toolbox (Part 1)","heading":"Pop quiz on understanding scope","text":"\nexercise, practice ’ve learned scope functions. variable num predefined 5, alongside following function definitions:\n\nTry calling func1() func2() shell, answer following questions:\n\nvalues printed call func1() func2()?\n\nvalue num global scope calling func1() func2()?\nfunc1() prints 3, func2() prints 6, value num global scope 3.func1() prints 3, func2() prints 3, value num global scope 3.func1() prints 3, func2() prints 10, value num global scope 10.func1() prints 3, func2() prints 10, value num global scope 6.\nCorrect!\n","code":"def func1():\n    num = 3\n    print(num)\n\ndef func2():\n    global num\n    double_num = num * 2\n    num = 6\n    print(double_num)\n"},{"path":"python-data-science-toolbox-part-1.html","id":"the-keyword-global","chapter":"Python Data Science Toolbox (Part 1)","heading":"The keyword global","text":"\nLet’s work mastery scope. exercise, use keyword global within function alter value variable defined global scope.\n\nUse keyword global alter object team global scope.\n\nChange value team global scope string “justice league”. Assign result team.\n\nHit Submit button see executing newly defined function change_team() changes value name team!\n\nGreat work!\n","code":"# Create a string: team\nteam = \"teen titans\"\n\n# Define change_team()\ndef change_team():\n    \"\"\"Change the value of the global variable team.\"\"\"\n\n    # Use team in global scope\n    global team\n\n    # Change the value of team in global: team\n    team = \"justice league\"\n    \n# Print team\nprint(team)## teen titans# Call change_team()\nchange_team()\n\n# Print team\nprint(team)## justice league"},{"path":"python-data-science-toolbox-part-1.html","id":"pythons-built-in-scope","chapter":"Python Data Science Toolbox (Part 1)","heading":"Python’s built-in scope","text":"\n’re going check Python’s built-scope, really just built-module called builtins. However, query builtins, ’ll need import builtins ‘name builtins built …, ’m serious!’ (Learning Python, 5th edition, Mark Lutz).\nexecuting import builtins IPython Shell, execute dir(builtins) print list names module builtins. look ’ll see bunch names ’ll recognize! following names module builtins?\n‘sum’‘range’‘array’‘tuple’\ngot !\n","code":""},{"path":"python-data-science-toolbox-part-1.html","id":"nested-functions","chapter":"Python Data Science Toolbox (Part 1)","heading":"Nested functions","text":"","code":""},{"path":"python-data-science-toolbox-part-1.html","id":"nested-functions-i","chapter":"Python Data Science Toolbox (Part 1)","heading":"Nested Functions I","text":"\n’ve learned last video nesting functions within functions. One reason ’d like avoid writing computations within functions repeatedly. ’s nothing new defining nested functions: simply define regular function def embed inside another function!\n\nexercise, inside function three_shouts(), define nested function inner() concatenates string object !!!. three_shouts() returns tuple three elements, string concatenated !!! using inner(). Go !\n\nComplete function header nested function function name inner() single parameter word.\n\nComplete return value: element tuple call inner(), passing parameters three_shouts() arguments call.\n\nGreat work!\n","code":"# Define three_shouts\ndef three_shouts(word1, word2, word3):\n    \"\"\"Returns a tuple of strings\n    concatenated with '!!!'.\"\"\"\n\n    # Define inner\n    def inner(word):\n        \"\"\"Returns a string concatenated with '!!!'.\"\"\"\n        return word + '!!!'\n\n    # Return a tuple of strings\n    return (inner(word1), inner(word2), inner(word3))\n\n# Call three_shouts() and print\nprint(three_shouts('a', 'b', 'c'))## ('a!!!', 'b!!!', 'c!!!')"},{"path":"python-data-science-toolbox-part-1.html","id":"nested-functions-ii","chapter":"Python Data Science Toolbox (Part 1)","heading":"Nested Functions II","text":"\nGreat job, ’ve just nested function within another function. One pretty cool reason nesting functions idea closure. means nested inner function remembers state enclosing scope called. Thus, anything defined locally enclosing scope available inner function even outer function finished execution.\n\nLet’s move forward ! exercise, complete definition inner function inner_echo() call echo() couple times, different argument. Complete exercise see output !\n\nComplete function header inner function function name inner_echo() single parameter word1.\n\nComplete function echo() returns inner_echo.\n\ncalled echo(), passing 2 argument, assigned resulting function twice. job call echo(), passing 3 argument. Assign resulting function thrice.\n\nHit Submit call twice() thrice() print results.\n\nGreat work!\n","code":"# Define echo\ndef echo(n):\n    \"\"\"Return the inner_echo function.\"\"\"\n\n    # Define inner_echo\n    def inner_echo(word1):\n        \"\"\"Concatenate n copies of word1.\"\"\"\n        echo_word = word1 * n\n        return echo_word\n\n    # Return inner_echo\n    return inner_echo\n  \n# Call echo: twice\ntwice = echo(2)\n\n# Call echo: thrice\nthrice = echo(3)\n\n# Call twice() and thrice() then print\nprint(twice('hello'), thrice('hello'))## hellohello hellohellohello"},{"path":"python-data-science-toolbox-part-1.html","id":"the-keyword-nonlocal-and-nested-functions","chapter":"Python Data Science Toolbox (Part 1)","heading":"The keyword nonlocal and nested functions","text":"\nLet’s work mastery scope! exercise, use keyword nonlocal within nested function alter value variable defined enclosing scope.\n\nAssign echo_word string word, concatenated .\n\nUse keyword nonlocal alter value echo_word enclosing scope.\n\nAlter echo_word echo_word concatenated ‘!!!’.\n\nCall function echo_shout(), passing single argument ‘hello’.\n\nQuite something, nonlocal keyword!\n","code":"# Define echo_shout()\ndef echo_shout(word):\n    \"\"\"Change the value of a nonlocal variable\"\"\"\n    \n    # Concatenate word with itself: echo_word\n    echo_word = word*2\n    \n    # Print echo_word\n    print(echo_word)\n    \n    # Define inner function shout()\n    def shout():\n        \"\"\"Alter a variable in the enclosing scope\"\"\"\n        \n        # Use echo_word in nonlocal scope\n        nonlocal echo_word\n        \n        # Change echo_word to echo_word concatenated with '!!!'\n        echo_word = echo_word + '!!!'\n    \n    # Call function shout()\n    shout()\n    \n    # Print echo_word\n    print(echo_word)\n    \n# Call function echo_shout() with argument 'hello'\necho_shout('hello')## hellohello\n## hellohello!!!"},{"path":"python-data-science-toolbox-part-1.html","id":"default-and-flexible-arguments","chapter":"Python Data Science Toolbox (Part 1)","heading":"Default and flexible arguments","text":"","code":""},{"path":"python-data-science-toolbox-part-1.html","id":"functions-with-one-default-argument","chapter":"Python Data Science Toolbox (Part 1)","heading":"Functions with one default argument","text":"\nprevious chapter, ’ve learned define functions one parameter calling functions passing required number arguments. last video, Hugo built idea showing define functions default arguments. practice skill exercise writing function uses default argument calling function couple times.\n\nComplete function header function name shout_echo. accepts argument word1 default argument echo default value 1, order.\n\nUse * operator concatenate echo copies word1. Assign result echo_word.\n\nCall shout_echo() just string, “Hey”. Assign result no_echo.\n\nCall shout_echo() string “Hey” value 5 default argument, echo. Assign result with_echo.\n\nGreat work!\n","code":"# Define shout_echo\ndef shout_echo(word1, echo=1):\n    \"\"\"Concatenate echo copies of word1 and three\n     exclamation marks at the end of the string.\"\"\"\n\n    # Concatenate echo copies of word1 using *: echo_word\n    echo_word = word1 * echo\n\n    # Concatenate '!!!' to echo_word: shout_word\n    shout_word = echo_word + '!!!'\n\n    # Return shout_word\n    return shout_word\n  \n# Call shout_echo() with \"Hey\": no_echo\nno_echo = shout_echo(\"Hey\")\n\n# Call shout_echo() with \"Hey\" and echo=5: with_echo\nwith_echo = shout_echo(\"Hey\", echo=5)\n\n# Print no_echo and with_echo\nprint(no_echo)## Hey!!!print(with_echo)## HeyHeyHeyHeyHey!!!"},{"path":"python-data-science-toolbox-part-1.html","id":"functions-with-multiple-default-arguments","chapter":"Python Data Science Toolbox (Part 1)","heading":"Functions with multiple default arguments","text":"\n’ve now defined function uses default argument - don’t stop just yet! now try hand defining function one default argument calling function various ways.\n\ndefining function, call supplying values default arguments function. Additionally, call function passing value one default arguments - see changes output function!\n\nComplete function header function name shout_echo. accepts argument word1, default argument echo default value 1 default argument intense default value False, order.\n\nbody statement, make string object echo_word upper case applying method .upper() .\n\nCall shout_echo() string, “Hey”, value 5 echo value True intense. Assign result with_big_echo.\n\nCall shout_echo() string “Hey” value True intense. Assign result big_no_echo.\n\nGreat work!\n","code":"# Define shout_echo\ndef shout_echo(word1, echo=1, intense=False):\n    \"\"\"Concatenate echo copies of word1 and three\n    exclamation marks at the end of the string.\"\"\"\n\n    # Concatenate echo copies of word1 using *: echo_word\n    echo_word = word1 * echo\n\n    # Make echo_word uppercase if intense is True\n    if intense is True:\n        # Make uppercase and concatenate '!!!': echo_word_new\n        echo_word_new = echo_word.upper() + '!!!'\n    else:\n        # Concatenate '!!!' to echo_word: echo_word_new\n        echo_word_new = echo_word + '!!!'\n\n    # Return echo_word_new\n    return echo_word_new\n  \n# Call shout_echo() with \"Hey\", echo=5 and intense=True: with_big_echo\nwith_big_echo = shout_echo(\"Hey\", echo=5, intense=True)\n\n# Call shout_echo() with \"Hey\" and intense=True: big_no_echo\nbig_no_echo = shout_echo(\"Hey\", intense=True)\n\n# Print with_big_echo and big_no_echo\nprint(with_big_echo)## HEYHEYHEYHEYHEY!!!print(big_no_echo)## HEY!!!"},{"path":"python-data-science-toolbox-part-1.html","id":"functions-with-variable-length-arguments-args","chapter":"Python Data Science Toolbox (Part 1)","heading":"Functions with variable-length arguments (*args)","text":"\nFlexible arguments enable pass variable number arguments function. exercise, practice defining function accepts variable number string arguments.\n\nfunction define gibberish() can accept variable number string values. return value single string composed string arguments concatenated together order passed function call. call function single string argument see output changes another call using one string argument. Recall previous video , within function definition, args tuple.\n\nComplete function header function name gibberish. accepts single flexible argument *args.\n\nInitialize variable hodgepodge empty string.\n\nReturn variable hodgepodge end function body.\n\nCall gibberish() single string, “luke”. Assign result one_word.\n\nHit Submit button call gibberish() multiple arguments print value Shell.\n\nGreat work!\n","code":"# Define gibberish\ndef gibberish(*args):\n    \"\"\"Concatenate strings in *args together.\"\"\"\n\n    # Initialize an empty string: hodgepodge\n    hodgepodge = ''\n\n    # Concatenate the strings in args\n    for word in args:\n        hodgepodge += word\n\n    # Return hodgepodge\n    return hodgepodge\n  \n# Call gibberish() with one string: one_word\none_word = gibberish(\"luke\")\n\n# Call gibberish() with five strings: many_words\nmany_words = gibberish(\"luke\", \"leia\", \"han\", \"obi\", \"darth\")\n\n# Print one_word and many_words\nprint(one_word)## lukeprint(many_words)## lukeleiahanobidarth"},{"path":"python-data-science-toolbox-part-1.html","id":"functions-with-variable-length-keyword-arguments-kwargs","chapter":"Python Data Science Toolbox (Part 1)","heading":"Functions with variable-length keyword arguments (**kwargs)","text":"\nLet’s push ’ve learned flexible arguments - ’ve used *args, ’re now going use **kwargs! makes **kwargs different allows pass variable number keyword arguments functions. Recall previous video , within function definition, kwargs dictionary.\n\nunderstand idea better, ’re going use **kwargs exercise define function accepts variable number keyword arguments. function simulates simple status report system prints status character movie.\n\nComplete function header function name report_status. accepts single flexible argument **kwargs.\n\nIterate key-value pairs kwargs print keys values, separated colon ‘:’.\n\nfirst call report_status(), pass following keyword-value pairs: name=“luke”, affiliation=“jedi” status=“missing”.\n\nsecond call report_status(), pass following keyword-value pairs: name=“anakin”, affiliation=“sith lord” status=“deceased”.\n\nGreat work!\n","code":"# Define report_status\ndef report_status(**kwargs):\n    \"\"\"Print out the status of a movie character.\"\"\"\n\n    print(\"\\nBEGIN: REPORT\\n\")\n\n    # Iterate over the key-value pairs of kwargs\n    for key, value in kwargs.items():\n        # Print out the keys and values, separated by a colon ':'\n        print(key + \": \" + value)\n\n    print(\"\\nEND REPORT\")\n    \n# First call to report_status()\nreport_status(name=\"luke\", affiliation=\"jedi\", status=\"missing\")## \n## BEGIN: REPORT\n## \n## name: luke\n## affiliation: jedi\n## status: missing\n## \n## END REPORT# Second call to report_status()\nreport_status(name=\"anakin\", affiliation=\"sith lord\", status=\"deceased\")## \n## BEGIN: REPORT\n## \n## name: anakin\n## affiliation: sith lord\n## status: deceased\n## \n## END REPORT"},{"path":"python-data-science-toolbox-part-1.html","id":"bringing-it-all-together-3","chapter":"Python Data Science Toolbox (Part 1)","heading":"Bringing it all together","text":"","code":""},{"path":"python-data-science-toolbox-part-1.html","id":"bringing-it-all-together-1-1","chapter":"Python Data Science Toolbox (Part 1)","heading":"Bringing it all together (1)","text":"\nRecall Bringing together exercise previous chapter simple Twitter analysis developing function counts many tweets certain languages. output function dictionary language keys counts tweets language value.\n\nexercise, generalize Twitter language analysis previous chapter. including default argument takes column name.\n\nconvenience, pandas imported pd ‘tweets.csv’ file imported DataFrame tweets_df. Parts code previous work also provided.\n\nComplete function header supplying parameter DataFrame df parameter col_name default value ‘lang’ DataFrame column name.\n\nCall count_entries() passing tweets_df DataFrame column name ‘lang’. Assign result result1. Note since ‘lang’ default value col_name parameter, don’t specify .\n\nCall count_entries() passing tweets_df DataFrame column name ‘source’. Assign result result2.\n\nGreat work!\n","code":"# Define count_entries()\ndef count_entries(df, col_name='lang'):\n    \"\"\"Return a dictionary with counts of\n    occurrences as value for each key.\"\"\"\n\n    # Initialize an empty dictionary: cols_count\n    cols_count = {}\n    \n    # Extract column from DataFrame: col\n    col = df[col_name]\n\n    # Iterate over the column in DataFrame\n    for entry in col:\n\n        # If entry is in cols_count, add 1\n        if entry in cols_count.keys():\n            cols_count[entry] += 1\n\n        # Else add the entry to cols_count, set the value to 1\n        else:\n            cols_count[entry] = 1\n\n    # Return the cols_count dictionary\n    return cols_count\n  \n# Call count_entries(): result1\nresult1 = count_entries(tweets_df, col_name='lang')\n\n# Call count_entries(): result2\nresult2 = count_entries(tweets_df, col_name='source')\n\n# Print result1 and result2\nprint(result1)## {'en': 97, 'et': 1, 'und': 2}print(result2)## {'<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client<\/a>': 24, '<a href=\"http://www.facebook.com/twitter\" rel=\"nofollow\">Facebook<\/a>': 1, '<a href=\"http://twitter.com/download/android\" rel=\"nofollow\">Twitter for Android<\/a>': 26, '<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone<\/a>': 33, '<a href=\"http://www.twitter.com\" rel=\"nofollow\">Twitter for BlackBerry<\/a>': 2, '<a href=\"http://www.google.com/\" rel=\"nofollow\">Google<\/a>': 2, '<a href=\"http://twitter.com/#!/download/ipad\" rel=\"nofollow\">Twitter for iPad<\/a>': 6, '<a href=\"http://linkis.com\" rel=\"nofollow\">Linkis.com<\/a>': 2, '<a href=\"http://rutracker.org/forum/viewforum.php?f=93\" rel=\"nofollow\">newzlasz<\/a>': 2, '<a href=\"http://ifttt.com\" rel=\"nofollow\">IFTTT<\/a>': 1, '<a href=\"http://www.myplume.com/\" rel=\"nofollow\">Plume\\xa0for\\xa0Android<\/a>': 1}"},{"path":"python-data-science-toolbox-part-1.html","id":"bringing-it-all-together-2-1","chapter":"Python Data Science Toolbox (Part 1)","heading":"Bringing it all together (2)","text":"\nWow, ’ve just generalized Twitter language analysis previous chapter include default argument column name. ’re now going generalize function one step allowing user pass flexible argument, , case, many column names user like!\n\n, convenience, pandas imported pd ‘tweets.csv’ file imported DataFrame tweets_df. Parts code previous work also provided.\n\nComplete function header supplying parameter DataFrame df flexible argument *args.\n\nComplete loop within function definition loop occurs tuple args.\n\nCall count_entries() passing tweets_df DataFrame column name ‘lang’. Assign result result1.\n\nCall count_entries() passing tweets_df DataFrame column names ‘lang’ ‘source’. Assign result result2.\n\nGreat work!\n","code":"# Define count_entries()\ndef count_entries(df, *args):\n    \"\"\"Return a dictionary with counts of\n    occurrences as value for each key.\"\"\"\n    \n    #Initialize an empty dictionary: cols_count\n    cols_count = {}\n    \n    # Iterate over column names in args\n    for col_name in args:\n    \n        # Extract column from DataFrame: col\n        col = df[col_name]\n    \n        # Iterate over the column in DataFrame\n        for entry in col:\n    \n            # If entry is in cols_count, add 1\n            if entry in cols_count.keys():\n                cols_count[entry] += 1\n    \n            # Else add the entry to cols_count, set the value to 1\n            else:\n                cols_count[entry] = 1\n\n    # Return the cols_count dictionary\n    return cols_count\n  \n# Call count_entries(): result1\nresult1 = count_entries(tweets_df, 'lang')\n\n# Call count_entries(): result2\nresult2 = count_entries(tweets_df, 'lang', 'source')\n\n# Print result1 and result2\nprint(result1)## {'en': 97, 'et': 1, 'und': 2}print(result2)## {'en': 97, 'et': 1, 'und': 2, '<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client<\/a>': 24, '<a href=\"http://www.facebook.com/twitter\" rel=\"nofollow\">Facebook<\/a>': 1, '<a href=\"http://twitter.com/download/android\" rel=\"nofollow\">Twitter for Android<\/a>': 26, '<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone<\/a>': 33, '<a href=\"http://www.twitter.com\" rel=\"nofollow\">Twitter for BlackBerry<\/a>': 2, '<a href=\"http://www.google.com/\" rel=\"nofollow\">Google<\/a>': 2, '<a href=\"http://twitter.com/#!/download/ipad\" rel=\"nofollow\">Twitter for iPad<\/a>': 6, '<a href=\"http://linkis.com\" rel=\"nofollow\">Linkis.com<\/a>': 2, '<a href=\"http://rutracker.org/forum/viewforum.php?f=93\" rel=\"nofollow\">newzlasz<\/a>': 2, '<a href=\"http://ifttt.com\" rel=\"nofollow\">IFTTT<\/a>': 1, '<a href=\"http://www.myplume.com/\" rel=\"nofollow\">Plume\\xa0for\\xa0Android<\/a>': 1}"},{"path":"python-data-science-toolbox-part-1.html","id":"lambda-functions-and-error-handling","chapter":"Python Data Science Toolbox (Part 1)","heading":"Lambda functions and error-handling","text":"\nLearn lambda functions, allow write functions quickly fly. ’ll also practice handling errors functions, essential skill. , apply new skills answer data science questions.\n","code":""},{"path":"python-data-science-toolbox-part-1.html","id":"lambda-functions","chapter":"Python Data Science Toolbox (Part 1)","heading":"Lambda functions","text":"","code":""},{"path":"python-data-science-toolbox-part-1.html","id":"pop-quiz-on-lambda-functions","chapter":"Python Data Science Toolbox (Part 1)","heading":"Pop quiz on lambda functions","text":"\nexercise, practice writing simple lambda function calling function. Recall know lambda functions answer following questions:\n\nwrite lambda function add_bangs adds three exclamation points ‘!!!’ end string ?\n\ncall add_bangs argument ‘hello’?\n\nmay use IPython shell test code.\nlambda function definition : add_bangs = (+ ‘!!!’), function call : add_bangs(‘hello’).lambda function definition : add_bangs = (lambda : + ‘!!!’), function call : add_bangs(‘hello’).lambda function definition : (lambda : + ‘!!!’) = add_bangs, function call : add_bangs(‘hello’).\nCorrect!\n","code":""},{"path":"python-data-science-toolbox-part-1.html","id":"writing-a-lambda-function-you-already-know","chapter":"Python Data Science Toolbox (Part 1)","heading":"Writing a lambda function you already know","text":"\nfunction definitions simple enough can converted lambda function. , write less lines code, pretty awesome come handy, especially ’re writing maintaining big programs. exercise, use know lambda functions convert function simple task lambda function. Take look function definition:\n\nfunction echo_word takes 2 parameters: string value, word1 integer value, echo. returns string concatenation echo copies word1. task convert simple function lambda function.\n\nDefine lambda function echo_word using variables word1 echo. Replicate original function definition echo_word() .\n\nCall echo_word() string argument ‘hey’ value 5, order. Assign call result.\n\nGreat work!\n","code":"def echo_word(word1, echo):\n    \"\"\"Concatenate echo copies of word1.\"\"\"\n    words = word1 * echo\n    return words\n# Define echo_word as a lambda function: echo_word\necho_word = (lambda word1, echo: word1 * echo)\n\n# Call echo_word: result\nresult = echo_word('hey', 5)\n\n# Print result\nprint(result)## heyheyheyheyhey"},{"path":"python-data-science-toolbox-part-1.html","id":"map-and-lambda-functions","chapter":"Python Data Science Toolbox (Part 1)","heading":"Map() and lambda functions","text":"\nfar, ’ve used lambda functions write short, simple functions well redefine functions simple functionality. best use case lambda functions, however, want simple functionalities anonymously embedded within larger expressions. means functionality stored environment, unlike function defined def. understand idea better, use lambda function context map() function.\n\nRecall video map() applies function object, list. , can use lambda functions define function map() use process object. example:\n\ncan see lambda function, raises value power 2, passed map() alongside list numbers, nums. map object results call map() stored result. now practice use lambda functions map(). exercise, map functionality add_bangs() function defined previous exercises list strings.\n\nmap() call, pass lambda function concatenates string ‘!!!’ string item; also pass list strings, spells. Assign resulting map object shout_spells.\n\nConvert shout_spells list print list.\n\nGreat work!\n","code":"nums = [2, 4, 6, 8, 10]\n\nresult = map(lambda a: a ** 2, nums)\n# Create a list of strings: spells\nspells = ['protego', 'accio', 'expecto patronum', 'legilimens']\n\n# Use map() to apply a lambda function over spells: shout_spells\nshout_spells = map(lambda item: item + '!!!', spells)\n\n# Convert shout_spells to a list: shout_spells_list\nshout_spells_list = list(shout_spells)\n\n# Print the result\nprint(shout_spells_list)## ['protego!!!', 'accio!!!', 'expecto patronum!!!', 'legilimens!!!']"},{"path":"python-data-science-toolbox-part-1.html","id":"filter-and-lambda-functions","chapter":"Python Data Science Toolbox (Part 1)","heading":"Filter() and lambda functions","text":"\nprevious exercise, used lambda functions anonymously embed operation within map(). practice exercise using lambda function filter(), may new ! function filter() offers way filter elements list don’t satisfy certain criteria.\n\ngoal exercise use filter() create, input list strings, new list contains strings 6 characters.\n\nfilter() call, pass lambda function list strings, fellowship. lambda function check number characters string member greater 6; use len() function . Assign resulting filter object result.\n\nConvert result list print list.\n\nGreat work!\n","code":"# Create a list of strings: fellowship\nfellowship = ['frodo', 'samwise', 'merry', 'pippin', 'aragorn', 'boromir', 'legolas', 'gimli', 'gandalf']\n\n# Use filter() to apply a lambda function over fellowship: result\nresult = filter(lambda member: len(member) > 6, fellowship)\n\n# Convert result to a list: result_list\nresult_list = list(result)\n\n# Print result_list\nprint(result_list)## ['samwise', 'aragorn', 'boromir', 'legolas', 'gandalf']"},{"path":"python-data-science-toolbox-part-1.html","id":"reduce-and-lambda-functions","chapter":"Python Data Science Toolbox (Part 1)","heading":"Reduce() and lambda functions","text":"\n’re getting good using lambda functions! ’s one function add repertoire skills. reduce() function useful performing computation list , unlike map() filter(), returns single value result. use reduce(), must import functools module.\n\nRemember gibberish() exercises back?\n\ngibberish() simply takes list strings argument returns, single-value result, concatenation strings. exercise, replicate functionality using reduce() lambda function concatenates strings together.\n\nImport reduce function functools module.\n\nreduce() call, pass lambda function takes two string arguments item1 item2 concatenates ; also pass list strings, stark. Assign result result. first argument reduce() lambda function second argument list stark.\n\nGreat work!\n","code":"# Define gibberish\ndef gibberish(*args):\n    \"\"\"Concatenate strings in *args together.\"\"\"\n    hodgepodge = ''\n    for word in args:\n        hodgepodge += word\n    return hodgepodge\n# Import reduce from functools\nfrom functools import reduce\n\n# Create a list of strings: stark\nstark = ['robb', 'sansa', 'arya', 'brandon', 'rickon']\n\n# Use reduce() to apply a lambda function over stark: result\nresult = reduce(lambda item1, item2: item1 + item2, stark)\n\n# Print the result\nprint(result)## robbsansaaryabrandonrickon"},{"path":"python-data-science-toolbox-part-1.html","id":"introduction-to-error-handling","chapter":"Python Data Science Toolbox (Part 1)","heading":"Introduction to error handling","text":"","code":""},{"path":"python-data-science-toolbox-part-1.html","id":"pop-quiz-about-errors","chapter":"Python Data Science Toolbox (Part 1)","heading":"Pop quiz about errors","text":"\nvideo, Hugo talked errors happen functions supplied arguments unable work . exercise, identify function call raises error type error raised.\n\nTake look following function calls len():\n\nfunction calls raises error type error raised?\ncall len(‘beast every man stirs put sword hand.’) raises TypeError.call len([‘robb’, ‘sansa’, ‘arya’, ‘eddard’, ‘jon’]) raises IndexError.call len(525600) raises TypeError.call len((‘jaime’, ‘cersei’, ‘tywin’, ‘tyrion’, ‘joffrey’)) raises NameError.\nCorrect!\n","code":"len('There is a beast in every man and it stirs when you put a sword in his hand.')\n\nlen(['robb', 'sansa', 'arya', 'eddard', 'jon'])\n\nlen(525600)\n\nlen(('jaime', 'cersei', 'tywin', 'tyrion', 'joffrey'))\n"},{"path":"python-data-science-toolbox-part-1.html","id":"error-handling-with-try-except","chapter":"Python Data Science Toolbox (Part 1)","heading":"Error handling with try-except","text":"\ngood practice writing functions also anticipating ways people (, accidentally misuse function) might use function defined.\n\nprevious exercise, saw len() function able handle input arguments strings, lists, tuples, int type ones raises appropriate error error message encounters invalid input arguments. One way exception handling try-except block.\n\nexercise, define function well use try-except block handling cases incorrect input arguments passed function.\n\nRecall shout_echo() function defined previous exercises; parts function definition provided sample code. goal complete exception handling code function definition provide appropriate error message raising error.\n\nInitialize variables echo_word shout_words empty strings.\n\nAdd keywords try except appropriate locations exception handling block.\n\nUse * operator concatenate echo copies word1. Assign result echo_word.\n\nConcatenate string ‘!!!’ echo_word. Assign result shout_words.\n\nGreat work!\n","code":"# Define shout_echo\ndef shout_echo(word1, echo=1):\n    \"\"\"Concatenate echo copies of word1 and three\n    exclamation marks at the end of the string.\"\"\"\n\n    # Initialize empty strings: echo_word, shout_words\n    echo_word = ''\n    shout_words = ''\n\n    # Add exception handling with try-except\n    try:\n        # Concatenate echo copies of word1 using *: echo_word\n        echo_word = word1 * echo\n\n        # Concatenate '!!!' to echo_word: shout_words\n        shout_words = echo_word + '!!!'\n    except:\n        # Print error message\n        print(\"word1 must be a string and echo must be an integer.\")\n\n    # Return shout_words\n    return shout_words\n\n# Call shout_echo\nshout_echo(\"particle\", echo=\"accelerator\")## word1 must be a string and echo must be an integer.\n## ''"},{"path":"python-data-science-toolbox-part-1.html","id":"error-handling-by-raising-an-error","chapter":"Python Data Science Toolbox (Part 1)","heading":"Error handling by raising an error","text":"\nAnother way raise error using raise. exercise, add raise statement shout_echo() function defined raise error message value supplied user echo argument less 0.\n\ncall shout_echo() uses valid argument values. test see raise statement works, simply change value echo argument negative value. Don’t forget change back valid values move next exercise!\n\nComplete statement checking value echo less 0.\n\nbody statement, add raise statement raises ValueError message ‘echo must greater equal 0’ value supplied user echo less 0.\n\nGreat work!\n","code":"# Define shout_echo\ndef shout_echo(word1, echo=1):\n    \"\"\"Concatenate echo copies of word1 and three\n    exclamation marks at the end of the string.\"\"\"\n\n    # Raise an error with raise\n    if echo < 0:\n        raise ValueError('echo must be greater than or equal to 0')\n\n    # Concatenate echo copies of word1 using *: echo_word\n    echo_word = word1 * echo\n\n    # Concatenate '!!!' to echo_word: shout_word\n    shout_word = echo_word + '!!!'\n\n    # Return shout_word\n    return shout_word\n\n# Call shout_echo\nshout_echo(\"particle\", echo=5)## 'particleparticleparticleparticleparticle!!!'"},{"path":"python-data-science-toolbox-part-1.html","id":"bringing-it-all-together-4","chapter":"Python Data Science Toolbox (Part 1)","heading":"Bringing it all together","text":"","code":""},{"path":"python-data-science-toolbox-part-1.html","id":"bringing-it-all-together-1-2","chapter":"Python Data Science Toolbox (Part 1)","heading":"Bringing it all together (1)","text":"\nawesome! now learned write anonymous functions using lambda, pass lambda functions arguments functions map(), filter(), reduce(), well write errors output custom error messages within functions. now put together learnings good use working Twitter dataset. practicing new error handling skills; exercise, write lambda function use filter() select retweets, , tweets begin string ‘RT’.\n\nhelp accomplish , Twitter data imported DataFrame, tweets_df. Go !\n\nfilter() call, pass lambda function sequence tweets strings, tweets_df[‘text’]. lambda function check first 2 characters tweet x ‘RT’. Assign resulting filter object result. get first 2 characters tweet x, use x[0:2]. check equality, use Boolean filter ==.\n\nConvert result list print list.\n\nGreat work!\n","code":"# Select retweets from the Twitter DataFrame: result\nresult = filter(lambda x: x[0:2] == 'RT', tweets_df['text'])\n\n# Create list from filter object result: res_list\nres_list = list(result)\n\n# Print all retweets in res_list\nfor tweet in res_list:\n    print(tweet)## RT @bpolitics: .@krollbondrating's Christopher Whalen says Clinton is the weakest Dem candidate in 50 years https://t.co/pLk7rvoRSn https:/…\n## RT @HeidiAlpine: @dmartosko Cruz video found.....racing from the scene.... #cruzsexscandal https://t.co/zuAPZfQDk3\n## RT @AlanLohner: The anti-American D.C. elites despise Trump for his America-first foreign policy. Trump threatens their gravy train. https:…\n## RT @BIackPplTweets: Young Donald trump meets his neighbor  https://t.co/RFlu17Z1eE\n## RT @trumpresearch: @WaitingInBagdad @thehill Trump supporters have selective amnisia.\n## RT @HouseCracka: 29,000+ PEOPLE WATCHING TRUMP LIVE ON ONE STREAM!!!\n## \n## https://t.co/7QCFz9ehNe\n## RT @urfavandtrump: RT for Brendon Urie\n## Fav for Donald Trump https://t.co/PZ5vS94lOg\n## RT @trapgrampa: This is how I see #Trump every time he speaks. https://t.co/fYSiHNS0nT\n## RT @trumpresearch: @WaitingInBagdad @thehill Trump supporters have selective amnisia.\n## RT @Pjw20161951: NO KIDDING: #SleazyDonald just attacked Scott Walker for NOT RAISING TAXES in WI! #LyinTrump\n## #NeverTrump  #CruzCrew  https…\n## RT @urfavandtrump: RT for Brendon Urie\n## Fav for Donald Trump https://t.co/PZ5vS94lOg\n## RT @ggreenwald: The media spent all day claiming @SusanSarandon said she might vote for Trump. A total fabrication, but whatever... https:/…\n## RT @Pjw20161951: NO KIDDING: #SleazyDonald just attacked Scott Walker for NOT RAISING TAXES in WI! #LyinTrump\n## #NeverTrump  #CruzCrew  https…\n## RT @trapgrampa: This is how I see #Trump every time he speaks. https://t.co/fYSiHNS0nT\n## RT @mitchellvii: So let me get this straight.  Any reporter can assault Mr Trump at any time and Corey can do nothing?  Michelle is clearly…\n## RT @paulbenedict7: How #Trump Sacks RINO Strongholds by Hitting Positions Held by Dems and GOP https://t.co/D7ulnAJhis   #tcot #PJNET https…\n## RT @DRUDGE_REPORT: VIDEO:  Trump emotional moment with Former Miss Wisconsin who has terminal illness... https://t.co/qt06aG9inT\n## RT @ggreenwald: The media spent all day claiming @SusanSarandon said she might vote for Trump. A total fabrication, but whatever... https:/…\n## RT @DennisApgar: Thank God I seen Trump at first stop in Wisconsin media doesn't know how great he is, advice watch live streaming https://…\n## RT @paulbenedict7: How #Trump Sacks RINO Strongholds by Hitting Positions Held by Dems and GOP https://t.co/D7ulnAJhis   #tcot #PJNET https…\n## RT @DRUDGE_REPORT: VIDEO:  Trump emotional moment with Former Miss Wisconsin who has terminal illness... https://t.co/qt06aG9inT\n## RT @DennisApgar: Thank God I seen Trump at first stop in Wisconsin media doesn't know how great he is, advice watch live streaming https://…\n## RT @mitchellvii: So let me get this straight.  Any reporter can assault Mr Trump at any time and Corey can do nothing?  Michelle is clearly…\n## RT @sciam: Trump's idiosyncratic patterns of speech are why people tend either to love or hate him https://t.co/QXwquVgs3c https://t.co/P9N…\n## RT @Norsu2: Nightmare WI poll for Ted Cruz has Kasich surging: Trump 29, Kasich 27, Cruz 25. https://t.co/lJsgbLYY1P #NeverTrump\n## RT @thehill: WATCH: Protester pepper-sprayed point blank at Trump rally https://t.co/B5f65Al9ld https://t.co/skAfByXuQc\n## RT @sciam: Trump's idiosyncratic patterns of speech are why people tend either to love or hate him https://t.co/QXwquVgs3c https://t.co/P9N…\n## RT @ggreenwald: The media spent all day claiming @SusanSarandon said she might vote for Trump. A total fabrication, but whatever... https:/…\n## RT @DebbieStout5: Wow! Last I checked it was just 12 points &amp; that wasn't more than a day ago. Oh boy Trump ppl might want to rethink🤔 http…\n## RT @tyleroakley: i'm a messy bitch, but at least i'm not voting for trump\n## RT @vandives: Trump supporters r tired of justice NOT being served. There's no justice anymore. Hardworking Americans get screwed. That's n…\n## RT @AP: BREAKING: Trump vows to stand by campaign manager charged with battery, says he does not discard people.\n## RT @AP: BREAKING: Trump vows to stand by campaign manager charged with battery, says he does not discard people.\n## RT @urfavandtrump: RT for Jerrie (Little Mix)\n## Fav for Donald Trump https://t.co/nEVxElW6iG\n## RT @urfavandtrump: RT for Jerrie (Little Mix)\n## Fav for Donald Trump https://t.co/nEVxElW6iG\n## RT @NoahCRothman: When Walker was fighting for reforms, Trump was defending unions and collective bargaining privileges https://t.co/e1UWNN…\n## RT @RedheadAndRight: Report: Secret Service Says Michelle Fields Touched Trump https://t.co/c5c2sD8VO2\n## \n## This is the only article you will n…\n## RT @AIIAmericanGirI: VIDEO=&gt; Anti-Trump Protester SLUGS Elderly Trump Supporter in the Face\n## https://t.co/GeEryMDuDY\n## RT @NoahCRothman: When Walker was fighting for reforms, Trump was defending unions and collective bargaining privileges https://t.co/e1UWNN…\n## RT @JusticeRanger1: @realDonaldTrump @Pudingtane @DanScavino @GOP @infowars @EricTrump \n## URGENT PUBLIC TRUMP ALERT:\n## COVERT KILL MEANS https:…\n## RT @AIIAmericanGirI: VIDEO=&gt; Anti-Trump Protester SLUGS Elderly Trump Supporter in the Face\n## https://t.co/GeEryMDuDY\n## RT @RedheadAndRight: Report: Secret Service Says Michelle Fields Touched Trump https://t.co/c5c2sD8VO2\n## \n## This is the only article you will n…\n## RT @JusticeRanger1: @realDonaldTrump @Pudingtane @DanScavino @GOP @infowars @EricTrump \n## URGENT PUBLIC TRUMP ALERT:\n## COVERT KILL MEANS https:…\n## RT @Schneider_CM: Trump says nobody had ever heard of executive orders before Obama started signing them. Never heard of the Emancipation P…\n## RT @RonBasler1: @DavidWhitDennis @realDonaldTrump @tedcruz \n## \n## CRUZ SCREWS HOOKERS\n## \n## CRUZ / CLINTON\n## RT @DonaldsAngel: Former Ms. WI just said that she is terminally ill but because of Trump pageant, her 7 yr. old son has his college educat…\n## RT @Schneider_CM: Trump says nobody had ever heard of executive orders before Obama started signing them. Never heard of the Emancipation P…\n## RT @DonaldsAngel: Former Ms. WI just said that she is terminally ill but because of Trump pageant, her 7 yr. old son has his college educat…\n## RT @Dodarey: @DR8801 @SykesCharlie Charlie, let's see you get a straight \"yes\" or \"no\" answer from Cruz a/b being unfaithful to his wife @T…\n## RT @RonBasler1: @DavidWhitDennis @realDonaldTrump @tedcruz \n## \n## CRUZ SCREWS HOOKERS\n## \n## CRUZ / CLINTON\n## RT @RockCliffOne: Remember when the idea of a diabolical moron holding the world hostage was an idea for a funny movie? #Trump #GOP https:/…\n## RT @HillaryClinton: \"Every day, another Republican bemoans the rise of Donald Trump... but [he] didn’t come out of nowhere.\" —Hillary\n## https…\n## RT @Dodarey: @DR8801 @SykesCharlie Charlie, let's see you get a straight \"yes\" or \"no\" answer from Cruz a/b being unfaithful to his wife @T…\n## RT @HillaryClinton: \"Every day, another Republican bemoans the rise of Donald Trump... but [he] didn’t come out of nowhere.\" —Hillary\n## https…\n## RT @RockCliffOne: Remember when the idea of a diabolical moron holding the world hostage was an idea for a funny movie? #Trump #GOP https:/…\n## RT @immigrant4trump: @immigrant4trump msm, cable news attacking trump all day, from 8am to 10pm today, then the reruns come on, repeating t…\n## RT @immigrant4trump: @immigrant4trump msm, cable news attacking trump all day, from 8am to 10pm today, then the reruns come on, repeating t…\n## RT @GlendaJazzey: Donald Trump’s Campaign Financing Dodge, @rrotunda https://t.co/L8flI4lswG via @VerdictJustia\n## RT @TUSK81: LOUDER FOR THE PEOPLE IN THE BACK https://t.co/hlPVyNLXzx\n## RT @loopzoop: Well...put it back https://t.co/8Yb7BDT5VM\n## RT @claytoncubitt: Stop asking Bernie supporters if they’ll vote for Hillary against Trump. We got a plan to beat Trump already. Called Ber…\n## RT @akaMaude13: Seriously can't make this up. What a joke. #NeverTrump  https://t.co/JkTx6mdRgC"},{"path":"python-data-science-toolbox-part-1.html","id":"bringing-it-all-together-2-2","chapter":"Python Data Science Toolbox (Part 1)","heading":"Bringing it all together (2)","text":"\nSometimes, make mistakes calling functions - even ones made . don’t fret! exercise, improve previous work count_entries() function last chapter adding try-except block . allow function provide helpful message user calls count_entries() function provides column name isn’t DataFrame.\n\n, convenience, pandas imported pd ‘tweets.csv’ file imported DataFrame tweets_df. Parts code previous work also provided.\n\nAdd try block function called correct arguments, processes DataFrame returns dictionary results.\n\nAdd except block function called incorrectly, displays following error message: ‘DataFrame ’ + col_name + ’ column.’.\n\nGreat work!\n","code":"# Define count_entries()\ndef count_entries(df, col_name='lang'):\n    \"\"\"Return a dictionary with counts of\n    occurrences as value for each key.\"\"\"\n\n    # Initialize an empty dictionary: cols_count\n    cols_count = {}\n\n    # Add try block\n    try: \n        # Extract column from DataFrame: col\n        col = df[col_name]\n        \n        # Iterate over the column in DataFrame\n        for entry in col:\n    \n            # If entry is in cols_count, add 1\n            if entry in cols_count.keys():\n                cols_count[entry] += 1\n            # Else add the entry to cols_count, set the value to 1\n            else:\n                cols_count[entry] = 1\n    \n        # Return the cols_count dictionary\n        return cols_count\n\n    # Add except block\n    except:\n        print('The DataFrame does not have a ' + col_name + ' column.')\n\n# Call count_entries(): result1\nresult1 = count_entries(tweets_df, 'lang')\n\n# Print result1\nprint(result1)## {'en': 97, 'et': 1, 'und': 2}"},{"path":"python-data-science-toolbox-part-1.html","id":"bringing-it-all-together-3-1","chapter":"Python Data Science Toolbox (Part 1)","heading":"Bringing it all together (3)","text":"\nprevious exercise, built function count_entries() add try-except block. users get helpful messages calling count_entries() function providing column name isn’t DataFrame. exercise, ’ll instead raise ValueError case user provides column name isn’t DataFrame.\n\n, convenience, pandas imported pd ‘tweets.csv’ file imported DataFrame tweets_df. Parts code previous work also provided.\n\ncol_name column DataFrame df, raise ValueError ‘DataFrame ’ + col_name + ’ column.’.\n\nCall new function count_entries() analyze ‘lang’ column tweets_df. Store result result1.\n\nPrint result1. done , hit ‘Submit Answer’ check result. next exercise, ’ll see raises necessary ValueErrors.\n\nGreat work!\n","code":"# Define count_entries()\ndef count_entries(df, col_name='lang'):\n    \"\"\"Return a dictionary with counts of\n    occurrences as value for each key.\"\"\"\n    \n    # Raise a ValueError if col_name is NOT in DataFrame\n    if col_name not in df.columns:\n        raise ValueError('The DataFrame does not have a ' + col_name + ' column.')\n\n    # Initialize an empty dictionary: cols_count\n    cols_count = {}\n    \n    # Extract column from DataFrame: col\n    col = df[col_name]\n    \n    # Iterate over the column in DataFrame\n    for entry in col:\n\n        # If entry is in cols_count, add 1\n        if entry in cols_count.keys():\n            cols_count[entry] += 1\n            # Else add the entry to cols_count, set the value to 1\n        else:\n            cols_count[entry] = 1\n        \n        # Return the cols_count dictionary\n    return cols_count\n  \n# Call count_entries(): result1\nresult1 = count_entries(tweets_df, 'lang')\n\n# Print result1\nprint(result1)## {'en': 97, 'et': 1, 'und': 2}"},{"path":"python-data-science-toolbox-part-1.html","id":"bringing-it-all-together-testing-your-error-handling-skills","chapter":"Python Data Science Toolbox (Part 1)","heading":"Bringing it all together: testing your error handling skills","text":"\njust written error handling count_entries() function , user passes function column (2nd argument) contained DataFrame (1st argument), ValueError thrown. ’re now going play function: loaded pre-exercise code, DataFrame tweets_df. Try calling count_entries(tweets_df, ‘lang’) confirm function behaves . call count_entries(tweets_df, ‘lang1’): last line output?\n‘ValueError: DataFrame requested column.’‘ValueError: DataFrame lang1 column.’‘TypeError: DataFrame requested column.’\nCorrect!\n","code":""},{"path":"python-data-science-toolbox-part-1.html","id":"congratulations","chapter":"Python Data Science Toolbox (Part 1)","heading":"Congratulations!","text":"","code":""},{"path":"python-data-science-toolbox-part-1.html","id":"congratulations-1","chapter":"Python Data Science Toolbox (Part 1)","heading":"Congratulations!","text":"Well done. ’re now well way Pythonista Data Science ninja.","code":""},{"path":"python-data-science-toolbox-part-1.html","id":"what-youve-learned","chapter":"Python Data Science Toolbox (Part 1)","heading":"What you’ve learned:","text":"’re now able write functions Python accept single multiple arguments can return many values please. ’re also adept using default flexible arguments keyword arguments. ’ve gained insight scoping Python, can write lambda functions handle errors function writing practice. ’ve also gained invaluable practice using techniques write functions useful Data Science context. come long way developing practice budding Pythonista Data Scientist.","code":""},{"path":"python-data-science-toolbox-part-1.html","id":"theres-more-to-learn","chapter":"Python Data Science Toolbox (Part 1)","heading":"There’s more to learn!","text":"basic skills need learn Python valuable working Data Scientist many ’ll cover sequel course ’re finding still thirsty Pythonista Data Science chops, ’d head right now. ’ll learn list comprehensions, allow wrangle data lists create lists, tool utilized Data Scientists working Python. ’ll also learn iterators, already seen context loops without necessarily known . Iterators everywhere PythonLand , put simply, allow rapidly iterate Data Science protocols procedures sets objects; couple cool functionalities PythonLand ’ll encounter sequel course, conclude entire chapter devoted case study ’ll apply time time techniques learnt courses.","code":""},{"path":"python-data-science-toolbox-part-1.html","id":"lets-practice","chapter":"Python Data Science Toolbox (Part 1)","heading":"Let’s practice!","text":"’m looking forward seeing congratulations !","code":""},{"path":"python-data-science-toolbox-part-2.html","id":"python-data-science-toolbox-part-2","chapter":"Python Data Science Toolbox (Part 2)","heading":"Python Data Science Toolbox (Part 2)","text":"Hugo Bowne-Anderson\nHugo data scientist, educator, writer podcaster formerly DataCamp. main interests promoting data & AI literacy, helping spread data skills organizations society amateur stand comedy NYC. want know likes talk , definitely check DataFramed, DataCamp podcast, hosted produced.\nCourse Description\nsecond Python Data Science Toolbox course, ’ll continue build Python data science skills. First, ’ll learn iterators, objects already encountered context loops. ’ll learn list comprehensions, extremely handy tools data scientists working Python. ’ll end course working case study ’ll apply techniques learned parts course.\n","code":""},{"path":"python-data-science-toolbox-part-2.html","id":"using-iterators-in-pythonland","chapter":"Python Data Science Toolbox (Part 2)","heading":"Using iterators in PythonLand","text":"\n’ll learn iterators iterables, already worked writing loops. ’ll learn handy functions allow effectively work iterators. ’ll finish chapter use case pertinent world data science dealing large amounts data—case, data Twitter load chunks using iterators.\n","code":""},{"path":"python-data-science-toolbox-part-2.html","id":"introduction-to-iterators","chapter":"Python Data Science Toolbox (Part 2)","heading":"Introduction to iterators","text":"","code":""},{"path":"python-data-science-toolbox-part-2.html","id":"iterators-vs.-iterables","chapter":"Python Data Science Toolbox (Part 2)","heading":"Iterators vs. Iterables","text":"\nLet’s quick recall ’ve learned iterables iterators. Recall video iterable object can return iterator, iterator object keeps state produces next value call next() . exercise, identify object iterable iterator.\n\nenvironment pre-loaded variables flash1 flash2. Try printing values print() next() figure iterable iterator.\nflash1 flash2 iterators.flash1 flash2 iterables.flash1 iterable flash2 iterator.\nCorrect!\n","code":"# edited/added\nflash1 = ['jay garrick', 'barry allen', 'wally west', 'bart allen']\nflash2 = iter(flash1)"},{"path":"python-data-science-toolbox-part-2.html","id":"iterating-over-iterables-1","chapter":"Python Data Science Toolbox (Part 2)","heading":"Iterating over iterables (1)","text":"\nGreat, ’re familiar iterables iterators ! exercise, reinforce knowledge iterating printing iterables iterators.\n\nprovided list strings flash. practice iterating list using loop. also create iterator list access values iterator.\n\nCreate loop loop flash print values list. Use person loop variable.\n\nCreate iterator list flash assign result superhero.\n\nPrint items superhero using next() 4 times.\n\nGreat work!\n","code":"# Create a list of strings: flash\nflash = ['jay garrick', 'barry allen', 'wally west', 'bart allen']\n\n# Print each list item in flash using a for loop\nfor person in flash:\n    print(person)## jay garrick\n## barry allen\n## wally west\n## bart allen# Create an iterator for flash: superhero\nsuperhero = iter(flash)\n\n# Print each item from the iterator\nprint(next(superhero))## jay garrickprint(next(superhero))## barry allenprint(next(superhero))## wally westprint(next(superhero))## bart allen"},{"path":"python-data-science-toolbox-part-2.html","id":"iterating-over-iterables-2","chapter":"Python Data Science Toolbox (Part 2)","heading":"Iterating over iterables (2)","text":"\nOne things learned chapter iterables actual lists. couple examples looked strings use range() function. exercise, focus range() function.\n\ncan use range() loop ’s list iterated :\n\nRecall range() doesn’t actually create list; instead, creates range object iterator produces values reaches limit (example, value 4). range() created actual list, calling value \\(10^{100}\\) may work, especially since number big may go regular computer’s memory. value \\(10^{100}\\) actually ’s called Googol 1 followed hundred 0s. ’s huge number!\n\ntask exercise show calling range() \\(10^{100}\\) won’t actually pre-create list.\n\nCreate iterator object small_value range(3) using function iter().\n\nUsing loop, iterate range(3), printing value every iteration. Use num loop variable.\n\nCreate iterator object googol range(10 ** 100).\n\nGreat work!\n","code":"for i in range(5):\n    print(i)\n# Create an iterator for range(3): small_value\nsmall_value = iter(range(3))\n\n# Print the values in small_value\nprint(next(small_value))## 0print(next(small_value))## 1print(next(small_value))## 2# Loop over range(3) and print the values\nfor num in range(3):\n    print(num)## 0\n## 1\n## 2# Create an iterator for range(10 ** 100): googol\ngoogol = iter(range(10 ** 100))\n\n# Print the first 5 values from googol\nprint(next(googol))## 0print(next(googol))## 1print(next(googol))## 2print(next(googol))## 3print(next(googol))## 4"},{"path":"python-data-science-toolbox-part-2.html","id":"iterators-as-function-arguments","chapter":"Python Data Science Toolbox (Part 2)","heading":"Iterators as function arguments","text":"\n’ve using iter() function get iterator object, well next() function retrieve values one one iterator object.\n\nalso functions take iterators iterables arguments. example, list() sum() functions return list sum elements, respectively.\n\nexercise, use functions passing iterable range() printing results function calls.\n\nCreate range object produce values 10 20 using range(). Assign result values.\n\nUse list() function create list values range object values. Assign result values_list.\n\nUse sum() function get sum values 10 20 range object values. Assign result values_sum.\n\nGreat work!\n","code":"# Create a range object: values\nvalues = range(10, 21)\n\n# Print the range object\nprint(values)## range(10, 21)# Create a list of integers: values_list\nvalues_list = list(values)\n\n# Print values_list\nprint(values_list)## [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]# Get the sum of values: values_sum\nvalues_sum = sum(values)\n\n# Print values_sum\nprint(values_sum)## 165"},{"path":"python-data-science-toolbox-part-2.html","id":"playing-with-iterators","chapter":"Python Data Science Toolbox (Part 2)","heading":"Playing with iterators","text":"","code":""},{"path":"python-data-science-toolbox-part-2.html","id":"using-enumerate","chapter":"Python Data Science Toolbox (Part 2)","heading":"Using enumerate","text":"\n’re really getting hang using iterators, great job!\n\n’ve just gained several new ideas iterators last video one enumerate() function. Recall enumerate() returns enumerate object produces sequence tuples, tuples index-value pair.\n\nexercise, given list strings mutants practice using enumerate() printing list tuples unpacking tuples using loop.\n\nCreate list tuples mutants assign result mutant_list. Make sure generate tuples using enumerate() turn result list using list().\n\nComplete first loop unpacking tuples generated calling enumerate() mutants. Use index1 index value1 value unpacking tuple.\n\nComplete second loop similarly first, time change starting index start 1 passing argument start parameter enumerate(). Use index2 index value2 value unpacking tuple.\n\nGreat work!\n","code":"# Create a list of strings: mutants\nmutants = ['charles xavier', \n            'bobby drake', \n            'kurt wagner', \n            'max eisenhardt', \n            'kitty pryde']\n\n# Create a list of tuples: mutant_list\nmutant_list = list(enumerate(mutants))\n\n# Print the list of tuples\nprint(mutant_list)## [(0, 'charles xavier'), (1, 'bobby drake'), (2, 'kurt wagner'), (3, 'max eisenhardt'), (4, 'kitty pryde')]# Unpack and print the tuple pairs\nfor index1, value1 in enumerate(mutants):\n    print(index1, value1)## 0 charles xavier\n## 1 bobby drake\n## 2 kurt wagner\n## 3 max eisenhardt\n## 4 kitty pryde# Change the start index\nfor index2, value2 in enumerate(mutants, start=1):\n    print(index2, value2)## 1 charles xavier\n## 2 bobby drake\n## 3 kurt wagner\n## 4 max eisenhardt\n## 5 kitty pryde"},{"path":"python-data-science-toolbox-part-2.html","id":"using-zip","chapter":"Python Data Science Toolbox (Part 2)","heading":"Using zip","text":"\nAnother interesting function ’ve learned zip(), takes number iterables returns zip object iterator tuples. wanted print values zip object, can convert list print . Printing just zip object return values unless unpack first. exercise, explore .\n\nThree lists strings pre-loaded: mutants, aliases, powers. First, use list() zip() lists generate list tuples. , create zip object using zip(). Finally, unpack zip object loop print values tuple. Observe different output generated printing list tuples, zip object, finally, tuple values loop.\n\nUsing zip() list(), create list tuples three lists mutants, aliases, powers (order) assign result mutant_data.\n\nUsing zip(), create zip object called mutant_zip three lists mutants, aliases, powers.\n\nComplete loop unpacking zip object created printing tuple values. Use value1, value2, value3 values mutants, aliases, powers, order.\n\nGreat work!\n","code":"# edited/added\naliases = ['prof x', 'iceman', 'nightcrawler', 'magneto', 'shadowcat']\npowers = ['telepathy', 'thermokinesis', 'teleportation', 'magnetokinesis', 'intangibility']\n\n# Create a list of tuples: mutant_data\nmutant_data = list(zip(mutants, aliases, powers))\n\n# Print the list of tuples\nprint(mutant_data)## [('charles xavier', 'prof x', 'telepathy'), ('bobby drake', 'iceman', 'thermokinesis'), ('kurt wagner', 'nightcrawler', 'teleportation'), ('max eisenhardt', 'magneto', 'magnetokinesis'), ('kitty pryde', 'shadowcat', 'intangibility')]# Create a zip object using the three lists: mutant_zip\nmutant_zip = zip(mutants, aliases, powers)\n\n# Print the zip object\nprint(mutant_zip)## <zip object at 0x7fb6639e2340># Unpack the zip object and print the tuple values\nfor value1, value2, value3 in mutant_zip:\n    print(value1, value2, value3)## charles xavier prof x telepathy\n## bobby drake iceman thermokinesis\n## kurt wagner nightcrawler teleportation\n## max eisenhardt magneto magnetokinesis\n## kitty pryde shadowcat intangibility"},{"path":"python-data-science-toolbox-part-2.html","id":"using-and-zip-to-unzip","chapter":"Python Data Science Toolbox (Part 2)","heading":"Using * and zip to ‘unzip’","text":"\nknow use zip() well print values zip object. Excellent!\n\nLet’s play around zip() little . unzip function reverse zip() . can, however, reverse zipped together using zip() little help !  unpacks iterable list tuple positional arguments function call.\n\nexercise, use * call zip() unpack tuples produced zip().\n\nTwo tuples strings, mutants powers pre-loaded.\n\nCreate zip object using zip() mutants powers, order. Assign result z1.\n\nPrint tuples z1 unpacking positional arguments using * operator print() call.\n\nprevious print() call exhausted elements z1, recreate zip object defined earlier assign result z1.\n\n‘Unzip’ tuples z1 unpacking positional arguments using * operator zip() call. Assign results result1 result2, order.\n\nlast print() statements prints output comparing result1 mutants result2 powers. Click Submit Answer see unpacked result1 result2 equivalent mutants powers, respectively.\n\nGreat work!\n","code":"# Create a zip object from mutants and powers: z1\nz1 = zip(mutants, powers)\n\n# Print the tuples in z1 by unpacking with *\nprint(*z1)## ('charles xavier', 'telepathy') ('bobby drake', 'thermokinesis') ('kurt wagner', 'teleportation') ('max eisenhardt', 'magnetokinesis') ('kitty pryde', 'intangibility')# Re-create a zip object from mutants and powers: z1\nz1 = zip(mutants, powers)\n\n# 'Unzip' the tuples in z1 by unpacking with * and zip(): result1, result2\nresult1, result2 = zip(*z1)\n\n# Check if unpacked tuples are equivalent to original tuples\nprint(result1 == mutants)## Falseprint(result2 == powers)## False"},{"path":"python-data-science-toolbox-part-2.html","id":"using-iterators-to-load-large-files-into-memory","chapter":"Python Data Science Toolbox (Part 2)","heading":"Using iterators to load large files into memory","text":"","code":""},{"path":"python-data-science-toolbox-part-2.html","id":"processing-large-amounts-of-twitter-data","chapter":"Python Data Science Toolbox (Part 2)","heading":"Processing large amounts of Twitter data","text":"\nSometimes, data process reaches size much computer’s memory handle. common problem faced data scientists. solution process entire data source chunk chunk, instead single go .\n\nexercise, just . process large csv file Twitter data way processed ‘tweets.csv’ Bringing together exercises prequel course, time, working chunks 10 entries time.\n\ninterested learning access Twitter data can work system, refer Part 2 DataCamp course Importing Data Python.\n\npandas package imported pd file ‘tweets.csv’ current directory use.\n\naware real data Twitter always risk may contain profanity offensive content (exercise, following exercises also use real Twitter data).\n\nInitialize empty dictionary counts_dict storing results processing Twitter data.\n\nIterate ‘tweets.csv’ file using loop. Use loop variable chunk iterate call pd.read_csv() chunksize 10.\n\ninner loop, iterate column ‘lang’ chunk using loop. Use loop variable entry.\n\nGreat work!\n","code":"# edited/added\nimport pandas as pd\n\n# Initialize an empty dictionary: counts_dict\ncounts_dict = {}\n\n# Iterate over the file chunk by chunk\nfor chunk in pd.read_csv('datasets/Python-Data-Science-Toolbox-Part-2/tweets.csv', chunksize=10): # edited/added\n\n    # Iterate over the column in DataFrame\n    for entry in chunk['lang']:\n        if entry in counts_dict.keys():\n            counts_dict[entry] += 1\n        else:\n            counts_dict[entry] = 1\n            \n# Print the populated dictionary\nprint(counts_dict)## {'en': 97, 'et': 1, 'und': 2}"},{"path":"python-data-science-toolbox-part-2.html","id":"extracting-information-for-large-amounts-of-twitter-data","chapter":"Python Data Science Toolbox (Part 2)","heading":"Extracting information for large amounts of Twitter data","text":"\nGreat job chunking file previous exercise. now know deal situations need process large file ’s useful skill !\n\n’s good know process file smaller, manageable chunks, can become tedious write rewrite code task time. exercise, making code reusable putting work last exercise function definition.\n\npandas package imported pd file ‘tweets.csv’ current directory use.\n\nDefine function count_entries(), 3 parameters. first parameter csv_file filename, second c_size chunk size, last colname column name.\n\nIterate file csv_file file using loop. Use loop variable chunk iterate call pd.read_csv(), passing c_size chunksize.\n\ninner loop, iterate column given colname chunk using loop. Use loop variable entry.\n\nCall count_entries() function passing filename ‘tweets.csv’, size chunks 10, name column count, ‘lang’. Assign result call variable result_counts.\n\nGreat work!\n","code":"# Define count_entries()\ndef count_entries(csv_file, c_size, colname):\n    \"\"\"Return a dictionary with counts of\n    occurrences as value for each key.\"\"\"\n    \n    # Initialize an empty dictionary: counts_dict\n    counts_dict = {}\n\n    # Iterate over the file chunk by chunk\n    for chunk in pd.read_csv(csv_file, chunksize=c_size):\n\n        # Iterate over the column in DataFrame\n        for entry in chunk[colname]:\n            if entry in counts_dict.keys():\n                counts_dict[entry] += 1\n            else:\n                counts_dict[entry] = 1\n\n    # Return counts_dict\n    return counts_dict\n\n# Call count_entries(): result_counts\nresult_counts = count_entries('datasets/Python-Data-Science-Toolbox-Part-2/tweets.csv', 10, 'lang') # edited/added\n\n# Print result_counts\nprint(result_counts)## {'en': 97, 'et': 1, 'und': 2}"},{"path":"python-data-science-toolbox-part-2.html","id":"list-comprehensions-and-generators","chapter":"Python Data Science Toolbox (Part 2)","heading":"List comprehensions and generators","text":"\nchapter, ’ll build knowledge iterators introduced list comprehensions, allow create complicated lists—lists lists—one line code! List comprehensions can dramatically simplify code make efficient, become vital part Python data science toolbox. ’ll learn generators, extremely helpful working large sequences data may want store memory, instead generate fly.\n","code":""},{"path":"python-data-science-toolbox-part-2.html","id":"list-comprehensions","chapter":"Python Data Science Toolbox (Part 2)","heading":"List comprehensions","text":"","code":""},{"path":"python-data-science-toolbox-part-2.html","id":"write-a-basic-list-comprehension","chapter":"Python Data Science Toolbox (Part 2)","heading":"Write a basic list comprehension","text":"\nexercise, practice ’ve learned video writing list comprehensions. write list comprehension identify output produced.\n\nfollowing list pre-loaded environment.\n\nlist comprehension produces list first character string doctor look like? Note list comprehension uses doc iterator variable. output ?\nlist comprehension [doc doctor: doc[0]] produces list [‘h’, ‘c’, ‘c’, ‘t’, ‘w’].list comprehension [doc[0] doctor] produces list [‘h’, ‘c’, ‘c’, ‘t’, ‘w’].list comprehension [doc[0] doctor] produces list [‘h’, ‘c’, ‘c’, ‘t’, ‘w’].\nCorrect!\n","code":"doctor = ['house', 'cuddy', 'chase', 'thirteen', 'wilson']\n"},{"path":"python-data-science-toolbox-part-2.html","id":"list-comprehension-over-iterables","chapter":"Python Data Science Toolbox (Part 2)","heading":"List comprehension over iterables","text":"\nknow list comprehensions can built iterables. Given following objects , can build list comprehensions ?\ncan build list comprehensions objects except string number characters jean.can build list comprehensions objects except string lists doctor flash.can build list comprehensions objects except range(50).can build list comprehensions objects except integer object valjean.\nCorrect!\n","code":"doctor = ['house', 'cuddy', 'chase', 'thirteen', 'wilson']\n\nrange(50)\n\nunderwood = 'After all, we are nothing more or less than what we choose to reveal.'\n\njean = '24601'\n\nflash = ['jay garrick', 'barry allen', 'wally west', 'bart allen']\n\nvaljean = 24601\n"},{"path":"python-data-science-toolbox-part-2.html","id":"writing-list-comprehensions","chapter":"Python Data Science Toolbox (Part 2)","heading":"Writing list comprehensions","text":"\nnow knowledge necessary begin writing list comprehensions! job exercise write list comprehension\nproduces list squares numbers ranging 0 9.\n\nUsing range numbers 0 9 iterable iterator variable, write list comprehension produces list numbers consisting squared values .\n\nGreat work!\n","code":"# Create list comprehension: squares\nsquares = [i**2 for i in range(0,10)]"},{"path":"python-data-science-toolbox-part-2.html","id":"nested-list-comprehensions","chapter":"Python Data Science Toolbox (Part 2)","heading":"Nested list comprehensions","text":"\nGreat! point, good grasp basic syntax list comprehensions. Let’s push code-writing skills little . exercise, writing list comprehension within another list comprehension, nested list comprehensions. sounds little tricky, can !\n\nLet’s step aside strings. One ways lists can used representing multi-dimension objects matrices. Matrices can represented list lists Python. example 5 x 5 matrix values 0 4 row can written :\n\ntask recreate matrix using nested listed comprehensions. Recall can create one rows matrix single list comprehension. create list lists, simply supply list comprehension output expression overall list comprehension:\n\n[[output expression] iterator variable iterable]\n\nNote , output expression list comprehension.\n\ninner list comprehension - , output expression nested list comprehension - create list values 0 4 using range(). Use col iterator variable.\n\niterable part nested list comprehension, use range() count 5 rows - , create list values 0 4. Use row iterator variable; note won’t needing variable create values list lists.\n\nGreat work!\n","code":"matrix = [[0, 1, 2, 3, 4],\n          [0, 1, 2, 3, 4],\n          [0, 1, 2, 3, 4],\n          [0, 1, 2, 3, 4],\n          [0, 1, 2, 3, 4]]\n# Create a 5 x 5 matrix using a list of lists: matrix\nmatrix = [[col for col in range(5)] for row in range(5)]\n\n# Print the matrix\nfor row in matrix:\n    print(row)## [0, 1, 2, 3, 4]\n## [0, 1, 2, 3, 4]\n## [0, 1, 2, 3, 4]\n## [0, 1, 2, 3, 4]\n## [0, 1, 2, 3, 4]"},{"path":"python-data-science-toolbox-part-2.html","id":"advanced-comprehensions","chapter":"Python Data Science Toolbox (Part 2)","heading":"Advanced comprehensions","text":"","code":""},{"path":"python-data-science-toolbox-part-2.html","id":"using-conditionals-in-comprehensions-1","chapter":"Python Data Science Toolbox (Part 2)","heading":"Using conditionals in comprehensions (1)","text":"\n’ve using list comprehensions build lists values, sometimes using operations create values.\n\ninteresting mechanism list comprehensions can also create lists values meet certain condition. One way using conditionals iterator variables. exercise, exactly !\n\nRecall video can apply conditional statement test iterator variable adding statement optional predicate expression part statement comprehension:\n\n[ output expression iterator variable iterable predicate expression ].\n\nuse recipe write list comprehension exercise. given list strings fellowship , using list comprehension, create list includes members fellowship 7 characters .\n\nUse member iterator variable list comprehension. conditional, use len() evaluate iterator variable. Note want strings 7 characters .\n\nGreat work!\n","code":"# Create a list of strings: fellowship\nfellowship = ['frodo', 'samwise', 'merry', 'aragorn', 'legolas', 'boromir', 'gimli']\n\n# Create list comprehension: new_fellowship\nnew_fellowship = [member for member in fellowship if len(member) >= 7]\n\n# Print the new list\nprint(new_fellowship)## ['samwise', 'aragorn', 'legolas', 'boromir']"},{"path":"python-data-science-toolbox-part-2.html","id":"using-conditionals-in-comprehensions-2","chapter":"Python Data Science Toolbox (Part 2)","heading":"Using conditionals in comprehensions (2)","text":"\nprevious exercise, used conditional statement predicate expression part list comprehension evaluate iterator variable. exercise, use -else statement output expression list.\n\nwork list, fellowship , using list comprehension -else conditional statement output expression, create list keeps members fellowship 7 characters replaces others empty string. Use member iterator variable list comprehension.\n\noutput expression, keep string -number characters >= 7, else replace empty string - , ’’ ““.\n\nGreat work!\n","code":"# Create a list of strings: fellowship\nfellowship = ['frodo', 'samwise', 'merry', 'aragorn', 'legolas', 'boromir', 'gimli']\n\n# Create list comprehension: new_fellowship\nnew_fellowship = [member if len(member) >= 7 else '' for member in fellowship]\n\n# Print the new list\nprint(new_fellowship)## ['', 'samwise', '', 'aragorn', 'legolas', 'boromir', '']"},{"path":"python-data-science-toolbox-part-2.html","id":"dict-comprehensions","chapter":"Python Data Science Toolbox (Part 2)","heading":"Dict comprehensions","text":"\nComprehensions aren’t relegated merely world lists. many objects can build using comprehensions, dictionaries, pervasive objects Data Science. create dictionary using comprehension syntax exercise. case, comprehension called dict comprehension.\n\nRecall main difference list comprehension dict comprehension use curly braces {} instead []. Additionally, members dictionary created using colon :, <key> : <value>.\n\ngiven list strings fellowship , using dict comprehension, create dictionary members list keys length string corresponding values.\n\nCreate dict comprehension key string fellowship value length string. Remember use syntax <key> : <value> output expression part comprehension create members dictionary. Use member iterator variable.\n\nGreat work!\n","code":"# Create a list of strings: fellowship\nfellowship = ['frodo', 'samwise', 'merry', 'aragorn', 'legolas', 'boromir', 'gimli']\n\n# Create dict comprehension: new_fellowship\nnew_fellowship = { member:len(member) for member in fellowship }\n\n# Print the new dictionary\nprint(new_fellowship)## {'frodo': 5, 'samwise': 7, 'merry': 5, 'aragorn': 7, 'legolas': 7, 'boromir': 7, 'gimli': 5}"},{"path":"python-data-science-toolbox-part-2.html","id":"introduction-to-generator-expressions","chapter":"Python Data Science Toolbox (Part 2)","heading":"Introduction to generator expressions","text":"","code":""},{"path":"python-data-science-toolbox-part-2.html","id":"list-comprehensions-vs.-generators","chapter":"Python Data Science Toolbox (Part 2)","heading":"List comprehensions vs. generators","text":"\n’ve seen videos list comprehensions generator expressions look similar syntax, except use parentheses () generator expressions brackets [] list comprehensions.\n\nexercise, recall difference list comprehensions generators. help task, following code pre-loaded environment:\n\nTry play around fellow1 fellow2 figuring types printing values. Based observations can recall video, select options best description difference list comprehensions generators.\nList comprehensions generators different ; just different ways writing thing.list comprehension produces list output, generator produces generator object.list comprehension produces list output can iterated , generator produces generator object can’t iterated .\nCorrect!\n","code":"# List of strings\nfellowship = ['frodo', 'samwise', 'merry', 'aragorn', 'legolas', 'boromir', 'gimli']\n\n# List comprehension\nfellow1 = [member for member in fellowship if len(member) >= 7]\n\n# Generator expression\nfellow2 = (member for member in fellowship if len(member) >= 7)\n"},{"path":"python-data-science-toolbox-part-2.html","id":"write-your-own-generator-expressions","chapter":"Python Data Science Toolbox (Part 2)","heading":"Write your own generator expressions","text":"\nfamiliar generators generator expressions , well difference list comprehensions. exercise, practice building generator expressions .\n\nRecall generator expressions basically syntax list comprehensions, except uses parentheses () instead brackets []; make things feel familiar! Furthermore, ever iterated dictionary .items(), used range() function, example, already encountered used generators , without knowing ! use functions, Python creates generators behind scenes.\n\nNow, start simple creating generator object produces numeric values.\n\nCreate generator object produce values 0 30. Assign result result use num iterator variable generator expression.\n\nPrint first 5 values using next() appropriately print().\n\nPrint rest values using loop iterate generator object.\n\nGreat work!\n","code":"# Create generator object: result\nresult = (num for num in range(31))\n\n# Print the first 5 values\nprint(next(result))## 0print(next(result))## 1print(next(result))## 2print(next(result))## 3print(next(result))\n\n# Print the rest of the values## 4for value in result:\n    print(value)## 5\n## 6\n## 7\n## 8\n## 9\n## 10\n## 11\n## 12\n## 13\n## 14\n## 15\n## 16\n## 17\n## 18\n## 19\n## 20\n## 21\n## 22\n## 23\n## 24\n## 25\n## 26\n## 27\n## 28\n## 29\n## 30"},{"path":"python-data-science-toolbox-part-2.html","id":"changing-the-output-in-generator-expressions","chapter":"Python Data Science Toolbox (Part 2)","heading":"Changing the output in generator expressions","text":"\nGreat! point, already know write basic generator expression. exercise, push idea little adding output expression generator expression. generator expressions list comprehensions alike syntax, familiar task !\n\ngiven list strings lannister , using generator expression, create generator object iterate print values.\n\nWrite generator expression generate lengths string lannister. Use person iterator variable. Assign result lengths.\n\nSupply correct iterable loop printing values generator object.\n\nGreat work!\n","code":"# Create a list of strings: lannister\nlannister = ['cersei', 'jaime', 'tywin', 'tyrion', 'joffrey']\n\n# Create a generator object: lengths\nlengths = (len(person) for person in lannister)\n\n# Iterate over and print the values in lengths\nfor value in lengths:\n    print(value)## 6\n## 5\n## 5\n## 6\n## 7"},{"path":"python-data-science-toolbox-part-2.html","id":"build-a-generator","chapter":"Python Data Science Toolbox (Part 2)","heading":"Build a generator","text":"\nprevious exercises, ’ve dealt mainly writing generator expressions, uses comprehension syntax. able use comprehension syntax generator expressions made work much easier!\n\nNow, recall video generator expressions, generator functions well. Generator functions functions , like generator expressions, yield series values, instead returning single value. generator function defined regular function, whenever generates value, uses keyword yield instead return.\n\nexercise, create generator function similar mechanism generator expression defined previous exercise:\n\nComplete function header function get_lengths() single parameter, input_list.\n\nloop function definition, yield length strings input_list.\n\nComplete iterable part loop printing values generated get_lengths() generator function. Supply call get_lengths(), passing list lannister.\n\nGreat work!\n","code":"lengths = (len(person) for person in lannister)\n# Create a list of strings\nlannister = ['cersei', 'jaime', 'tywin', 'tyrion', 'joffrey']\n\n# Define generator function get_lengths\ndef get_lengths(input_list):\n    \"\"\"Generator function that yields the\n    length of the strings in input_list.\"\"\"\n\n    # Yield the length of a string\n    for person in input_list:\n        yield len(person)\n        \n# Print the values generated by get_lengths()\nfor value in get_lengths(lannister):\n    print(value)## 6\n## 5\n## 5\n## 6\n## 7"},{"path":"python-data-science-toolbox-part-2.html","id":"wrapping-up-comprehensions-and-generators.","chapter":"Python Data Science Toolbox (Part 2)","heading":"Wrapping up comprehensions and generators.","text":"","code":""},{"path":"python-data-science-toolbox-part-2.html","id":"list-comprehensions-for-time-stamped-data","chapter":"Python Data Science Toolbox (Part 2)","heading":"List comprehensions for time-stamped data","text":"\nnow make use ’ve learned chapter solve simple data extraction problem. also introduced data structure, pandas Series, exercise. won’t elaborate much , know data structure working lot times analyzing data pandas DataFrames. can think DataFrame columns single-dimension arrays called Series.\n\nexercise, using list comprehension extract time time-stamped Twitter data. pandas package imported pd file ‘tweets.csv’ imported df DataFrame use.\n\nExtract column ‘created_at’ df assign result tweet_time. Fun fact: extracted column tweet_time Series data structure!\n\nCreate list comprehension extracts time row tweet_time. row string represents timestamp, access 12th 19th characters string extract time. Use entry iterator variable assign result tweet_clock_time. Remember Python uses 0-based indexing!\n\nGreat work!\n","code":"# edited/added\ndf = pd.read_csv('datasets/Python-Data-Science-Toolbox-Part-2/tweets.csv')\n\n# Extract the created_at column from df: tweet_time\ntweet_time = df['created_at']\n\n# Extract the clock time: tweet_clock_time\ntweet_clock_time = [entry[11:19] for entry in tweet_time]\n\n# Print the extracted times\nprint(tweet_clock_time},{"path":"python-data-science-toolbox-part-2.html","id":"conditional-list-comprehensions-for-time-stamped-data","chapter":"Python Data Science Toolbox (Part 2)","heading":"Conditional list comprehensions for time-stamped data","text":"\nGreat, ’ve successfully extracted data interest, time, pandas DataFrame! Let’s tweak work adding conditional specifies entries select.\n\nexercise, using list comprehension extract time time-stamped Twitter data. add conditional expression list comprehension select times entry[17:19] equal ‘19’. pandas package imported pd file ‘tweets.csv’ imported df DataFrame use.\n\nExtract column ‘created_at’ df assign result tweet_time.\n\nCreate list comprehension extracts time row tweet_time. row string represents timestamp, access 12th 19th characters string extract time. Use entry iterator variable assign result tweet_clock_time. Additionally, add conditional expression checks whether entry[17:19] equal ‘19’.\n\nGreat work!\n","code":"# Extract the created_at column from df: tweet_time\ntweet_time = df['created_at']\n\n# Extract the clock time: tweet_clock_time\ntweet_clock_time = [entry[11:19] for entry in tweet_time if entry[17:19] == '19']\n\n# Print the extracted times\nprint(tweet_clock_time)## ['23:40:19', '23:40:19', '23:40:19', '23:40:19', '23:40:19', '23:40:19', '23:40:19', '23:40:19', '23:40:19', '23:40:19', '23:40:19', '23:40:19', '23:40:19', '23:40:19', '23:40:19', '23:40:19', '23:40:19', '23:40:19', '23:40:19', '23:40:19', '23:40:19', '23:40:19', '23:40:19', '23:40:19', '23:40:19', '23:40:19', '23:40:19', '23:40:19', '23:40:19', '23:40:19', '23:40:19', '23:40:19', '23:40:19', '23:40:19']"},{"path":"python-data-science-toolbox-part-2.html","id":"bringing-it-all-together-5","chapter":"Python Data Science Toolbox (Part 2)","heading":"Bringing it all together!","text":"\nchapter allow apply newly acquired skills toward wrangling extracting meaningful information real-world dataset—World Bank’s World Development Indicators. ’ll chance write functions list comprehensions work iterators generators solidify Python data science chops.\n","code":""},{"path":"python-data-science-toolbox-part-2.html","id":"welcome-to-the-case-study","chapter":"Python Data Science Toolbox (Part 2)","heading":"Welcome to the case study!","text":"","code":""},{"path":"python-data-science-toolbox-part-2.html","id":"dictionaries-for-data-science","chapter":"Python Data Science Toolbox (Part 2)","heading":"Dictionaries for data science","text":"\nexercise, ’ll use ’ve learned zip() function combine two lists dictionary.\n\nlists actually extracted bigger dataset file world development indicators World Bank. pedagogical purposes, pre-processed dataset lists ’ll working .\n\nfirst list feature_names contains header names dataset second list row_vals contains actual values row dataset, corresponding header names.\n\nCreate zip object calling zip() passing feature_names row_vals. Assign result zipped_lists.\n\nCreate dictionary zipped_lists zip object calling dict() zipped_lists. Assign resulting dictionary rs_dict.\n\nGreat work!\n","code":"# edited/added\nfeature_names = ['CountryName', 'CountryCode', 'IndicatorName', 'IndicatorCode', 'Year', 'Value']\nrow_vals = ['Arab World', 'ARB', 'Adolescent fertility rate (births per 1,000 women ages 15-19)', 'SP.ADO.TFRT', '1960', '133.56090740552298']\n\n# Zip lists: zipped_lists\nzipped_lists = zip(feature_names, row_vals)\n\n# Create a dictionary: rs_dict\nrs_dict = dict(zipped_lists)\n\n# Print the dictionary\nprint(rs_dict)## {'CountryName': 'Arab World', 'CountryCode': 'ARB', 'IndicatorName': 'Adolescent fertility rate (births per 1,000 women ages 15-19)', 'IndicatorCode': 'SP.ADO.TFRT', 'Year': '1960', 'Value': '133.56090740552298'}"},{"path":"python-data-science-toolbox-part-2.html","id":"writing-a-function-to-help-you","chapter":"Python Data Science Toolbox (Part 2)","heading":"Writing a function to help you","text":"\nSuppose needed repeat process done previous exercise many, many rows data. Rewriting code become tedious, repetitive, unmaintainable.\n\nexercise, create function house code wrote earlier make things easier much concise. ? way, need call function supply appropriate lists create dictionaries! , lists feature_names row_vals preloaded contain header names dataset actual values row dataset, respectively.\n\nDefine function lists2dict() two parameters: first list1 second list2.\n\nReturn resulting dictionary rs_dict lists2dict().\n\nCall lists2dict() function arguments feature_names row_vals. Assign result function call rs_fxn.\n\nGreat work!\n","code":"# Define lists2dict()\ndef lists2dict(list1, list2):\n    \"\"\"Return a dictionary where list1 provides\n    the keys and list2 provides the values.\"\"\"\n\n    # Zip lists: zipped_lists\n    zipped_lists = zip(list1, list2)\n\n    # Create a dictionary: rs_dict\n    rs_dict = dict(zipped_lists)\n\n    # Return the dictionary\n    return rs_dict\n  \n# Call lists2dict: rs_fxn\nrs_fxn = lists2dict(feature_names, row_vals)\n\n# Print rs_fxn\nprint(rs_fxn)## {'CountryName': 'Arab World', 'CountryCode': 'ARB', 'IndicatorName': 'Adolescent fertility rate (births per 1,000 women ages 15-19)', 'IndicatorCode': 'SP.ADO.TFRT', 'Year': '1960', 'Value': '133.56090740552298'}"},{"path":"python-data-science-toolbox-part-2.html","id":"using-a-list-comprehension","chapter":"Python Data Science Toolbox (Part 2)","heading":"Using a list comprehension","text":"\ntime, ’re going use lists2dict() function defined last exercise turn bunch lists list dictionaries help list comprehension.\n\nlists2dict() function already preloaded, together couple lists, feature_names row_lists. feature_names contains header names World Bank dataset row_lists list lists, sublist list actual values row dataset.\n\ngoal use list comprehension generate list dicts, keys header names values row entries.\n\nInspect contents row_lists printing first two lists row_lists.\n\nCreate list comprehension generates dictionary using lists2dict() sublist row_lists. keys feature_names list values row entries row_lists. Use sublist iterator variable assign resulting list dictionaries list_of_dicts.\n\nLook first two dictionaries list_of_dicts printing .\n\nGreat work!\n","code":"# edited/added\nrow_lists = [['Arab World', 'ARB', 'Adolescent fertility rate (births per 1,000 women ages 15-19)', 'SP.ADO.TFRT', '1960', '133.56090740552298'], ['Arab World', 'ARB', 'Age dependency ratio (% of working-age population)', 'SP.POP.DPND', '1960', '87.7976011532547'], ['Arab World', 'ARB', 'Age dependency ratio, old (% of working-age population)', 'SP.POP.DPND.OL', '1960', '6.634579191565161'], ['Arab World', 'ARB', 'Age dependency ratio, young (% of working-age population)', 'SP.POP.DPND.YG', '1960', '81.02332950839141'], ['Arab World', 'ARB', 'Arms exports (SIPRI trend indicator values)', 'MS.MIL.XPRT.KD', '1960', '3000000.0'], ['Arab World', 'ARB', 'Arms imports (SIPRI trend indicator values)', 'MS.MIL.MPRT.KD', '1960', '538000000.0'], ['Arab World', 'ARB', 'Birth rate, crude (per 1,000 people)', 'SP.DYN.CBRT.IN', '1960', '47.697888095096395'], ['Arab World', 'ARB', 'CO2 emissions (kt)', 'EN.ATM.CO2E.KT', '1960', '59563.9892169935'], ['Arab World', 'ARB', 'CO2 emissions (metric tons per capita)', 'EN.ATM.CO2E.PC', '1960', '0.6439635478877049'], ['Arab World', 'ARB', 'CO2 emissions from gaseous fuel consumption (% of total)', 'EN.ATM.CO2E.GF.ZS', '1960', '5.041291753975099'], ['Arab World', 'ARB', 'CO2 emissions from liquid fuel consumption (% of total)', 'EN.ATM.CO2E.LF.ZS', '1960', '84.8514729446567'], ['Arab World', 'ARB', 'CO2 emissions from liquid fuel consumption (kt)', 'EN.ATM.CO2E.LF.KT', '1960', '49541.707291032304'], ['Arab World', 'ARB', 'CO2 emissions from solid fuel consumption (% of total)', 'EN.ATM.CO2E.SF.ZS', '1960', '4.72698138789597'], ['Arab World', 'ARB', 'Death rate, crude (per 1,000 people)', 'SP.DYN.CDRT.IN', '1960', '19.7544519237187'], ['Arab World', 'ARB', 'Fertility rate, total (births per woman)', 'SP.DYN.TFRT.IN', '1960', '6.92402738655897'], ['Arab World', 'ARB', 'Fixed telephone subscriptions', 'IT.MLT.MAIN', '1960', '406833.0'], ['Arab World', 'ARB', 'Fixed telephone subscriptions (per 100 people)', 'IT.MLT.MAIN.P2', '1960', '0.6167005703199'], ['Arab World', 'ARB', 'Hospital beds (per 1,000 people)', 'SH.MED.BEDS.ZS', '1960', '1.9296220724398703'], ['Arab World', 'ARB', 'International migrant stock (% of population)', 'SM.POP.TOTL.ZS', '1960', '2.9906371279862403'], ['Arab World', 'ARB', 'International migrant stock, total', 'SM.POP.TOTL', '1960', '3324685.0']]\n\n# Print the first two lists in row_lists\nprint(row_lists[0])## ['Arab World', 'ARB', 'Adolescent fertility rate (births per 1,000 women ages 15-19)', 'SP.ADO.TFRT', '1960', '133.56090740552298']print(row_lists[1])## ['Arab World', 'ARB', 'Age dependency ratio (% of working-age population)', 'SP.POP.DPND', '1960', '87.7976011532547']# Turn list of lists into list of dicts: list_of_dicts\nlist_of_dicts = [lists2dict(feature_names, sublist) for sublist in row_lists]\n\n# Print the first two dictionaries in list_of_dicts\nprint(list_of_dicts[0])## {'CountryName': 'Arab World', 'CountryCode': 'ARB', 'IndicatorName': 'Adolescent fertility rate (births per 1,000 women ages 15-19)', 'IndicatorCode': 'SP.ADO.TFRT', 'Year': '1960', 'Value': '133.56090740552298'}print(list_of_dicts[1])## {'CountryName': 'Arab World', 'CountryCode': 'ARB', 'IndicatorName': 'Age dependency ratio (% of working-age population)', 'IndicatorCode': 'SP.POP.DPND', 'Year': '1960', 'Value': '87.7976011532547'}"},{"path":"python-data-science-toolbox-part-2.html","id":"turning-this-all-into-a-dataframe","chapter":"Python Data Science Toolbox (Part 2)","heading":"Turning this all into a DataFrame","text":"\n’ve zipped lists together, created function house code, even used function list comprehension generate list dictionaries. lot work great job!\n\nnow use convert list dictionaries pandas DataFrame. see convenient generate DataFrame dictionaries DataFrame() function pandas package.\n\nlists2dict() function, feature_names list, row_lists list preloaded exercise.\n\nGo !\n\nuse DataFrame() function need, first import pandas package alias pd.\n\nCreate DataFrame list dictionaries list_of_dicts calling pd.DataFrame(). Assign resulting DataFrame df.\n\nInspect contents df printing head DataFrame. Head DataFrame df can accessed calling df.head().\n\nGreat work!\n","code":"# Import the pandas package\nimport pandas as pd\n\n# Turn list of lists into list of dicts: list_of_dicts\nlist_of_dicts = [lists2dict(feature_names, sublist) for sublist in row_lists]\n\n# Turn list of dicts into a DataFrame: df\ndf = pd.DataFrame(list_of_dicts)\n\n# Print the head of the DataFrame\nprint(df.head())##   CountryName CountryCode                                      IndicatorName   IndicatorCode  Year               Value\n## 0  Arab World         ARB  Adolescent fertility rate (births per 1,000 wo...     SP.ADO.TFRT  1960  133.56090740552298\n## 1  Arab World         ARB  Age dependency ratio (% of working-age populat...     SP.POP.DPND  1960    87.7976011532547\n## 2  Arab World         ARB  Age dependency ratio, old (% of working-age po...  SP.POP.DPND.OL  1960   6.634579191565161\n## 3  Arab World         ARB  Age dependency ratio, young (% of working-age ...  SP.POP.DPND.YG  1960   81.02332950839141\n## 4  Arab World         ARB        Arms exports (SIPRI trend indicator values)  MS.MIL.XPRT.KD  1960           3000000.0"},{"path":"python-data-science-toolbox-part-2.html","id":"using-python-generators-for-streaming-data","chapter":"Python Data Science Toolbox (Part 2)","heading":"Using Python generators for streaming data","text":"","code":""},{"path":"python-data-science-toolbox-part-2.html","id":"processing-data-in-chunks-1","chapter":"Python Data Science Toolbox (Part 2)","heading":"Processing data in chunks (1)","text":"\nSometimes, data sources can large size storing entire dataset memory becomes resource-intensive. exercise, process first 1000 rows file line line, create dictionary counts many times country appears column dataset.\n\ncsv file ‘world_dev_ind.csv’ current directory use. begin, need open connection file using known context manager. example, command open(‘datacamp.csv’) datacamp binds csv file ‘datacamp.csv’ datacamp context manager. , statement context manager, purpose ensure resources efficiently allocated opening connection file.\n\n’d like learn context managers, refer DataCamp course Importing Data Python.\n\nUse open() bind csv file ‘world_dev_ind.csv’ file context manager.\n\nComplete loop iterates 1000 times perform loop body process first 1000 rows data file.\n\nGreat work!\n","code":"# Open a connection to the file\nwith open('datasets/Python-Data-Science-Toolbox-Part-2/world_ind_pop_data.csv') as file:\n\n    # Skip the column names\n    file.readline()\n\n    # Initialize an empty dictionary: counts_dict\n    counts_dict = {}\n\n    # Process only the first 1000 rows\n    for j in range(0, 1000):\n\n        # Split the current line into a list: line\n        line = file.readline().split(',')\n\n        # Get the value for the first column: first_col\n        first_col = line[0]\n\n        # If the column value is in the dict, increment its value\n        if first_col in counts_dict.keys():\n            counts_dict[first_col] += 1\n\n        # Else, add to the dict and set value to 1\n        else:\n            counts_dict[first_col] = 1## 'CountryName,CountryCode,Year,Total Population,Urban population (% of total)\\n'# Print the resulting dictionary\nprint(counts_dict)## {'Arab World': 5, 'Caribbean small states': 5, 'Central Europe and the Baltics': 5, 'East Asia & Pacific (all income levels)': 5, 'East Asia & Pacific (developing only)': 5, 'Euro area': 5, 'Europe & Central Asia (all income levels)': 5, 'Europe & Central Asia (developing only)': 5, 'European Union': 5, 'Fragile and conflict affected situations': 5, 'Heavily indebted poor countries (HIPC)': 5, 'High income': 5, 'High income: nonOECD': 5, 'High income: OECD': 5, 'Latin America & Caribbean (all income levels)': 5, 'Latin America & Caribbean (developing only)': 5, 'Least developed countries: UN classification': 5, 'Low & middle income': 5, 'Low income': 5, 'Lower middle income': 5, 'Middle East & North Africa (all income levels)': 5, 'Middle East & North Africa (developing only)': 5, 'Middle income': 5, 'North America': 5, 'OECD members': 5, 'Other small states': 5, 'Pacific island small states': 5, 'Small states': 5, 'South Asia': 5, 'Sub-Saharan Africa (all income levels)': 5, 'Sub-Saharan Africa (developing only)': 5, 'Upper middle income': 5, 'World': 4, 'Afghanistan': 4, 'Albania': 4, 'Algeria': 4, 'American Samoa': 4, 'Andorra': 4, 'Angola': 4, 'Antigua and Barbuda': 4, 'Argentina': 4, 'Armenia': 4, 'Aruba': 4, 'Australia': 4, 'Austria': 4, 'Azerbaijan': 4, '\"Bahamas': 4, 'Bahrain': 4, 'Bangladesh': 4, 'Barbados': 4, 'Belarus': 4, 'Belgium': 4, 'Belize': 4, 'Benin': 4, 'Bermuda': 4, 'Bhutan': 4, 'Bolivia': 4, 'Bosnia and Herzegovina': 4, 'Botswana': 4, 'Brazil': 4, 'Brunei Darussalam': 4, 'Bulgaria': 4, 'Burkina Faso': 4, 'Burundi': 4, 'Cabo Verde': 4, 'Cambodia': 4, 'Cameroon': 4, 'Canada': 4, 'Cayman Islands': 4, 'Central African Republic': 4, 'Chad': 4, 'Channel Islands': 4, 'Chile': 4, 'China': 4, 'Colombia': 4, 'Comoros': 4, '\"Congo': 8, 'Costa Rica': 4, \"Cote d'Ivoire\": 4, 'Croatia': 4, 'Cuba': 4, 'Curacao': 4, 'Cyprus': 4, 'Czech Republic': 4, 'Denmark': 4, 'Djibouti': 4, 'Dominica': 4, 'Dominican Republic': 4, 'Ecuador': 4, '\"Egypt': 4, 'El Salvador': 4, 'Equatorial Guinea': 4, 'Eritrea': 4, 'Estonia': 4, 'Ethiopia': 4, 'Faeroe Islands': 4, 'Fiji': 4, 'Finland': 4, 'France': 4, 'French Polynesia': 4, 'Gabon': 4, '\"Gambia': 4, 'Georgia': 4, 'Germany': 4, 'Ghana': 4, 'Greece': 4, 'Greenland': 4, 'Grenada': 4, 'Guam': 4, 'Guatemala': 4, 'Guinea': 4, 'Guinea-Bissau': 4, 'Guyana': 4, 'Haiti': 4, 'Honduras': 4, '\"Hong Kong SAR': 4, 'Hungary': 4, 'Iceland': 4, 'India': 4, 'Indonesia': 4, '\"Iran': 4, 'Iraq': 4, 'Ireland': 4, 'Isle of Man': 4, 'Israel': 4, 'Italy': 4, 'Jamaica': 4, 'Japan': 4, 'Jordan': 4, 'Kazakhstan': 4, 'Kenya': 4, 'Kiribati': 4, '\"Korea': 8, 'Kuwait': 4, 'Kyrgyz Republic': 4, 'Lao PDR': 4, 'Latvia': 4, 'Lebanon': 4, 'Lesotho': 4, 'Liberia': 4, 'Libya': 4, 'Liechtenstein': 4, 'Lithuania': 4, 'Luxembourg': 4, '\"Macao SAR': 4, '\"Macedonia': 4, 'Madagascar': 4, 'Malawi': 4, 'Malaysia': 4, 'Maldives': 4, 'Mali': 4, 'Malta': 4, 'Marshall Islands': 4, 'Mauritania': 4, 'Mauritius': 4, 'Mexico': 4, '\"Micronesia': 4, 'Moldova': 4, 'Monaco': 4, 'Mongolia': 4, 'Montenegro': 4, 'Morocco': 4, 'Mozambique': 4, 'Myanmar': 4, 'Namibia': 4, 'Nepal': 4, 'Netherlands': 4, 'New Caledonia': 4, 'New Zealand': 4, 'Nicaragua': 4, 'Niger': 4, 'Nigeria': 4, 'Northern Mariana Islands': 4, 'Norway': 4, 'Oman': 4, 'Pakistan': 4, 'Palau': 4, 'Panama': 4, 'Papua New Guinea': 4, 'Paraguay': 4, 'Peru': 4, 'Philippines': 4, 'Poland': 4, 'Portugal': 4, 'Puerto Rico': 4, 'Qatar': 4, 'Romania': 4, 'Russian Federation': 4, 'Rwanda': 4, 'Samoa': 4, 'San Marino': 4, 'Sao Tome and Principe': 4, 'Saudi Arabia': 4, 'Senegal': 4, 'Seychelles': 4, 'Sierra Leone': 4, 'Singapore': 4, 'Slovak Republic': 4, 'Slovenia': 4, 'Solomon Islands': 4, 'Somalia': 4, 'South Africa': 4, 'South Sudan': 4, 'Spain': 4, 'Sri Lanka': 4, 'St. Kitts and Nevis': 4, 'St. Lucia': 4, 'St. Vincent and the Grenadines': 4, 'Sudan': 4, 'Suriname': 4, 'Swaziland': 4, 'Sweden': 4, 'Switzerland': 4, 'Syrian Arab Republic': 4, 'Tajikistan': 4, 'Tanzania': 4, 'Thailand': 4, 'Timor-Leste': 4, 'Togo': 4, 'Tonga': 4, 'Trinidad and Tobago': 4, 'Tunisia': 4, 'Turkey': 4, 'Turkmenistan': 4, 'Turks and Caicos Islands': 4, 'Tuvalu': 4, 'Uganda': 4, 'Ukraine': 4, 'United Arab Emirates': 4, 'United Kingdom': 4, 'United States': 4, 'Uruguay': 4, 'Uzbekistan': 4, 'Vanuatu': 4, '\"Venezuela': 4, 'Vietnam': 4, 'Virgin Islands (U.S.)': 4, '\"Yemen': 4, 'Zambia': 4, 'Zimbabwe': 4}"},{"path":"python-data-science-toolbox-part-2.html","id":"writing-a-generator-to-load-data-in-chunks-2","chapter":"Python Data Science Toolbox (Part 2)","heading":"Writing a generator to load data in chunks (2)","text":"\nprevious exercise, processed file line line given number lines. , however, want entire file?\n\ncase, useful use generators. Generators allow users lazily evaluate data.\nconcept lazy evaluation useful deal large datasets lets generate values efficient manner yielding chunks data time instead whole thing .\n\nexercise, define generator function read_large_file() produces generator object yields single line file time next() called . csv file ‘world_dev_ind.csv’ current directory use.\n\nNote open connection file, resulting file object already generator! wild, won’t explicitly create generator objects cases . However, pedagogical reasons, practice read_large_file() function. Go !\n\nfunction read_large_file(), read line file_object using method readline(). Assign result data.\n\nfunction read_large_file(), yield line read file data.\n\ncontext manager, create generator object gen_file calling generator function read_large_file() passing file .\n\nPrint first three lines produced generator object gen_file using next().\n\nWonderful work! Note since file object already generator, don’t explicitly create generator object read_large_file() function. However, still good practice create generators - well done!\n","code":"# Define read_large_file()\ndef read_large_file(file_object):\n    \"\"\"A generator function to read a large file lazily.\"\"\"\n\n    # Loop indefinitely until the end of the file\n    while True:\n\n        # Read a line from the file: data\n        data = file_object.readline()\n\n        # Break if this is the end of the file\n        if not data:\n            break\n\n        # Yield the line of data\n        yield data\n        \n# Open a connection to the file\nwith open('datasets/Python-Data-Science-Toolbox-Part-2/world_ind_pop_data.csv') as file:\n\n    # Create a generator object for the file: gen_file\n    gen_file = read_large_file(file)\n\n    # Print the first three lines of the file\n    print(next(gen_file))\n    print(next(gen_file))\n    print(next(gen_file))## CountryName,CountryCode,Year,Total Population,Urban population (% of total)\n## \n## Arab World,ARB,1960,92495902.0,31.285384211605397\n## \n## Caribbean small states,CSS,1960,4190810.0,31.5974898513652"},{"path":"python-data-science-toolbox-part-2.html","id":"writing-a-generator-to-load-data-in-chunks-3","chapter":"Python Data Science Toolbox (Part 2)","heading":"Writing a generator to load data in chunks (3)","text":"\nGreat! ’ve just created generator function can use help process large files.\n\nNow let’s use generator function process World Bank dataset like previously. process file line line, create dictionary counts many times country appears column dataset. exercise, however, won’t process just 1000 rows data, ’ll process entire dataset!\n\ngenerator function read_large_file() csv file ‘world_dev_ind.csv’ preloaded ready use. Go !\n\nBind file ‘world_dev_ind.csv’ file context manager open().\n\nComplete loop iterates generator call read_large_file() process rows file.\n\nGreat work!\n","code":"# Initialize an empty dictionary: counts_dict\ncounts_dict = {}\n\n# Open a connection to the file\nwith open('datasets/Python-Data-Science-Toolbox-Part-2/world_ind_pop_data.csv') as file:\n\n    # Iterate over the generator from read_large_file()\n    for line in read_large_file(file):\n\n        row = line.split(',')\n        first_col = row[0]\n\n        if first_col in counts_dict.keys():\n            counts_dict[first_col] += 1\n        else:\n            counts_dict[first_col] = 1\n\n# Print            \nprint(counts_dict)## {'CountryName': 1, 'Arab World': 55, 'Caribbean small states': 55, 'Central Europe and the Baltics': 55, 'East Asia & Pacific (all income levels)': 55, 'East Asia & Pacific (developing only)': 55, 'Euro area': 55, 'Europe & Central Asia (all income levels)': 55, 'Europe & Central Asia (developing only)': 55, 'European Union': 55, 'Fragile and conflict affected situations': 55, 'Heavily indebted poor countries (HIPC)': 55, 'High income': 55, 'High income: nonOECD': 55, 'High income: OECD': 55, 'Latin America & Caribbean (all income levels)': 55, 'Latin America & Caribbean (developing only)': 55, 'Least developed countries: UN classification': 55, 'Low & middle income': 55, 'Low income': 55, 'Lower middle income': 55, 'Middle East & North Africa (all income levels)': 55, 'Middle East & North Africa (developing only)': 55, 'Middle income': 55, 'North America': 55, 'OECD members': 55, 'Other small states': 55, 'Pacific island small states': 55, 'Small states': 55, 'South Asia': 55, 'Sub-Saharan Africa (all income levels)': 55, 'Sub-Saharan Africa (developing only)': 55, 'Upper middle income': 55, 'World': 55, 'Afghanistan': 55, 'Albania': 55, 'Algeria': 55, 'American Samoa': 55, 'Andorra': 55, 'Angola': 55, 'Antigua and Barbuda': 55, 'Argentina': 55, 'Armenia': 55, 'Aruba': 55, 'Australia': 55, 'Austria': 55, 'Azerbaijan': 55, '\"Bahamas': 55, 'Bahrain': 55, 'Bangladesh': 55, 'Barbados': 55, 'Belarus': 55, 'Belgium': 55, 'Belize': 55, 'Benin': 55, 'Bermuda': 55, 'Bhutan': 55, 'Bolivia': 55, 'Bosnia and Herzegovina': 55, 'Botswana': 55, 'Brazil': 55, 'Brunei Darussalam': 55, 'Bulgaria': 55, 'Burkina Faso': 55, 'Burundi': 55, 'Cabo Verde': 55, 'Cambodia': 55, 'Cameroon': 55, 'Canada': 55, 'Cayman Islands': 55, 'Central African Republic': 55, 'Chad': 55, 'Channel Islands': 55, 'Chile': 55, 'China': 55, 'Colombia': 55, 'Comoros': 55, '\"Congo': 110, 'Costa Rica': 55, \"Cote d'Ivoire\": 55, 'Croatia': 55, 'Cuba': 55, 'Curacao': 55, 'Cyprus': 55, 'Czech Republic': 55, 'Denmark': 55, 'Djibouti': 55, 'Dominica': 55, 'Dominican Republic': 55, 'Ecuador': 55, '\"Egypt': 55, 'El Salvador': 55, 'Equatorial Guinea': 55, 'Eritrea': 55, 'Estonia': 55, 'Ethiopia': 55, 'Faeroe Islands': 55, 'Fiji': 55, 'Finland': 55, 'France': 55, 'French Polynesia': 55, 'Gabon': 55, '\"Gambia': 55, 'Georgia': 55, 'Germany': 55, 'Ghana': 55, 'Greece': 55, 'Greenland': 55, 'Grenada': 55, 'Guam': 55, 'Guatemala': 55, 'Guinea': 55, 'Guinea-Bissau': 55, 'Guyana': 55, 'Haiti': 55, 'Honduras': 55, '\"Hong Kong SAR': 55, 'Hungary': 55, 'Iceland': 55, 'India': 55, 'Indonesia': 55, '\"Iran': 55, 'Iraq': 55, 'Ireland': 55, 'Isle of Man': 55, 'Israel': 55, 'Italy': 55, 'Jamaica': 55, 'Japan': 55, 'Jordan': 55, 'Kazakhstan': 55, 'Kenya': 55, 'Kiribati': 55, '\"Korea': 110, 'Kuwait': 52, 'Kyrgyz Republic': 55, 'Lao PDR': 55, 'Latvia': 55, 'Lebanon': 55, 'Lesotho': 55, 'Liberia': 55, 'Libya': 55, 'Liechtenstein': 55, 'Lithuania': 55, 'Luxembourg': 55, '\"Macao SAR': 55, '\"Macedonia': 55, 'Madagascar': 55, 'Malawi': 55, 'Malaysia': 55, 'Maldives': 55, 'Mali': 55, 'Malta': 55, 'Marshall Islands': 55, 'Mauritania': 55, 'Mauritius': 55, 'Mexico': 55, '\"Micronesia': 55, 'Moldova': 55, 'Monaco': 55, 'Mongolia': 55, 'Montenegro': 55, 'Morocco': 55, 'Mozambique': 55, 'Myanmar': 55, 'Namibia': 55, 'Nepal': 55, 'Netherlands': 55, 'New Caledonia': 55, 'New Zealand': 55, 'Nicaragua': 55, 'Niger': 55, 'Nigeria': 55, 'Northern Mariana Islands': 55, 'Norway': 55, 'Oman': 55, 'Pakistan': 55, 'Palau': 55, 'Panama': 55, 'Papua New Guinea': 55, 'Paraguay': 55, 'Peru': 55, 'Philippines': 55, 'Poland': 55, 'Portugal': 55, 'Puerto Rico': 55, 'Qatar': 55, 'Romania': 55, 'Russian Federation': 55, 'Rwanda': 55, 'Samoa': 55, 'San Marino': 55, 'Sao Tome and Principe': 55, 'Saudi Arabia': 55, 'Senegal': 55, 'Seychelles': 55, 'Sierra Leone': 55, 'Singapore': 55, 'Slovak Republic': 55, 'Slovenia': 55, 'Solomon Islands': 55, 'Somalia': 55, 'South Africa': 55, 'South Sudan': 55, 'Spain': 55, 'Sri Lanka': 55, 'St. Kitts and Nevis': 55, 'St. Lucia': 55, 'St. Vincent and the Grenadines': 55, 'Sudan': 55, 'Suriname': 55, 'Swaziland': 55, 'Sweden': 55, 'Switzerland': 55, 'Syrian Arab Republic': 55, 'Tajikistan': 55, 'Tanzania': 55, 'Thailand': 55, 'Timor-Leste': 55, 'Togo': 55, 'Tonga': 55, 'Trinidad and Tobago': 55, 'Tunisia': 55, 'Turkey': 55, 'Turkmenistan': 55, 'Turks and Caicos Islands': 55, 'Tuvalu': 55, 'Uganda': 55, 'Ukraine': 55, 'United Arab Emirates': 55, 'United Kingdom': 55, 'United States': 55, 'Uruguay': 55, 'Uzbekistan': 55, 'Vanuatu': 55, '\"Venezuela': 55, 'Vietnam': 55, 'Virgin Islands (U.S.)': 55, '\"Yemen': 55, 'Zambia': 55, 'Zimbabwe': 55, 'Serbia': 25, 'West Bank and Gaza': 25, 'Sint Maarten (Dutch part)': 17}"},{"path":"python-data-science-toolbox-part-2.html","id":"using-pandas-read_csv-iterator-for-streaming-data","chapter":"Python Data Science Toolbox (Part 2)","heading":"Using pandas’ read_csv iterator for streaming data","text":"","code":""},{"path":"python-data-science-toolbox-part-2.html","id":"writing-an-iterator-to-load-data-in-chunks-1","chapter":"Python Data Science Toolbox (Part 2)","heading":"Writing an iterator to load data in chunks (1)","text":"\nAnother way read data large store memory chunks read file DataFrames certain length, say, 100. example, pandas package (imported pd), can pd.read_csv(filename, chunksize=100). creates iterable reader object, means can use next() .\n\nexercise, read file small DataFrame chunks read_csv(). ’re going use World Bank Indicators data ‘ind_pop.csv’, available current directory, look urban population indicator numerous countries years.\n\nUse pd.read_csv() read ‘ind_pop.csv’ chunks size 10. Assign result df_reader.\n\nPrint first two chunks df_reader.\n\nGreat work!\n","code":"# Import the pandas package\nimport pandas as pd\n\n# Initialize reader object: df_reader\ndf_reader = pd.read_csv('datasets/Python-Data-Science-Toolbox-Part-2/world_ind_pop_data.csv', chunksize=10)\n\n# Print two chunks\nprint(next(df_reader))##                                  CountryName CountryCode  Year  Total Population  Urban population (% of total)\n## 0                                 Arab World         ARB  1960      9.249590e+07                      31.285384\n## 1                     Caribbean small states         CSS  1960      4.190810e+06                      31.597490\n## 2             Central Europe and the Baltics         CEB  1960      9.140158e+07                      44.507921\n## 3    East Asia & Pacific (all income levels)         EAS  1960      1.042475e+09                      22.471132\n## 4      East Asia & Pacific (developing only)         EAP  1960      8.964930e+08                      16.917679\n## 5                                  Euro area         EMU  1960      2.653965e+08                      62.096947\n## 6  Europe & Central Asia (all income levels)         ECS  1960      6.674890e+08                      55.378977\n## 7    Europe & Central Asia (developing only)         ECA  1960      1.553174e+08                      38.066129\n## 8                             European Union         EUU  1960      4.094985e+08                      61.212898\n## 9   Fragile and conflict affected situations         FCS  1960      1.203546e+08                      17.891972print(next(df_reader))##                                       CountryName CountryCode  Year  Total Population  Urban population (% of total)\n## 10         Heavily indebted poor countries (HIPC)         HPC  1960      1.624912e+08                      12.236046\n## 11                                    High income         HIC  1960      9.075975e+08                      62.680332\n## 12                           High income: nonOECD         NOC  1960      1.866767e+08                      56.107863\n## 13                              High income: OECD         OEC  1960      7.209208e+08                      64.285435\n## 14  Latin America & Caribbean (all income levels)         LCN  1960      2.205642e+08                      49.284688\n## 15    Latin America & Caribbean (developing only)         LAC  1960      1.776822e+08                      44.863308\n## 16   Least developed countries: UN classification         LDC  1960      2.410728e+08                       9.616261\n## 17                            Low & middle income         LMY  1960      2.127373e+09                      21.272894\n## 18                                     Low income         LIC  1960      1.571884e+08                      11.498396\n## 19                            Lower middle income         LMC  1960      9.429116e+08                      19.810513"},{"path":"python-data-science-toolbox-part-2.html","id":"writing-an-iterator-to-load-data-in-chunks-2","chapter":"Python Data Science Toolbox (Part 2)","heading":"Writing an iterator to load data in chunks (2)","text":"\nprevious exercise, used read_csv() read DataFrame chunks large dataset. exercise, read file using bigger DataFrame chunk size process data first chunk.\n\nprocess data, create another DataFrame composed rows specific country. zip together two columns new DataFrame, ‘Total Population’ ‘Urban population (% total)’. Finally, create list tuples zip object, tuple composed value two columns mentioned.\n\n’re going use data ‘ind_pop_data.csv’, available current directory. pandas imported pd.\n\nUse pd.read_csv() read file ‘ind_pop_data.csv’ chunks size 1000. Assign result urb_pop_reader.\n\nGet first DataFrame chunk iterable urb_pop_reader assign df_urb_pop.\n\nSelect rows df_urb_pop ‘CountryCode’ ‘CEB’. , compare whether df_urb_pop[‘CountryCode’] equal ‘CEB’ within square brackets df_urb_pop[____].\n\nUsing zip(), zip together ‘Total Population’ ‘Urban population (% total)’ columns df_pop_ceb. Assign resulting zip object pops.\n\nGreat work! Time step notch!\n","code":"# Initialize reader object: urb_pop_reader\nurb_pop_reader = pd.read_csv('datasets/Python-Data-Science-Toolbox-Part-2/world_ind_pop_data.csv', chunksize=1000)\n\n# Get the first DataFrame chunk: df_urb_pop\ndf_urb_pop = next(urb_pop_reader)\n\n# Check out the head of the DataFrame\nprint(df_urb_pop.head())##                                CountryName CountryCode  Year  Total Population  Urban population (% of total)\n## 0                               Arab World         ARB  1960      9.249590e+07                      31.285384\n## 1                   Caribbean small states         CSS  1960      4.190810e+06                      31.597490\n## 2           Central Europe and the Baltics         CEB  1960      9.140158e+07                      44.507921\n## 3  East Asia & Pacific (all income levels)         EAS  1960      1.042475e+09                      22.471132\n## 4    East Asia & Pacific (developing only)         EAP  1960      8.964930e+08                      16.917679# Check out specific country: df_pop_ceb\ndf_pop_ceb = df_urb_pop[df_urb_pop['CountryCode'] == 'CEB']\n\n# Zip DataFrame columns of interest: pops\npops = zip(df_pop_ceb['Total Population'], \n           df_pop_ceb['Urban population (% of total)'])\n\n# Turn zip object into list: pops_list\npops_list = list(pops)\n\n# Print pops_list\nprint(pops_list)## [(91401583.0, 44.5079211390026), (92237118.0, 45.206665319194), (93014890.0, 45.866564696018), (93845749.0, 46.5340927663649), (94722599.0, 47.2087429803526)]"},{"path":"python-data-science-toolbox-part-2.html","id":"writing-an-iterator-to-load-data-in-chunks-3","chapter":"Python Data Science Toolbox (Part 2)","heading":"Writing an iterator to load data in chunks (3)","text":"\n’re getting used reading processing data chunks now. Let’s push skills little adding column DataFrame.\n\nStarting code previous exercise, using list comprehension create values new column ‘Total Urban Population’ list tuples generated earlier. Recall previous exercise first second elements tuple consist , respectively, values columns ‘Total Population’ ‘Urban population (% total)’. values new column ‘Total Urban Population’, therefore, product first second element tuple. Furthermore, 2nd element percentage, need divide entire result 100, alternatively, multiply 0.01.\n\nalso plot data new column create visualization urban population data.\n\npackages pandas matplotlib.pyplot imported pd plt respectively use.\n\nWrite list comprehension generate list values pops_list new column ‘Total Urban Population’. output expression product first second element tuple pops_list. 2nd element percentage, also need either multiply result 0.01 divide 100. addition, note column ‘Total Urban Population’ able take integer values. ensure , make sure cast output expression integer int().\n\nCreate scatter plot x-axis values ‘Year’ column y-axis values ‘Total Urban Population’ column.\n\nGreat work!\n","code":"# Code from previous exercise\nurb_pop_reader = pd.read_csv('datasets/Python-Data-Science-Toolbox-Part-2/world_ind_pop_data.csv', chunksize=1000)\ndf_urb_pop = next(urb_pop_reader)\ndf_pop_ceb = df_urb_pop[df_urb_pop['CountryCode'] == 'CEB']\npops = zip(df_pop_ceb['Total Population'], \n           df_pop_ceb['Urban population (% of total)'])\npops_list = list(pops)\n\n# Use list comprehension to create new DataFrame column 'Total Urban Population'\ndf_pop_ceb['Total Urban Population'] = [int(tup[0] * tup[1] * 0.01) for tup in pops_list]## <string>:1: SettingWithCopyWarning: \n## A value is trying to be set on a copy of a slice from a DataFrame.\n## Try using .loc[row_indexer,col_indexer] = value instead\n## \n## See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copyimport matplotlib.pyplot as plt\n# Plot urban population data\ndf_pop_ceb.plot(kind='scatter', x='Year', y='Total Urban Population')\nplt.show()"},{"path":"python-data-science-toolbox-part-2.html","id":"writing-an-iterator-to-load-data-in-chunks-4","chapter":"Python Data Science Toolbox (Part 2)","heading":"Writing an iterator to load data in chunks (4)","text":"\nprevious exercises, ’ve processed data first DataFrame chunk. time, aggregate results DataFrame chunks dataset. basically means processing entire dataset now. neat ’re going able process entire large dataset just working smaller pieces !\n\n’re going use data ‘ind_pop_data.csv’, available current directory. packages pandas matplotlib.pyplot imported pd plt respectively use.\n\nInitialize empty DataFrame data using pd.DataFrame().\n\nloop, iterate urb_pop_reader able process DataFrame chunks dataset.\n\nUsing method append() DataFrame data, append df_pop_ceb data.\n\nGreat work!\n","code":"# Initialize reader object: urb_pop_reader\nurb_pop_reader = pd.read_csv('datasets/Python-Data-Science-Toolbox-Part-2/world_ind_pop_data.csv', chunksize=1000)\n\n# Initialize empty DataFrame: data\ndata = pd.DataFrame()\n\n# Iterate over each DataFrame chunk\nfor df_urb_pop in urb_pop_reader:\n\n    # Check out specific country: df_pop_ceb\n    df_pop_ceb = df_urb_pop[df_urb_pop['CountryCode'] == 'CEB']\n\n    # Zip DataFrame columns of interest: pops\n    pops = zip(df_pop_ceb['Total Population'],\n                df_pop_ceb['Urban population (% of total)'])\n\n    # Turn zip object into list: pops_list\n    pops_list = list(pops)\n\n    # Use list comprehension to create new DataFrame column 'Total Urban Population'\n    df_pop_ceb['Total Urban Population'] = [int(tup[0] * tup[1] * 0.01) for tup in pops_list]\n    \n    # Append DataFrame chunk to data: data\n    data = data.append(df_pop_ceb)## <string>:14: SettingWithCopyWarning: \n## A value is trying to be set on a copy of a slice from a DataFrame.\n## Try using .loc[row_indexer,col_indexer] = value instead\n## \n## See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n## <string>:17: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n## <string>:14: SettingWithCopyWarning: \n## A value is trying to be set on a copy of a slice from a DataFrame.\n## Try using .loc[row_indexer,col_indexer] = value instead\n## \n## See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n## <string>:17: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n## <string>:14: SettingWithCopyWarning: \n## A value is trying to be set on a copy of a slice from a DataFrame.\n## Try using .loc[row_indexer,col_indexer] = value instead\n## \n## See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n## <string>:17: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n## <string>:14: SettingWithCopyWarning: \n## A value is trying to be set on a copy of a slice from a DataFrame.\n## Try using .loc[row_indexer,col_indexer] = value instead\n## \n## See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n## <string>:17: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n## <string>:14: SettingWithCopyWarning: \n## A value is trying to be set on a copy of a slice from a DataFrame.\n## Try using .loc[row_indexer,col_indexer] = value instead\n## \n## See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n## <string>:17: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n## <string>:14: SettingWithCopyWarning: \n## A value is trying to be set on a copy of a slice from a DataFrame.\n## Try using .loc[row_indexer,col_indexer] = value instead\n## \n## See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n## <string>:17: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n## <string>:14: SettingWithCopyWarning: \n## A value is trying to be set on a copy of a slice from a DataFrame.\n## Try using .loc[row_indexer,col_indexer] = value instead\n## \n## See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n## <string>:17: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n## <string>:14: SettingWithCopyWarning: \n## A value is trying to be set on a copy of a slice from a DataFrame.\n## Try using .loc[row_indexer,col_indexer] = value instead\n## \n## See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n## <string>:17: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n## <string>:14: SettingWithCopyWarning: \n## A value is trying to be set on a copy of a slice from a DataFrame.\n## Try using .loc[row_indexer,col_indexer] = value instead\n## \n## See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n## <string>:17: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n## <string>:14: SettingWithCopyWarning: \n## A value is trying to be set on a copy of a slice from a DataFrame.\n## Try using .loc[row_indexer,col_indexer] = value instead\n## \n## See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n## <string>:17: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n## <string>:14: SettingWithCopyWarning: \n## A value is trying to be set on a copy of a slice from a DataFrame.\n## Try using .loc[row_indexer,col_indexer] = value instead\n## \n## See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n## <string>:17: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n## <string>:14: SettingWithCopyWarning: \n## A value is trying to be set on a copy of a slice from a DataFrame.\n## Try using .loc[row_indexer,col_indexer] = value instead\n## \n## See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n## <string>:17: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n## <string>:14: SettingWithCopyWarning: \n## A value is trying to be set on a copy of a slice from a DataFrame.\n## Try using .loc[row_indexer,col_indexer] = value instead\n## \n## See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n## <string>:17: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n## <string>:14: SettingWithCopyWarning: \n## A value is trying to be set on a copy of a slice from a DataFrame.\n## Try using .loc[row_indexer,col_indexer] = value instead\n## \n## See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n## <string>:17: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.# Plot urban population data\ndata.plot(kind='scatter', x='Year', y='Total Urban Population')\nplt.show()"},{"path":"python-data-science-toolbox-part-2.html","id":"writing-an-iterator-to-load-data-in-chunks-5","chapter":"Python Data Science Toolbox (Part 2)","heading":"Writing an iterator to load data in chunks (5)","text":"\nlast leg. ’ve learned lot processing large dataset chunks. last exercise, put code processing data single function can reuse code without rewrite things .\n\n’re going define function plot_pop() takes two arguments: filename file processed, country code rows want process dataset.\n\nprevious code ’ve written previous exercises housed plot_pop(), calling function already following:\n\nLoading file chunk chunk,\n\nCreating new column urban population values, \n\nPlotting urban population data.\n\n’s lot work, function now makes convenient repeat process whatever file country code want process visualize!\n\n’re going use data ‘ind_pop_data.csv’, available current directory. packages pandas matplotlib.pyplot imported pd plt respectively use.\n\ndone, take moment look plots reflect new skills acquired. journey doesn’t end ! enjoyed working data, can continue exploring using pre-processed version available Kaggle.\n\nDefine function plot_pop() two arguments: first filename file process second country_code country processed dataset.\n\nCall plot_pop() process data country code ‘CEB’ file ‘ind_pop_data.csv’.\n\nCall plot_pop() process data country code ‘ARB’ file ‘ind_pop_data.csv’.\n\nGreat work!\n","code":"# Define plot_pop()\ndef plot_pop(filename, country_code):\n\n    # Initialize reader object: urb_pop_reader\n    urb_pop_reader = pd.read_csv(filename, chunksize=1000)\n\n    # Initialize empty DataFrame: data\n    data = pd.DataFrame()\n    \n    # Iterate over each DataFrame chunk\n    for df_urb_pop in urb_pop_reader:\n        # Check out specific country: df_pop_ceb\n        df_pop_ceb = df_urb_pop[df_urb_pop['CountryCode'] == country_code]\n\n        # Zip DataFrame columns of interest: pops\n        pops = zip(df_pop_ceb['Total Population'],\n                    df_pop_ceb['Urban population (% of total)'])\n\n        # Turn zip object into list: pops_list\n        pops_list = list(pops)\n\n        # Use list comprehension to create new DataFrame column 'Total Urban Population'\n        df_pop_ceb['Total Urban Population'] = [int(tup[0] * tup[1] * 0.01) for tup in pops_list]\n    \n        # Append DataFrame chunk to data: data\n        data = data.append(df_pop_ceb)\n\n    # Plot urban population data\n    data.plot(kind='scatter', x='Year', y='Total Urban Population')\n    plt.show()# Set the filename: fn\nfn = 'datasets/Python-Data-Science-Toolbox-Part-2/world_ind_pop_data.csv'\n\n# Call plot_pop for country code 'CEB'\nplot_pop(fn, 'CEB')## <string>:22: SettingWithCopyWarning: \n## A value is trying to be set on a copy of a slice from a DataFrame.\n## Try using .loc[row_indexer,col_indexer] = value instead\n## \n## See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n## <string>:25: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n## <string>:22: SettingWithCopyWarning: \n## A value is trying to be set on a copy of a slice from a DataFrame.\n## Try using .loc[row_indexer,col_indexer] = value instead\n## \n## See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n## <string>:25: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n## <string>:22: SettingWithCopyWarning: \n## A value is trying to be set on a copy of a slice from a DataFrame.\n## Try using .loc[row_indexer,col_indexer] = value instead\n## \n## See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n## <string>:25: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n## <string>:22: SettingWithCopyWarning: \n## A value is trying to be set on a copy of a slice from a DataFrame.\n## Try using .loc[row_indexer,col_indexer] = value instead\n## \n## See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n## <string>:25: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n## <string>:22: SettingWithCopyWarning: \n## A value is trying to be set on a copy of a slice from a DataFrame.\n## Try using .loc[row_indexer,col_indexer] = value instead\n## \n## See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n## <string>:25: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n## <string>:22: SettingWithCopyWarning: \n## A value is trying to be set on a copy of a slice from a DataFrame.\n## Try using .loc[row_indexer,col_indexer] = value instead\n## \n## See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n## <string>:25: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n## <string>:22: SettingWithCopyWarning: \n## A value is trying to be set on a copy of a slice from a DataFrame.\n## Try using .loc[row_indexer,col_indexer] = value instead\n## \n## See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n## <string>:25: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n## <string>:22: SettingWithCopyWarning: \n## A value is trying to be set on a copy of a slice from a DataFrame.\n## Try using .loc[row_indexer,col_indexer] = value instead\n## \n## See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n## <string>:25: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n## <string>:22: SettingWithCopyWarning: \n## A value is trying to be set on a copy of a slice from a DataFrame.\n## Try using .loc[row_indexer,col_indexer] = value instead\n## \n## See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n## <string>:25: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n## <string>:22: SettingWithCopyWarning: \n## A value is trying to be set on a copy of a slice from a DataFrame.\n## Try using .loc[row_indexer,col_indexer] = value instead\n## \n## See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n## <string>:25: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n## <string>:22: SettingWithCopyWarning: \n## A value is trying to be set on a copy of a slice from a DataFrame.\n## Try using .loc[row_indexer,col_indexer] = value instead\n## \n## See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n## <string>:25: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n## <string>:22: SettingWithCopyWarning: \n## A value is trying to be set on a copy of a slice from a DataFrame.\n## Try using .loc[row_indexer,col_indexer] = value instead\n## \n## See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n## <string>:25: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n## <string>:22: SettingWithCopyWarning: \n## A value is trying to be set on a copy of a slice from a DataFrame.\n## Try using .loc[row_indexer,col_indexer] = value instead\n## \n## See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n## <string>:25: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n## <string>:22: SettingWithCopyWarning: \n## A value is trying to be set on a copy of a slice from a DataFrame.\n## Try using .loc[row_indexer,col_indexer] = value instead\n## \n## See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n## <string>:25: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.# Call plot_pop for country code 'ARB'\nplot_pop(fn, 'ARB')## <string>:22: SettingWithCopyWarning: \n## A value is trying to be set on a copy of a slice from a DataFrame.\n## Try using .loc[row_indexer,col_indexer] = value instead\n## \n## See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n## <string>:25: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n## <string>:22: SettingWithCopyWarning: \n## A value is trying to be set on a copy of a slice from a DataFrame.\n## Try using .loc[row_indexer,col_indexer] = value instead\n## \n## See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n## <string>:25: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n## <string>:22: SettingWithCopyWarning: \n## A value is trying to be set on a copy of a slice from a DataFrame.\n## Try using .loc[row_indexer,col_indexer] = value instead\n## \n## See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n## <string>:25: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n## <string>:22: SettingWithCopyWarning: \n## A value is trying to be set on a copy of a slice from a DataFrame.\n## Try using .loc[row_indexer,col_indexer] = value instead\n## \n## See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n## <string>:25: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n## <string>:22: SettingWithCopyWarning: \n## A value is trying to be set on a copy of a slice from a DataFrame.\n## Try using .loc[row_indexer,col_indexer] = value instead\n## \n## See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n## <string>:25: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n## <string>:22: SettingWithCopyWarning: \n## A value is trying to be set on a copy of a slice from a DataFrame.\n## Try using .loc[row_indexer,col_indexer] = value instead\n## \n## See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n## <string>:25: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n## <string>:22: SettingWithCopyWarning: \n## A value is trying to be set on a copy of a slice from a DataFrame.\n## Try using .loc[row_indexer,col_indexer] = value instead\n## \n## See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n## <string>:25: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n## <string>:22: SettingWithCopyWarning: \n## A value is trying to be set on a copy of a slice from a DataFrame.\n## Try using .loc[row_indexer,col_indexer] = value instead\n## \n## See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n## <string>:25: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n## <string>:22: SettingWithCopyWarning: \n## A value is trying to be set on a copy of a slice from a DataFrame.\n## Try using .loc[row_indexer,col_indexer] = value instead\n## \n## See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n## <string>:25: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n## <string>:22: SettingWithCopyWarning: \n## A value is trying to be set on a copy of a slice from a DataFrame.\n## Try using .loc[row_indexer,col_indexer] = value instead\n## \n## See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n## <string>:25: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n## <string>:22: SettingWithCopyWarning: \n## A value is trying to be set on a copy of a slice from a DataFrame.\n## Try using .loc[row_indexer,col_indexer] = value instead\n## \n## See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n## <string>:25: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n## <string>:22: SettingWithCopyWarning: \n## A value is trying to be set on a copy of a slice from a DataFrame.\n## Try using .loc[row_indexer,col_indexer] = value instead\n## \n## See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n## <string>:25: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n## <string>:22: SettingWithCopyWarning: \n## A value is trying to be set on a copy of a slice from a DataFrame.\n## Try using .loc[row_indexer,col_indexer] = value instead\n## \n## See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n## <string>:25: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n## <string>:22: SettingWithCopyWarning: \n## A value is trying to be set on a copy of a slice from a DataFrame.\n## Try using .loc[row_indexer,col_indexer] = value instead\n## \n## See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n## <string>:25: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead."},{"path":"python-data-science-toolbox-part-2.html","id":"final-thoughts","chapter":"Python Data Science Toolbox (Part 2)","heading":"Final thoughts","text":"","code":""},{"path":"python-data-science-toolbox-part-2.html","id":"final-thoughts-1","chapter":"Python Data Science Toolbox (Part 2)","heading":"Final thoughts","text":"Wow, sure come long way! Congratulations making case study, apply skills Data Science toolbox courses.","code":""},{"path":"python-data-science-toolbox-part-2.html","id":"youve-applied-your-skills-in","chapter":"Python Data Science Toolbox (Part 2)","heading":"You’ve applied your skills in:","text":"just used new skills writing user-defined functions, iterators, list comprehensions generators explore extract results World Bank World Development Indicators dataset. tools ’ll utilize time time work Data Scientist worked hard earn Pythonista stripes.","code":""},{"path":"python-data-science-toolbox-part-2.html","id":"congratulations-2","chapter":"Python Data Science Toolbox (Part 2)","heading":"Congratulations!","text":"Good work keep coding PythonLand!","code":""},{"path":"writing-efficient-python-code.html","id":"writing-efficient-python-code","chapter":"Writing Efficient Python Code","heading":"Writing Efficient Python Code","text":"Logan Thomas\nLogan member Technical Training team Enthought – organization provides digital transformation, software consulting, training services individuals companies worldwide. Scientific Software Technical Trainer, focuses helping students write robust, scalable, efficient Python code. self-proclaimed Python enthusiast, Logan enjoys attending meetups conferences Austin, Texas area share knowledge others.\nCourse DescriptionAs Data Scientist, majority time spent gleaning actionable insights data – waiting code finish running. Writing efficient Python code can help reduce runtime save computational resources, ultimately freeing things love Data Scientist. course, ’ll learn use Python’s built-data structures, functions, modules write cleaner, faster, efficient code. ’ll explore time profile code order find bottlenecks. , ’ll practice eliminating bottlenecks, bad design patterns, using Python’s Standard Library, NumPy, pandas. completing course, ’ll necessary tools start writing efficient Python code!","code":""},{"path":"writing-efficient-python-code.html","id":"foundations-for-efficiencies","chapter":"Writing Efficient Python Code","heading":"Foundations for efficiencies","text":"\nchapter, ’ll learn means write efficient Python code. ’ll explore Python’s Standard Library, learn NumPy arrays, practice using Python’s built-tools. chapter builds foundation concepts covered ahead.\n","code":""},{"path":"writing-efficient-python-code.html","id":"welcome","chapter":"Writing Efficient Python Code","heading":"Welcome!","text":"","code":""},{"path":"writing-efficient-python-code.html","id":"pop-quiz-what-is-efficient","chapter":"Writing Efficient Python Code","heading":"Pop quiz: what is efficient","text":"\ncontext course, meant efficient Python code?\nCode executes quickly task hand, minimizes memory footprint follows Python’s coding style principles.Code fast runtime, consumes small amount memory can verbose/hard interpret (readability doesn’t matter).Code returns correct result regardless execution time resource consumption.\nCorrect! Writing efficient Python code minimizes runtime memory usage also following idioms Zen Python.\n","code":""},{"path":"writing-efficient-python-code.html","id":"a-taste-of-things-to-come","chapter":"Writing Efficient Python Code","heading":"A taste of things to come","text":"\nexercise, ’ll explore Non-Pythonic Pythonic ways looping list.\n\nSuppose wanted collect names list six letters . programming languages, typical approach create index variable (), use iterate list, use statement collect names six letters :\n\nLet’s explore Pythonic ways .\n\nPrint list, new_list, created using Non-Pythonic approach.\n\nPythonic approach loop contents names, rather using index variable. Print better_list.\n\nbest Pythonic way using list comprehension. Print best_list.\n\nGreat work! Don’t get caught coding concepts just yet (’ll practice using lists, loops, list comprehensions later ). important thing notice following Python’s guiding principles allows write cleaner efficient code.  Remember, Pythonic code == efficient code. ’ll explore , , Pythonic concepts later course, now, just taste things come!\n","code":"names = ['Jerry', 'Kramer', 'Elaine', 'George', 'Newman']\ni = 0\nnew_list= []\nwhile i < len(names):\n    if len(names[i]) >= 6:\n        new_list.append(names[i])\n    i += 1\n# edited/added\nnames = ['Jerry', 'Kramer', 'Elaine', 'George', 'Newman']\n\n# Print the list created using the Non-Pythonic approach\ni = 0\nnew_list= []\nwhile i < len(names):\n    if len(names[i]) >= 6:\n        new_list.append(names[i])\n    i += 1\nprint(new_list)## ['Kramer', 'Elaine', 'George', 'Newman']# Print the list created by looping over the contents of names\nbetter_list = []\nfor name in names:\n    if len(name) >= 6:\n        better_list.append(name)\nprint(better_list)## ['Kramer', 'Elaine', 'George', 'Newman']# Print the list created by using list comprehension\nbest_list = [name for name in names if len(name) >= 6]\nprint(best_list)## ['Kramer', 'Elaine', 'George', 'Newman']"},{"path":"writing-efficient-python-code.html","id":"zen-of-python","chapter":"Writing Efficient Python Code","heading":"Zen of Python","text":"\nvideo, covered Zen Python written Tim Peters, lists 19 idioms serve guiding principles Pythonista. Python hundreds Python Enhancement Proposals, commonly referred PEPs. Zen Python one PEPs documented PEP20.\n\nOne little Easter Egg Python ability print Zen Python using command import . Let’s take look one idioms listed guiding principles.\n\nType run command import within IPython console answer following question:\n\n7th idiom Zen Python?\nFlat better nested.Beautiful better ugly.Readability counts.Python best programming language ever.\n’s correct! Python design philosophy emphasizes readability. Throughout course, ’ll see writing efficient Python code goes hand hand writing code easy understand. Faster code good, faster & readable code best!\n","code":""},{"path":"writing-efficient-python-code.html","id":"building-with-built-ins","chapter":"Writing Efficient Python Code","heading":"Building with built-ins","text":"","code":""},{"path":"writing-efficient-python-code.html","id":"built-in-practice-range","chapter":"Writing Efficient Python Code","heading":"Built-in practice: range()","text":"\nexercise, practice using Python’s built-function range(). Remember can use range() different ways:\n\n1) Create sequence numbers 0 stop value (exclusive). useful want create simple sequence numbers starting zero:\n\n2) Create sequence numbers start value stop value (exclusive) step size. useful want create sequence numbers increments value one. example, list even numbers:\n\nCreate range object starts zero ends five. use stop argument.\n\nConvert nums variable list called nums_list.\n\nCreate new list called nums_list2 starts one, ends eleven, increments two unpacking range object using star character (*).\n\nNicely done! Notice using Python’s range() function allows create range object numbers without explicitly typing . can convert range object list using list() function unpacking list using star character (*). Cool!\n","code":"range(stop)\n\n# Example\nlist(range(11))\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nrange(start, stop, step)\n\n# Example\nlist(range(2,11,2))\n\n[2, 4, 6, 8, 10]\n# Create a range object that goes from 0 to 5\nnums = range(6)\nprint(type(nums))\n\n# Convert nums to a list## <class 'range'>nums_list = list(nums)\nprint(nums_list)## [0, 1, 2, 3, 4, 5]# Create a new list of odd numbers from 1 to 11 by unpacking a range object\nnums_list2 = [*range(1,12,2)]\nprint(nums_list2)## [1, 3, 5, 7, 9, 11]"},{"path":"writing-efficient-python-code.html","id":"built-in-practice-enumerate","chapter":"Writing Efficient Python Code","heading":"Built-in practice: enumerate()","text":"\nexercise, ’ll practice using Python’s built-function enumerate(). function useful obtaining indexed list. example, suppose list people arrived party hosting. list ordered arrival (Jerry first arrive, followed Kramer, etc.):\n\nwanted attach index representing person’s arrival order, use following loop:\n\n, ’s efficient solution. Let’s explore use enumerate() make efficient.\n\nInstead using range(len(names)), update loop use index variable name iterator variable use enumerate().\n\nRewrite previous loop using enumerate() list comprehension create new list, indexed_names_comp.\n\nCreate another list (indexed_names_unpack) using star character (*) unpack enumerate object created using enumerate() names. time, start index enumerate() one instead zero.\n\nAwesome! Using Python’s built-enumerate() function allows create index item object give . can use list comprehension, even unpack enumerate object directly list, write nice simple one-liner.\n","code":"names = ['Jerry', 'Kramer', 'Elaine', 'George', 'Newman']\nindexed_names = []\nfor i in range(len(names)):\n    index_name = (i, names[i])\n    indexed_names.append(index_name)\n\n[(0,'Jerry'),(1,'Kramer'),(2,'Elaine'),(3,'George'),(4,'Newman')]\n# Rewrite the for loop to use enumerate\nindexed_names = []\nfor i,name in enumerate(names):\n    index_name = (i,name)\n    indexed_names.append(index_name) \nprint(indexed_names)## [(0, 'Jerry'), (1, 'Kramer'), (2, 'Elaine'), (3, 'George'), (4, 'Newman')]# Rewrite the above for loop using list comprehension\nindexed_names_comp = [(i,name) for i,name in enumerate(names)]\nprint(indexed_names_comp)## [(0, 'Jerry'), (1, 'Kramer'), (2, 'Elaine'), (3, 'George'), (4, 'Newman')]# Unpack an enumerate object with a starting index of one\nindexed_names_unpack = [*enumerate(names, 1)]\nprint(indexed_names_unpack)## [(1, 'Jerry'), (2, 'Kramer'), (3, 'Elaine'), (4, 'George'), (5, 'Newman')]"},{"path":"writing-efficient-python-code.html","id":"built-in-practice-map","chapter":"Writing Efficient Python Code","heading":"Built-in practice: map()","text":"\nexercise, ’ll practice using Python’s built-map() function apply function every element object. Let’s look list party guests:\n\nSuppose wanted create new list (called names_uppercase) converted letters name uppercase. accomplish loop:\n\nLet’s explore using map() function efficiently one line code.\n\nUse map() method str.upper() convert name list names uppercase. Save variable names_map.\n\nPrint data type names_map.\n\nUnpack contents names_map list called names_uppercase using star character (*).\n\nPrint names_uppercase observe contents.\n\nWell done! used Python’s built-map() function apply str.upper() method element names object. Later course, ’ll explore using map() can provide efficiency improvements code.\n","code":"names = ['Jerry', 'Kramer', 'Elaine', 'George', 'Newman']\nnames_uppercase = []\n\nfor name in names:\n  names_uppercase.append(name.upper())\n\n['JERRY', 'KRAMER', 'ELAINE', 'GEORGE', 'NEWMAN']\n# Use map to apply str.upper to each element in names\nnames_map  = map(str.upper, names)\n\n# Print the type of the names_map\nprint(type(names_map))## <class 'map'># Unpack names_map into a list\nnames_uppercase = [*names_map]\n\n# Print the list created above\nprint(names_uppercase)## ['JERRY', 'KRAMER', 'ELAINE', 'GEORGE', 'NEWMAN']"},{"path":"writing-efficient-python-code.html","id":"the-power-of-numpy-arrays","chapter":"Writing Efficient Python Code","heading":"The power of NumPy arrays","text":"","code":""},{"path":"writing-efficient-python-code.html","id":"practice-with-numpy-arrays","chapter":"Writing Efficient Python Code","heading":"Practice with NumPy arrays","text":"\nLet’s practice slicing numpy arrays using NumPy’s broadcasting concept. Remember, broadcasting refers numpy array’s ability vectorize operations, performed elements object .\n\ntwo-dimensional numpy array loaded session (called nums) printed console convenience. numpy imported session np.\n\nPrint second row nums.\n\nPrint items nums greater six.\n\nCreate nums_dbl doubles number nums.\n\nReplace third column nums new column adds 1 item original column.\n\ncompared list object, two advantages using numpy array?\nnumpy array data structure can used numpy package often less verbose indexing syntax.numpy array contains homogeneous data types (reduces memory consumption) provides ability apply operations elements broadcasting.numpy array supports boolean indexing much better one-dimensional indexing capabilities.list object numpy array identical.\nWell done! ’re slicing numpy arrays like pro learning take advantage NumPy’s broadcasting concept. Using numpy arrays allows take advantage array’s memory efficient nature easily perform mathematical operations data.\n","code":"# edited/added\nimport numpy as np\nnums = np.array([[ 1,  2,  3,  4,  5], [ 6,  7,  8,  9, 10]])# Print second row of nums\nprint(nums[1,:])\n\n# Print all elements of nums that are greater than six## [ 6  7  8  9 10]print(nums[nums > 6])## [ 7  8  9 10]# Double every element of nums\nnums_dbl = nums * 2\nprint(nums_dbl)## [[ 2  4  6  8 10]\n##  [12 14 16 18 20]]# Replace the third column of nums\nnums[:,2] = nums[:,2] + 1\nprint(nums)## [[ 1  2  4  4  5]\n##  [ 6  7  9  9 10]]"},{"path":"writing-efficient-python-code.html","id":"bringing-it-all-together-festivus","chapter":"Writing Efficient Python Code","heading":"Bringing it all together: Festivus!","text":"\nexercise, throwing party—Festivus !\n\nlist guests (names list). guest, whatever reason, decided show party 10-minute increments. example, Jerry shows Festivus 10 minutes party’s start time, Kramer shows 20 minutes party, forth.\n\nwant write simple lines code, using built-ins covered, welcome guests let know many minutes late party. Note numpy imported session np names list loaded well.\n\nLet’s welcome guests!\n\nUse range() create list arrival times (10 50 incremented 10). Create list arrival_times unpacking range object.\n\nrealize clock three minutes fast. Convert arrival_times list numpy array (called arrival_times_np) use NumPy broadcasting subtract three minutes arrival time.\n\nUse list comprehension enumerate() pair guest names list updated arrival time new_times array. ’ll need use index variable created using enumerate() new_times index names list.\n\nfunction named welcome_guest() pre-loaded session. Use map() apply function element guest_arrivals list save variable welcome_map.\n\nCongratulations happy Festivus! ’re using Python built-ins like pro well way writing efficient Python code. Believe , way make simple lines code even efficient! ’ll cover future chapter, continue see !\n","code":"# edited/added\ndef welcome_guest(guest_and_time):\n    \"\"\"\n    Returns a welcome string for the guest_and_time tuple.\n    \n    Args:\n        guest_and_time (tuple): The guest and time tuple to create\n            a welcome string for.\n            \n    Returns:\n        welcome_string (str): A string welcoming the guest to Festivus.\n        'Welcome to Festivus {guest}... You're {time} min late.'\n    \n    \"\"\"\n    guest = guest_and_time[0]\n    arrival_time = guest_and_time[1]\n    welcome_string = \"Welcome to Festivus {}... You're {} min late.\".format(guest,arrival_time)\n    return welcome_string# Create a list of arrival times\narrival_times = [*range(10, 60, 10)]\n\nprint(arrival_times)## [10, 20, 30, 40, 50]# Create a list of arrival times\narrival_times = [*range(10,60,10)]\n\n# Convert arrival_times to an array and update the times\narrival_times_np = np.array(arrival_times)\nnew_times = arrival_times_np - 3\n\nprint(new_times)## [ 7 17 27 37 47]# Create a list of arrival times\narrival_times = [*range(10,60,10)]\n\n# Convert arrival_times to an array and update the times\narrival_times_np = np.array(arrival_times)\nnew_times = arrival_times_np - 3\n\n# Use list comprehension and enumerate to pair guests to new times\nguest_arrivals = [(names[i],time) for i,time in enumerate(new_times)]\n\nprint(guest_arrivals)## [('Jerry', 7), ('Kramer', 17), ('Elaine', 27), ('George', 37), ('Newman', 47)]# Create a list of arrival times\narrival_times = [*range(10,60,10)]\n\n# Convert arrival_times to an array and update the times\narrival_times_np = np.array(arrival_times)\nnew_times = arrival_times_np - 3\n\n# Use list comprehension and enumerate to pair guests to new times\nguest_arrivals = [(names[i],time) for i,time in enumerate(new_times)]\n\n# Map the welcome_guest function to each (guest,time) pair\nwelcome_map = map(welcome_guest, guest_arrivals)\n\nguest_welcomes = [*welcome_map]\nprint(*guest_welcomes, sep='\\n')## Welcome to Festivus Jerry... You're 7 min late.\n## Welcome to Festivus Kramer... You're 17 min late.\n## Welcome to Festivus Elaine... You're 27 min late.\n## Welcome to Festivus George... You're 37 min late.\n## Welcome to Festivus Newman... You're 47 min late."},{"path":"writing-efficient-python-code.html","id":"timing-and-profiling-code","chapter":"Writing Efficient Python Code","heading":"Timing and profiling code","text":"\nchapter, learn gather compare runtimes different coding approaches. ’ll practice using line_profiler memory_profiler packages profile code base spot bottlenecks. , ’ll put learnings practice replacing bottlenecks efficient Python code.\n","code":""},{"path":"writing-efficient-python-code.html","id":"examining-runtime","chapter":"Writing Efficient Python Code","heading":"Examining runtime","text":"","code":""},{"path":"writing-efficient-python-code.html","id":"using-timeit-your-turn","chapter":"Writing Efficient Python Code","heading":"Using %timeit: your turn!","text":"\n’d like create list integers 0 50 using range() function. However, unsure whether using list comprehension unpacking range object list faster. Let’s use %timeit find best implementation.\n\nconvenience, reference table time orders magnitude provided (faster top).\n\nUse list comprehension range() create list integers 0 50 called nums_list_comp.\n\nUse range() create list integers 0 50 unpack contents list called nums_unpack.\n\nUse %timeit within IPython console (.e. within script.py window) compare runtimes creating list integers 0 50 using list comprehension vs. unpacking range object. Don’t include print() statements timing.\n\nmethod faster?\nList comprehension faster unpacking range().Unpacking range object faster list comprehension.methods runtime.\nNice work! used %timeit gather compare runtimes! Although list comprehension useful powerful tool, sometimes unpacking object can save time looks little cleaner.\n","code":"# Create a list of integers (0-50) using list comprehension\nnums_list_comp = [num for num in range(51)]\nprint(nums_list_comp)## [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]# Create a list of integers (0-50) using list comprehension\nnums_list_comp = [num for num in range(51)]\nprint(nums_list_comp)## [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]# Create a list of integers (0-50) by unpacking range\nnums_unpack = [*range(51)]\nprint(nums_unpack)## [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]"},{"path":"writing-efficient-python-code.html","id":"using-timeit-specifying-number-of-runs-and-loops","chapter":"Writing Efficient Python Code","heading":"Using %timeit: specifying number of runs and loops","text":"\nlist 480 superheroes loaded session (called heroes). ’d like analyze runtime converting heroes list set. Instead relying default settings %timeit, ’d like use 5 runs 25 loops per run.\n\ncorrect syntax using %timeit using 5 runs 25 loops per run?\ntimeit -runs5 -loops25 set(heroes)%%timeit -r5 -n25 set(heroes)%timeit set(heroes), 5, 25%timeit -r5 -n25 set(heroes)\nCorrect! %timeit lets specify number runs number loops want consider -r -n flags. can use -r5 -n25 specify 5 iterations 25 loops calculating average standard deviation runtime code.\n","code":""},{"path":"writing-efficient-python-code.html","id":"using-timeit-formal-name-or-literal-syntax","chapter":"Writing Efficient Python Code","heading":"Using %timeit: formal name or literal syntax","text":"\nPython allows create data structures using either formal name literal syntax. exercise, ’ll explore using literal syntax creating data structure can speed runtimes.\n\nCreate empty list called formal_list using formal name (list()).\n\nCreate empty list called literal_list using literal syntax ([]).\n\nPrint type formal_list literal_list show naming conventions create list.\n\nUse %timeit IPython console compare runtimes creating list using formal name (list()) literal syntax ([]). Don’t include print() statements timing.\n\nnaming convention faster?\nUsing formal name (list()) create list faster.Using literal syntax ([]) create list faster.naming conventions runtime.\nGreat job! Using Python’s literal syntax define data structure can speed runtime. Consider using literal syntaxes (like [] instead list(), {} instead dict(), () instead tuple()), applicable, gain speed.\n","code":"# Create a list using the formal name\nformal_list = list()\nprint(formal_list)## []# Create a list using the literal syntax\nliteral_list = []\nprint(literal_list)## []# Create a list using the formal name\nformal_list = list()\nprint(formal_list)## []# Create a list using the literal syntax\nliteral_list = []\nprint(literal_list)## []# Print out the type of formal_list\nprint(type(formal_list))## <class 'list'># Print out the type of literal_list\nprint(type(literal_list))## <class 'list'>"},{"path":"writing-efficient-python-code.html","id":"using-cell-magic-mode-timeit","chapter":"Writing Efficient Python Code","heading":"Using cell magic mode (%%timeit)","text":"\n, ’ll working superheroes dataset. exercise, list hero’s weight kilograms (called wts) loaded session. ’d like convert weights pounds.\n\naccomplish using loop:\n\nuse numpy array accomplish task:\n\nUse %%timeit IPython console compare runtimes two approaches. Make sure press SHIFT+ENTER magic command add new line writing code wish time. ’ve finished coding, answer following question:\n\ntechniques faster?\nloop technique faster.numpy technique faster.techniques similar runtimes.\nNice work! used %%timeit (cell magic mode) time multiple lines code. Converting wts list NumPy array taking advantage NumPy array broadcasting saved time! Moving forward, remember can use %timeit gather runtime single line code (line magic mode) %%timeit get runtime multiple lines code.\n","code":"hero_wts_lbs = []\nfor wt in wts:\n    hero_wts_lbs.append(wt * 2.20462)\nwts_np = np.array(wts)\nhero_wts_lbs_np = wts_np * 2.20462\n"},{"path":"writing-efficient-python-code.html","id":"code-profiling-for-runtime","chapter":"Writing Efficient Python Code","heading":"Code profiling for runtime","text":"","code":""},{"path":"writing-efficient-python-code.html","id":"pop-quiz-steps-for-using-lprun","chapter":"Writing Efficient Python Code","heading":"Pop quiz: steps for using %lprun","text":"\nconvert_units() function, converts heights weights favorite superheroes metric units Imperial units.\n\nSuppose list superheroes (named heroes) along hero’s height (centimeters) weight (kilograms) loaded NumPy arrays (named hts wts respectively).\n\nnecessary steps need take order profile convert_units() function acting superheroes data ’d like see line--line runtimes?\nUse %load_ext line_profiler load line_profiler within IPython session.Use %lprun -f convert_units convert_units(heroes, hts, wts) get line--line runtimes.Use %timeit convert_units(heroes, hts, wts) gather runtimes.first second options necessary.\nGreat job! Now ’ve reviewed necessary steps profiling function runtime, ’s time practice profiling !\n","code":"def convert_units(heroes, heights, weights):\n\n    new_hts = [ht * 0.39370  for ht in heights]\n    new_wts = [wt * 2.20462  for wt in weights]\n\n    hero_data = {}\n\n    for i,hero in enumerate(heroes):\n        hero_data[hero] = (new_hts[i], new_wts[i])\n\n    return hero_data\n"},{"path":"writing-efficient-python-code.html","id":"using-lprun-spot-bottlenecks","chapter":"Writing Efficient Python Code","heading":"Using %lprun: spot bottlenecks","text":"\nProfiling function allows dig deeper function’s source code potentially spot bottlenecks. see certain lines code taking majority function’s runtime, indication may want deploy different, efficient technique.\n\nLets dig deeper convert_units() function.\n\nLoad line_profiler package IPython session. , use %lprun profile convert_units() function acting superheroes data. Remember use special syntax working %lprun (’ll provide -f flag specifying function ’d like profile).\n\nconvert_units() function, heroes list, hts array, wts array loaded session. ’ve finished coding, answer following question:\n\npercentage time spent new_hts list comprehension line code relative total amount time spent convert_units() function?\n0% - 10%11% - 20%21% - 50%51% - 100%\n’s right! seems like may potential bottleneck function. Can think way make efficient? ’ll explore possible upgrade next exercise.\n","code":"def convert_units(heroes, heights, weights):\n\n    new_hts = [ht * 0.39370  for ht in heights]\n    new_wts = [wt * 2.20462  for wt in weights]\n\n    hero_data = {}\n\n    for i,hero in enumerate(heroes):\n        hero_data[hero] = (new_hts[i], new_wts[i])\n\n    return hero_data\n"},{"path":"writing-efficient-python-code.html","id":"using-lprun-fix-the-bottleneck","chapter":"Writing Efficient Python Code","heading":"Using %lprun: fix the bottleneck","text":"\nprevious exercise, profiled convert_units() function saw new_hts list comprehension potential bottleneck. notice new_wts list comprehension also accounted similar percentage runtime? indication may want create new_hts new_wts objects using different technique.\n\nSince height weight hero stored numpy array, can use array broadcasting rather list comprehension convert heights weights. implemented function:\n\nLoad line_profiler package IPython session. , use %lprun profile convert_units_broadcast() function acting superheroes data. convert_units_broadcast() function, heroes list, hts array, wts array loaded session. ’ve finished coding, answer following question:\n\npercentage time spent new_hts array broadcasting line code relative total amount time spent convert_units_broadcast() function?\n0% - 10%11% - 20%21% - 50%51% - 100%\n’s correct! profiling convert_units() function, able see using list comprehension efficient solution creating new_hts new_wts objects. also saw using array broadcasting convert_units_broadcast() function dramatically decreased percentage time spent executing lines code. may noticed function still takes iterate loop. Don’t worry; ’ll cover make loop efficient later chapter.\n","code":"def convert_units_broadcast(heroes, heights, weights):\n\n    # Array broadcasting instead of list comprehension\n    new_hts = heights * 0.39370\n    new_wts = weights * 2.20462\n\n    hero_data = {}\n\n    for i,hero in enumerate(heroes):\n        hero_data[hero] = (new_hts[i], new_wts[i])\n\n    return hero_data\n"},{"path":"writing-efficient-python-code.html","id":"code-profiling-for-memory-usage","chapter":"Writing Efficient Python Code","heading":"Code profiling for memory usage","text":"","code":""},{"path":"writing-efficient-python-code.html","id":"pop-quiz-steps-for-using-mprun","chapter":"Writing Efficient Python Code","heading":"Pop quiz: steps for using %mprun","text":"\nSuppose list superheroes (named heroes) along hero’s height (centimeters) weight (kilograms) loaded NumPy arrays (named hts wts, respectively). also convert_units() function saved file titled hero_funcs.py.\n\nnecessary steps need take order profile convert_units() function acting superheroes data ’d like see line--line memory consumption convert_units()?\nUse command hero_funcs import convert_units load function ’d like profile.Use %load_ext memory_profiler load memory_profiler within IPython session.Use %mprun -f convert_units convert_units(heroes, hts, wts) get line--line memory allocations..\nGreat job! Remember using %mprun requires one additional step compared using %lprun (.e., need import function order use %mprun ). Now ’ve reviewed necessary steps, practice profiling memory usage!\n","code":""},{"path":"writing-efficient-python-code.html","id":"using-mprun-hero-bmi","chapter":"Writing Efficient Python Code","heading":"Using %mprun: Hero BMI","text":"\n’d like calculate body mass index (BMI) selected sample heroes. BMI can calculated using formula:\n\nrandom sample 25,000 superheroes loaded session array called sample_indices. sample list indices corresponds superhero’s index selected heroes list.\n\nfunction named calc_bmi_lists also created saved file titled bmi_lists.py. convenience, displayed :\n\nNotice function performs necessary calculations using list comprehension (hence name calc_bmi_lists()). Dig deeper function analyze memory footprint performing calculations using lists:\n\nLoad memory_profiler package IPython session.\n\nImport calc_bmi_lists bmi_lists.\n\n’ve completed steps, use %mprun profile calc_bmi_lists() function acting superheroes data.\nhts array wts array already loaded session.\n\n’ve finished coding, answer following question:\n\nmuch memory list comprehension lines code consume calc_bmi_lists() function? (.e., total sum Increment column four lines code?)\n20.0 MiB - 30.0 MiB0.1 MiB - 2.0 MiB10.0 MiB - 15.0 MiB0.0 MiB\nCorrect! Using list comprehension approach allocates anywhere 0.1 MiB 2 MiB memory calculate BMIs.run %mprun multiple times within session, may notice Increment column reports 0.0 MiB lines code. due limitation magic command. running %mprun , memory allocation analyzed previously taken account consecutive runs %mprun start place first run left .Now ’ve profiled calc_bmi_lists() function, let’s see can better different approach.\n","code":"def calc_bmi_lists(sample_indices, hts, wts):\n\n    # Gather sample heights and weights as lists\n    s_hts = [hts[i] for i in sample_indices]\n    s_wts = [wts[i] for i in sample_indices]\n\n    # Convert heights from cm to m and square with list comprehension\n    s_hts_m_sqr = [(ht / 100) ** 2 for ht in s_hts]\n\n    # Calculate BMIs as a list with list comprehension\n    bmis = [s_wts[i] / s_hts_m_sqr[i] for i in range(len(sample_indices))]\n\n    return bmis\n"},{"path":"writing-efficient-python-code.html","id":"using-mprun-hero-bmi-2.0","chapter":"Writing Efficient Python Code","heading":"Using %mprun: Hero BMI 2.0","text":"\nLet’s see using different approach calculate BMIs can save memory. remember, hero’s height weight stored numpy array. means can use NumPy’s handy array indexing capabilities broadcasting perform calculations. function named calc_bmi_arrays created saved file titled bmi_arrays.py. convenience, displayed :\n\nNotice function performs necessary calculations using arrays.\n\nLet’s see updated array approach decreases memory footprint:\n\nLoad memory_profiler package IPython session.\n\nImport calc_bmi_arrays bmi_arrays.\n\n’ve completed steps, use %mprun profile calc_bmi_arrays() function acting superheroes data.\nsample_indices array, hts array, wts array loaded session.\n\n’ve finished coding, answer following question:\n\nmuch memory array indexing broadcasting lines code consume calc_bmi_array() function? (.e., total sum Increment column four lines code?)\n10.0 MiB - 15.0 MiB0.0 MiB20.0 MiB - 30.0 MiB0.1 MiB - 2.0 MiB\n’s right! implementing array approach, able shave MiBs. Although isn’t colossal gain, still decreases code’s overhead. input data grows time, small improvements add major efficiency gains.\n","code":"def calc_bmi_arrays(sample_indices, hts, wts):\n\n    # Gather sample heights and weights as arrays\n    s_hts = hts[sample_indices]\n    s_wts = wts[sample_indices]\n\n    # Convert heights from cm to m and square with broadcasting\n    s_hts_m_sqr = (s_hts / 100) ** 2\n\n    # Calculate BMIs as an array using broadcasting\n    bmis = s_wts / s_hts_m_sqr\n\n    return bmis\n"},{"path":"writing-efficient-python-code.html","id":"bringing-it-all-together-star-wars-profiling","chapter":"Writing Efficient Python Code","heading":"Bringing it all together: Star Wars profiling","text":"\nlist 480 superheroes loaded session (called heroes) well list hero’s corresponding publisher (called publishers).\n\n’d like filter heroes list based hero’s specific publisher, unsure functions efficient.\n\nUse get_publisher_heroes() function get_publisher_heroes_np() function collect heroes Star Wars universe. desired_publisher Star Wars ‘George Lucas’.\n\nWithin IPython console, load line_profiler use %lprun profile two functions line--line runtime. using %lprun, use function gather Star Wars heroes previous step. ’ve finished profiling, answer following question:\n\nfunction fastest runtime?\nget_publisher_heroes() faster.get_publisher_heroes_np() faster.functions runtime.\nWithin IPython console, load memory_profiler use %mprun profile two functions line--line memory consumption.\n\nget_publisher_heroes() function get_publisher_heroes_np() function saved within file titled hero_funcs.py (.e., can import functions hero_funcs). using %mprun, use function gather Star Wars heroes previous step. ’ve finished profiling, answer following question:\n\nfunction uses least amount memory?\nget_publisher_heroes() consumes less memory.get_publisher_heroes_np() consumes less memory.functions memory consumption.\nBased runtime profiling memory allocation profiling, function choose gather Star Wars heroes?\nuse get_publisher_heroes().use get_publisher_heroes_np().use either function since runtimes, memory usage identical.\nForce strong one! ’re timing profiling like true Jedi. Now tools evaluate code efficiencies, ’s time put use start writing efficient Python code.\n","code":"def get_publisher_heroes(heroes, publishers, desired_publisher):\n\n    desired_heroes = []\n\n    for i,pub in enumerate(publishers):\n        if pub == desired_publisher:\n            desired_heroes.append(heroes[i])\n\n    return desired_heroes\ndef get_publisher_heroes_np(heroes, publishers, desired_publisher):\n\n    heroes_np = np.array(heroes)\n    pubs_np = np.array(publishers)\n\n    desired_heroes = heroes_np[pubs_np == desired_publisher]\n\n    return desired_heroes\n# edited/added\nimport pandas as pd\nheroes = pd.read_csv(\"datasets/Writing-Efficient-Python-Code/heroes.csv\", header = None).iloc[:,0].tolist()\npublishers = pd.read_csv(\"datasets/Writing-Efficient-Python-Code/publishers.csv\", header = None).iloc[:,0].tolist()\n\ndef get_publisher_heroes(heroes, publishers, desired_publisher):\n\n    desired_heroes = []\n\n    for i,pub in enumerate(publishers):\n        if pub == desired_publisher:\n            desired_heroes.append(heroes[i])\n\n    return desired_heroes\n  \ndef get_publisher_heroes_np(heroes, publishers, desired_publisher):\n\n    heroes_np = np.array(heroes)\n    pubs_np = np.array(publishers)\n\n    desired_heroes = heroes_np[pubs_np == desired_publisher]\n\n    return desired_heroes# Use get_publisher_heroes() to gather Star Wars heroes\nstar_wars_heroes = get_publisher_heroes(heroes, publishers, 'George Lucas')\n\nprint(star_wars_heroes)## ['Darth Vader', 'Han Solo', 'Luke Skywalker', 'Yoda']print(type(star_wars_heroes))## <class 'list'># Use get_publisher_heroes_np() to gather Star Wars heroes\nstar_wars_heroes_np = get_publisher_heroes_np(heroes, publishers, 'George Lucas')\n\nprint(star_wars_heroes_np)## ['Darth Vader' 'Han Solo' 'Luke Skywalker' 'Yoda']print(type(star_wars_heroes_np))## <class 'numpy.ndarray'>"},{"path":"writing-efficient-python-code.html","id":"gaining-efficiencies","chapter":"Writing Efficient Python Code","heading":"Gaining efficiencies","text":"\nchapter covers complex efficiency tips tricks. ’ll learn useful built-modules writing efficient code practice using set theory. ’ll learn looping patterns Python make efficient.\n","code":""},{"path":"writing-efficient-python-code.html","id":"efficiently-combining-counting-and-iterating","chapter":"Writing Efficient Python Code","heading":"Efficiently combining, counting, and iterating","text":"","code":""},{"path":"writing-efficient-python-code.html","id":"combining-pokémon-names-and-types","chapter":"Writing Efficient Python Code","heading":"Combining Pokémon names and types","text":"\nThree lists loaded session dataset contains 720 Pokémon:\n\nnames list contains names Pokémon.\n\nprimary_types list contains corresponding primary type Pokémon.\n\nsecondary_types list contains corresponding secondary type Pokémon (nan Pokémon one type).\n\nwant combine Pokémon’s name types together easily see description Pokémon. Practice using zip() accomplish task.\n\nCombine names list primary_types list new list object (called names_type1).\n\nCombine names, primary_types, secondary_types (order) using zip() unpack zip object new list.\n\nUse zip() combine first five items names list first three items primary_types list.\n\nGood job! practiced using zip() combine multiple objects together. nice function allows easily combine two objects.  notice provide zip() objects differing lengths, combine smallest lengthed object exhausted?\n","code":"# edited/added\nnames = pd.read_csv(\"datasets/Writing-Efficient-Python-Code/names.csv\", header = None).iloc[:,0].tolist()\nprimary_types = pd.read_csv(\"datasets/Writing-Efficient-Python-Code/primary_types.csv\", header = None).iloc[:,0].tolist()\nsecondary_types = pd.read_csv(\"datasets/Writing-Efficient-Python-Code/secondary_types.csv\", header = None).iloc[:,0].tolist()\n\n# Combine names and primary_types\nnames_type1 = [*zip(names, primary_types)]\n\nprint(*names_type1[:5], sep='\\n')## ('Abomasnow', 'Bug')\n## ('Abra', 'Bug')\n## ('Absol', 'Poison')\n## ('Accelgor', 'Psychic')\n## ('Aerodactyl', 'Fire')# Combine all three lists together\nnames_types = [*zip(names, primary_types, secondary_types)]\n\nprint(*names_types[:5], sep='\\n')## ('Abomasnow', 'Bug', 'Ice')\n## ('Abra', 'Bug', 'Flying')\n## ('Absol', 'Poison', 'Rock')\n## ('Accelgor', 'Psychic', 'Flying')\n## ('Aerodactyl', 'Fire', 'Ice')# Combine five items from names and three items from primary_types\ndiffering_lengths = [*zip(names[:5], primary_types[:3])]\n\nprint(*differing_lengths, sep='\\n')## ('Abomasnow', 'Bug')\n## ('Abra', 'Bug')\n## ('Absol', 'Poison')"},{"path":"writing-efficient-python-code.html","id":"counting-pokémon-from-a-sample","chapter":"Writing Efficient Python Code","heading":"Counting Pokémon from a sample","text":"\nsample 500 Pokémon generated, three lists sample loaded session:\n\nnames list contains names Pokémon sample.\n\nprimary_types list containing corresponding primary type Pokémon sample.\n\ngenerations list contains corresponding generation Pokémon sample.\n\nwant quickly gather counts lists better understand sample generated. Use Counter collections module explore types Pokémon sample, generations come , many Pokémon name starts specific letter.\n\nCounter already imported session convenience.\n\nCollect count primary type sample.\n\nCollect count generation sample.\n\nUse list comprehension collect first letter Pokémon names list. Save starting_letters.\n\nCollect count starting letters starting_letters list. Save starting_letters_count.\n\nGreat job! used Counter collections module better understand sample 500 Pokémon generated. sample’s common Pokémon type ‘Water’ sample’s least common Pokémon types ‘Ghost’ ‘Dark’. also notice Pokémon sample came generation 5 starting letter ‘S’?\n","code":"# edited/added\nfrom collections import Counter\nnames = pd.read_csv(\"datasets/Writing-Efficient-Python-Code/names.csv\", header = None).iloc[:,0].tolist()\nprimary_types = pd.read_csv(\"datasets/Writing-Efficient-Python-Code/primary_types.csv\", header = None).iloc[:,0].tolist()\ngenerations = pd.read_csv(\"datasets/Writing-Efficient-Python-Code/generations.csv\", header = None).iloc[:,0].tolist()# Collect the count of primary types\ntype_count = Counter(primary_types)\nprint(type_count, '\\n')## Counter({'Water': 79, 'Normal': 52, 'Psychic': 50, 'Bug': 46, 'Grass': 46, 'Fire': 34, 'Rock': 32, 'Electric': 26, 'Ground': 24, 'Poison': 18, 'Dark': 16, 'Dragon': 15, 'Ice': 15, 'Steel': 14, 'Ghost': 14, 'Fairy': 10, 'Fighting': 9})# Collect the count of generations\ngen_count = Counter(generations)\nprint(gen_count, '\\n')## Counter({3: 107, 1: 96, 5: 95, 4: 84, 2: 69, 6: 49})# Use list comprehension to get each Pokémon's starting letter\nstarting_letters = [name[0] for name in names]\n\n# Collect the count of Pokémon for each starting_letter\nstarting_letters_count = Counter(starting_letters)\nprint(starting_letters_count)## Counter({'S': 102, 'M': 58, 'C': 55, 'P': 47, 'G': 46, 'D': 41, 'B': 39, 'T': 35, 'L': 33, 'A': 32, 'R': 30, 'H': 27, 'F': 26, 'K': 25, 'W': 23, 'V': 22, 'E': 21, 'N': 16, 'Z': 9, 'J': 7, 'O': 6, 'I': 5, 'U': 5, 'Q': 4, 'Y': 4, 'X': 2})"},{"path":"writing-efficient-python-code.html","id":"combinations-of-pokémon","chapter":"Writing Efficient Python Code","heading":"Combinations of Pokémon","text":"\nAsh, Pokémon trainer, encounters group five Pokémon. Pokémon loaded list within session (called pokemon) printed console convenience.\n\nAsh like try catch Pokémon, Pokédex can store two Pokémon time. Let’s use combinations itertools module see possible pairs Pokémon Ash catch.\n\nImport combinations itertools.\n\nCreate combinations object called combos_obj contains possible pairs Pokémon pokemon list. pair 2 Pokémon.\n\nUnpack combos_obj list called combos_2.\n\nAsh upgraded Pokédex can now store four Pokémon. Use combinations collect possible combinations 4 different Pokémon. Save combinations directly list called combos_4 using star character (*).\n\nAwesome! used combinations() itertools collect various combination-tuples list. combinations() allows specify size combinations passing integer second argument. Ash 10 combination options Pokédex can store two Pokémon. 5 combination options Pokédex can store four Pokémon.\n","code":"# edited/added\npokemon = ['Geodude', 'Cubone', 'Lickitung', 'Persian', 'Diglett']# Import combinations from itertools\nfrom itertools import combinations\n\n# Create a combination object with pairs of Pokémon\ncombos_obj = combinations(pokemon, 2)\nprint(type(combos_obj), '\\n')## <class 'itertools.combinations'># Convert combos_obj to a list by unpacking\ncombos_2 = [*combos_obj]\nprint(combos_2, '\\n')## [('Geodude', 'Cubone'), ('Geodude', 'Lickitung'), ('Geodude', 'Persian'), ('Geodude', 'Diglett'), ('Cubone', 'Lickitung'), ('Cubone', 'Persian'), ('Cubone', 'Diglett'), ('Lickitung', 'Persian'), ('Lickitung', 'Diglett'), ('Persian', 'Diglett')]# Collect all possible combinations of 4 Pokémon directly into a list\ncombos_4 = [*combinations(pokemon, 4)]\nprint(combos_4)## [('Geodude', 'Cubone', 'Lickitung', 'Persian'), ('Geodude', 'Cubone', 'Lickitung', 'Diglett'), ('Geodude', 'Cubone', 'Persian', 'Diglett'), ('Geodude', 'Lickitung', 'Persian', 'Diglett'), ('Cubone', 'Lickitung', 'Persian', 'Diglett')]"},{"path":"writing-efficient-python-code.html","id":"set-theory","chapter":"Writing Efficient Python Code","heading":"Set theory","text":"","code":""},{"path":"writing-efficient-python-code.html","id":"comparing-pokédexes","chapter":"Writing Efficient Python Code","heading":"Comparing Pokédexes","text":"\nTwo Pokémon trainers, Ash Misty, like compare individual collections Pokémon. Let’s see Pokémon common Pokémon Ash Misty .\n\nAsh Misty’s Pokédex (collection Pokémon) loaded session lists called ash_pokedex misty_pokedex. printed console convenience.\n\nConvert lists (ash_pokedex misty_pokedex) sets called ash_set misty_set respectively.\n\nFind Pokémon Ash Misty common using set method.\n\nFind Pokémon within Ash’s Pokédex within Misty’s Pokédex set method.\n\nUse set method find Pokémon unique either Ash Misty (.e., Pokémon exist exactly one Pokédexes ).\n\nGreat work! Using sets lets cool comparisons objects without need write loop. lines code, able see Ash Misty ‘Psyduck’ ‘Squirtle’ Pokédex. also able see Ash 8 Pokémon Misty .\n","code":"# edited/added\nash_pokedex = ['Pikachu', 'Bulbasaur', 'Koffing', 'Spearow', 'Vulpix', 'Wigglytuff', 'Zubat', 'Rattata', 'Psyduck', 'Squirtle'] \nmisty_pokedex = ['Krabby', 'Horsea', 'Slowbro', 'Tentacool', 'Vaporeon', 'Magikarp', 'Poliwag', 'Starmie', 'Psyduck', 'Squirtle']# Convert both lists to sets\nash_set = set(ash_pokedex)\nmisty_set = set(misty_pokedex)\n\n# Find the Pokémon that exist in both sets\nboth = ash_set.intersection(misty_set)\nprint(both)## {'Psyduck', 'Squirtle'}# Find the Pokémon that Ash has, and Misty does not have\nash_only = ash_set.difference(misty_set)\nprint(ash_only)## {'Bulbasaur', 'Rattata', 'Zubat', 'Pikachu', 'Koffing', 'Wigglytuff', 'Spearow', 'Vulpix'}# Find the Pokémon that are in only one set (not both)\nunique_to_set = ash_set.symmetric_difference(misty_set)\nprint(unique_to_set)## {'Poliwag', 'Krabby', 'Bulbasaur', 'Rattata', 'Zubat', 'Slowbro', 'Magikarp', 'Pikachu', 'Koffing', 'Starmie', 'Vulpix', 'Wigglytuff', 'Spearow', 'Tentacool', 'Horsea', 'Vaporeon'}"},{"path":"writing-efficient-python-code.html","id":"searching-for-pokémon","chapter":"Writing Efficient Python Code","heading":"Searching for Pokémon","text":"\nTwo Pokémon trainers, Ash Brock, collection ten Pokémon . trainer’s Pokédex (collection Pokémon) loaded session lists called ash_pokedex brock_pokedex respectively.\n\n’d like see certain Pokémon members either Ash Brock’s Pokédex.\n\nLet’s compare using set versus using list performing membership testing.\n\nConvert Brock’s Pokédex list (brock_pokedex) set called brock_pokedex_set.\n\nCheck ‘Psyduck’ Ash’s Pokédex list (ash_pokedex) ‘Psyduck’ Brock’s Pokédex set (brock_pokedex_set).\n\nCheck ‘Machop’ Ash’s Pokédex list (ash_pokedex) ‘Machop’ Brock’s Pokédex set (brock_pokedex_set).\n\nWithin IPython console, use %timeit compare membership testing ‘Psyduck’ ash_pokedex, ‘Psyduck’ brock_pokedex_set, ‘Machop’ ash_pokedex, ‘Machop’ brock_pokedex_set (total four different timings).\n\nDon’t include print() function. time commands wrote inside print() function previous steps.\n\nmembership testing faster?\nUsing list faster using set membership testing four cases.Member testing using list set runtimes four cases.Member testing using set faster using list four cases.\nAwesome! Membership testing much faster use sets. notice using set member testing faster using list regardless item checking set? Checking ‘Psyduck’ (Brock’s set) still faster checking ‘Psyduck’ Ash’s list!\n","code":"# edited/added\nbrock_pokedex = ['Onix', 'Geodude', 'Zubat', 'Golem', 'Vulpix', 'Tauros', 'Kabutops', 'Omastar', 'Machop', 'Dugtrio']# Convert Brock's Pokédex to a set\nbrock_pokedex_set = set(brock_pokedex)\nprint(brock_pokedex_set)## {'Kabutops', 'Omastar', 'Zubat', 'Machop', 'Dugtrio', 'Onix', 'Golem', 'Vulpix', 'Tauros', 'Geodude'}# Convert Brock's Pokédex to a set\nbrock_pokedex_set = set(brock_pokedex)\nprint(brock_pokedex_set)## {'Kabutops', 'Omastar', 'Zubat', 'Machop', 'Dugtrio', 'Onix', 'Golem', 'Vulpix', 'Tauros', 'Geodude'}# Check if Psyduck is in Ash's list and Brock's set\nprint('Psyduck' in ash_pokedex)## Trueprint('Psyduck' in brock_pokedex_set)## False# Convert Brock's Pokédex to a set\nbrock_pokedex_set = set(brock_pokedex)\nprint(brock_pokedex_set)## {'Kabutops', 'Omastar', 'Zubat', 'Machop', 'Dugtrio', 'Onix', 'Golem', 'Vulpix', 'Tauros', 'Geodude'}# Check if Psyduck is in Ash's list and Brock's set\nprint('Psyduck' in ash_pokedex)## Trueprint('Psyduck' in brock_pokedex_set)## False# Check if Machop is in Ash's list and Brock's set\nprint('Machop' in ash_pokedex)## Falseprint('Machop' in brock_pokedex_set)## True"},{"path":"writing-efficient-python-code.html","id":"gathering-unique-pokémon","chapter":"Writing Efficient Python Code","heading":"Gathering unique Pokémon","text":"\nsample 500 Pokémon created replacement (meaning Pokémon selected duplicates exist within sample).\n\nThree lists loaded session:\n\nnames list contains names Pokémon sample.\n\nprimary_types list containing corresponding primary type Pokémon sample.\n\ngenerations list contains corresponding generation Pokémon sample.\n\nfunction written gather unique values list:\n\nLet’s compare function using set data type collecting unique items.\n\nUse provided function collect unique Pokémon names list. Save uniq_names_func.\n\nUse set data type collect unique Pokémon names list. Save uniq_names_set.\n\nWithin IPython console, use %timeit compare find_unique_items() function using set data type collect unique Pokémon character names names.\n\nmembership testing faster?\nUsing set collect unique values faster.Using provided function uses loop gather unique items faster.approaches runtime.\nUse efficient approach gathering unique items collect unique Pokémon types (primary_types list) Pokémon generations (generations list).\n\nNice work! Using set data type collect unique values much faster using loop (like find_unique_items() function). Since set defined collection distinct elements, efficient way collect unique items existing object. took advantage set find distinct Pokémon sample (eliminating duplicate Pokémon) saw unique Pokémon types generations included sample.\n","code":"def find_unique_items(data):\n    uniques = []\n\n    for item in data:\n        if item not in uniques:\n            uniques.append(item)\n\n    return uniques\n# edited/added\nfrom collections import Counter\nnames = pd.read_csv(\"datasets/Writing-Efficient-Python-Code/names.csv\", header = None).iloc[:,0].tolist()\nprimary_types = pd.read_csv(\"datasets/Writing-Efficient-Python-Code/primary_types.csv\", header = None).iloc[:,0].tolist()\ngenerations = pd.read_csv(\"datasets/Writing-Efficient-Python-Code/generations.csv\", header = None).iloc[:,0].tolist()\n\ndef find_unique_items(data):\n    uniques = []\n\n    for item in data:\n        if item not in uniques:\n            uniques.append(item)\n\n    return uniques# Use the provided function to collect unique Pokémon names\nuniq_names_func = find_unique_items(names)\nprint(len(uniq_names_func))## 720# Use find_unique_items() to collect unique Pokémon names\nuniq_names_func = find_unique_items(names)\nprint(len(uniq_names_func))## 720# Convert the names list to a set to collect unique Pokémon names\nuniq_names_set = set(names)\nprint(len(uniq_names_set))## 720# Check that both unique collections are equivalent\nprint(sorted(uniq_names_func) == sorted(uniq_names_set))## True# Use find_unique_items() to collect unique Pokémon names\nuniq_names_func = find_unique_items(names)\nprint(len(uniq_names_func))## 720# Convert the names list to a set to collect unique Pokémon names\nuniq_names_set = set(names)\nprint(len(uniq_names_set))## 720# Check that both unique collections are equivalent\nprint(sorted(uniq_names_func) == sorted(uniq_names_set))## True# Use the best approach to collect unique primary types and generations\nuniq_types = set(primary_types) \nuniq_gens = set(generations)\nprint(uniq_types, uniq_gens, sep='\\n') ## {'Fire', 'Ghost', 'Electric', 'Fairy', 'Rock', 'Water', 'Ground', 'Grass', 'Dragon', 'Steel', 'Psychic', 'Fighting', 'Poison', 'Dark', 'Ice', 'Bug', 'Normal'}\n## {1, 2, 3, 4, 5, 6}"},{"path":"writing-efficient-python-code.html","id":"eliminating-loops","chapter":"Writing Efficient Python Code","heading":"Eliminating loops","text":"","code":""},{"path":"writing-efficient-python-code.html","id":"gathering-pokémon-without-a-loop","chapter":"Writing Efficient Python Code","heading":"Gathering Pokémon without a loop","text":"\nlist containing 720 Pokémon loaded session poke_names. Another list containing Pokémon’s corresponding generation loaded poke_gens.\n\nloop created filter Pokémon belong generation one two, collect number letters Pokémon’s name:\n\nEliminate loop using list comprehension map() function:\n\nUse list comprehension collect Pokémon belongs generation 1 generation 2. Save gen1_gen2_pokemon.\n\n\nUse map() function collect number letters Pokémon’s name within gen1_gen2_pokemon list. Save map object name_lengths_map.\n\n\nCombine gen1_gen2_pokemon name_length_map list called gen1_gen2_name_lengths.\n\n\nUse list comprehension collect Pokémon belongs generation 1 generation 2. Save gen1_gen2_pokemon.\n\nUse map() function collect number letters Pokémon’s name within gen1_gen2_pokemon list. Save map object name_lengths_map.\n\nCombine gen1_gen2_pokemon name_length_map list called gen1_gen2_name_lengths.\n\nGreat job! successfully used list comprehension map() function eliminate loop. compared runtimes loop using list comprehension map() function, ’d see loop took quite bit longer.  ’re experienced Pythonista, may noticed replace entire loop one list comprehension: [(name, len(name)) name,gen zip(poke_names, poke_gens) gen < 3]\n","code":"gen1_gen2_name_lengths_loop = []\n\nfor name,gen in zip(poke_names, poke_gens):\n    if gen < 3:\n        name_length = len(name)\n        poke_tuple = (name, name_length)\n        gen1_gen2_name_lengths_loop.append(poke_tuple)\n# edited/added\npoke_names = pd.read_csv(\"datasets/Writing-Efficient-Python-Code/poke_names.csv\", header = None).iloc[:,0].tolist()\npoke_gens = pd.read_csv(\"datasets/Writing-Efficient-Python-Code/poke_gens.csv\", header = None).iloc[:,0].tolist()\ngen1_gen2_name_lengths_loop = []# Collect Pokémon that belong to generation 1 or generation 2\ngen1_gen2_pokemon = [name for name,gen in zip(poke_names, poke_gens) if gen < 3]\n\n# Create a map object that stores the name lengths\nname_lengths_map = map(len, gen1_gen2_pokemon)\n\n# Combine gen1_gen2_pokemon and name_lengths_map into a list\ngen1_gen2_name_lengths = [*zip(gen1_gen2_pokemon, name_lengths_map)]\n\nprint(gen1_gen2_name_lengths_loop[:5])## []print(gen1_gen2_name_lengths[:5])## [('Abra', 4), ('Aerodactyl', 10), ('Aipom', 5), ('Alakazam', 8), ('Ampharos', 8)]"},{"path":"writing-efficient-python-code.html","id":"pokémon-totals-and-averages-without-a-loop","chapter":"Writing Efficient Python Code","heading":"Pokémon totals and averages without a loop","text":"\nlist 720 Pokémon loaded session called names. Pokémon’s corresponding statistics loaded NumPy array called stats. row stats corresponds Pokémon names column represents individual Pokémon stat (HP, Attack, Defense, Special Attack, Special Defense, Speed respectively.)\n\nwant gather Pokémon’s total stat value (.e., sum row stats) Pokémon’s average stat value (.e., mean row stats) find strongest Pokémon.\n\nloop written collect values:\n\nReplace loop using NumPy:\n\nCreate total stats array (total_stats_np) using .sum() method specifying correct axis.\n\n\nCreate average stats array (avg_stats_np) using .mean() method specifying correct axis.\n\n\nCreate final output list (poke_list_np) combining names list, total_stats_np array, avg_stats_np array.\n\n\nCreate total stats array (total_stats_np) using .sum() method specifying correct axis.\n\nCreate average stats array (avg_stats_np) using .mean() method specifying correct axis.\n\nCreate final output list (poke_list_np) combining names list, total_stats_np array, avg_stats_np array.\n\nGreat work! used NumPy’s .sum() .mean() methods specific axis eliminate loop. approach, able quickly see ‘GroudonPrimal Groudon’, ‘KyogrePrimal Kyogre’, ‘Arceus’ strongest Pokémon list based total stats.  gather run times, loop taken milliseconds execute NumPy approach taken microseconds execute. quite improvement!\n","code":"poke_list = []\n\nfor pokemon,row in zip(names, stats):\n    total_stats = np.sum(row)\n    avg_stats = np.mean(row)\n    poke_list.append((pokemon, total_stats, avg_stats))\n# edited/added\nnames = pd.read_csv(\"datasets/Writing-Efficient-Python-Code/names.csv\", header = None).iloc[:,0].tolist()\nstats_df = pd.read_csv(\"datasets/Writing-Efficient-Python-Code/stats_df.csv\")\nstats = stats_df.to_numpy()\npoke_list = []\n\nfor pokemon,row in zip(names, stats):\n    total_stats = np.sum(row)\n    avg_stats = np.mean(row)\n    poke_list.append((pokemon, total_stats, avg_stats))# Create a total stats array\ntotal_stats_np = stats.sum(axis=1)\n\n# Create an average stats array\navg_stats_np = stats.mean(axis=1)\n\n# Combine names, total_stats_np, and avg_stats_np into a list\npoke_list_np = [*zip(names, total_stats_np, avg_stats_np)]\n\nprint(poke_list_np == poke_list, '\\n')## Trueprint(poke_list_np[:3])## [('Abomasnow', 494, 82.33333333333333), ('Abra', 310, 51.666666666666664), ('Absol', 465, 77.5)]print(poke_list[:3], '\\n')## [('Abomasnow', 494, 82.33333333333333), ('Abra', 310, 51.666666666666664), ('Absol', 465, 77.5)]top_3 = sorted(poke_list_np, key=lambda x: x[1], reverse=True)[:3]\nprint('3 strongest Pokémon:\\n{}'.format(top_3))## 3 strongest Pokémon:\n## [('GroudonPrimal Groudon', 770, 128.33333333333334), ('KyogrePrimal Kyogre', 770, 128.33333333333334), ('KyuremBlack Kyurem', 700, 116.66666666666667)]"},{"path":"writing-efficient-python-code.html","id":"writing-better-loops","chapter":"Writing Efficient Python Code","heading":"Writing better loops","text":"","code":""},{"path":"writing-efficient-python-code.html","id":"one-time-calculation-loop","chapter":"Writing Efficient Python Code","heading":"One-time calculation loop","text":"\nlist integers represents Pokémon’s generation loaded session called generations. ’d like gather counts generation determine percentage generation accounts total count integers.\n\nloop written accomplish task:\n\nLet’s make loop efficient moving one-time calculation outside loop.\n\nImport Counter collections module.\n\nUse Counter() collect count generation generations list. Save gen_counts.\n\nWrite better loop places one-time calculation outside () loop. Use exact syntax original loop (simply copy paste one-time calculation loop).\n\nWell done! spotted calculation moved outside loop make loop efficient. Since total count now calculated just (loop iteration), can expect see efficiency gain new loop. writing loop unavoidable, sure analyze loop move one-time calculations outside.\n","code":"for gen,count in gen_counts.items():\n    total_count = len(generations)\n    gen_percent = round(count / total_count * 100, 2)\n    print(\n      'generation {}: count = {:3} percentage = {}'\n      .format(gen, count, gen_percent)\n    )\n# Import Counter\nfrom collections import Counter\n\n# Collect the count of each generation\ngen_counts = Counter(generations)\n\n# Improve for loop by moving one calculation above the loop\ntotal_count = len(generations)\n\nfor gen,count in gen_counts.items():\n    gen_percent = round(count / total_count * 100, 2)\n    print('generation {}: count = {:3} percentage = {}'\n          .format(gen, count, gen_percent))## generation 2: count =  69 percentage = 13.8\n## generation 4: count =  84 percentage = 16.8\n## generation 3: count = 107 percentage = 21.4\n## generation 5: count =  95 percentage = 19.0\n## generation 1: count =  96 percentage = 19.2\n## generation 6: count =  49 percentage = 9.8"},{"path":"writing-efficient-python-code.html","id":"holistic-conversion-loop","chapter":"Writing Efficient Python Code","heading":"Holistic conversion loop","text":"\nlist possible Pokémon types loaded session pokemon_types. ’s printed console convenience.\n\n’d like gather possible pairs Pokémon types. want store pairs individual list enumerated index first element list. allows see total number possible pairs provides indexed label pair.\n\nloop written accomplish task:\n\nLet’s make loop efficient using holistic conversion.\n\ncombinations itertools module loaded session. Use create list called possible_pairs contains possible pairs Pokémon types (pair 2 Pokémon types).\n\nCreate empty list called enumerated_tuples loop.\n\nWithin loop, append enumerated_pair_tuple empty list created step.\n\nUse built-function convert tuple enumerated_tuples list.\n\nGreat job! Rather converting tuple list within loop, used map() function convert tuples lists outside loop. ’re getting hang writing efficient loops! Remember, want avoid looping much possible writing Python code. cases looping unavoidable, sure check loops one-time calculations holistic conversions make efficient.\n","code":"enumerated_pairs = []\n\nfor i,pair in enumerate(possible_pairs, 1):\n    enumerated_pair_tuple = (i,) + pair\n    enumerated_pair_list = list(enumerated_pair_tuple)\n    enumerated_pairs.append(enumerated_pair_list)\n# edited/added\npokemon_types = ['Bug', 'Dark', 'Dragon', 'Electric', 'Fairy', 'Fighting', 'Fire', 'Flying', 'Ghost', 'Grass', 'Ground', 'Ice', 'Normal', 'Poison', 'Psychic', 'Rock', 'Steel', 'Water']# Collect all possible pairs using combinations()\npossible_pairs = [*combinations(pokemon_types, 2)]\n\n# Create an empty list called enumerated_tuples\nenumerated_tuples = []\n\n# Append each enumerated_pair_tuple to the empty list above\nfor i,pair in enumerate(possible_pairs, 1):\n    enumerated_pair_tuple = (i,) + pair\n    enumerated_tuples.append(enumerated_pair_tuple)\n\n# Convert all tuples in enumerated_tuples to a list\nenumerated_pairs = [*map(list, enumerated_tuples)]\nprint(enumerated_pairs)## [[1, 'Bug', 'Dark'], [2, 'Bug', 'Dragon'], [3, 'Bug', 'Electric'], [4, 'Bug', 'Fairy'], [5, 'Bug', 'Fighting'], [6, 'Bug', 'Fire'], [7, 'Bug', 'Flying'], [8, 'Bug', 'Ghost'], [9, 'Bug', 'Grass'], [10, 'Bug', 'Ground'], [11, 'Bug', 'Ice'], [12, 'Bug', 'Normal'], [13, 'Bug', 'Poison'], [14, 'Bug', 'Psychic'], [15, 'Bug', 'Rock'], [16, 'Bug', 'Steel'], [17, 'Bug', 'Water'], [18, 'Dark', 'Dragon'], [19, 'Dark', 'Electric'], [20, 'Dark', 'Fairy'], [21, 'Dark', 'Fighting'], [22, 'Dark', 'Fire'], [23, 'Dark', 'Flying'], [24, 'Dark', 'Ghost'], [25, 'Dark', 'Grass'], [26, 'Dark', 'Ground'], [27, 'Dark', 'Ice'], [28, 'Dark', 'Normal'], [29, 'Dark', 'Poison'], [30, 'Dark', 'Psychic'], [31, 'Dark', 'Rock'], [32, 'Dark', 'Steel'], [33, 'Dark', 'Water'], [34, 'Dragon', 'Electric'], [35, 'Dragon', 'Fairy'], [36, 'Dragon', 'Fighting'], [37, 'Dragon', 'Fire'], [38, 'Dragon', 'Flying'], [39, 'Dragon', 'Ghost'], [40, 'Dragon', 'Grass'], [41, 'Dragon', 'Ground'], [42, 'Dragon', 'Ice'], [43, 'Dragon', 'Normal'], [44, 'Dragon', 'Poison'], [45, 'Dragon', 'Psychic'], [46, 'Dragon', 'Rock'], [47, 'Dragon', 'Steel'], [48, 'Dragon', 'Water'], [49, 'Electric', 'Fairy'], [50, 'Electric', 'Fighting'], [51, 'Electric', 'Fire'], [52, 'Electric', 'Flying'], [53, 'Electric', 'Ghost'], [54, 'Electric', 'Grass'], [55, 'Electric', 'Ground'], [56, 'Electric', 'Ice'], [57, 'Electric', 'Normal'], [58, 'Electric', 'Poison'], [59, 'Electric', 'Psychic'], [60, 'Electric', 'Rock'], [61, 'Electric', 'Steel'], [62, 'Electric', 'Water'], [63, 'Fairy', 'Fighting'], [64, 'Fairy', 'Fire'], [65, 'Fairy', 'Flying'], [66, 'Fairy', 'Ghost'], [67, 'Fairy', 'Grass'], [68, 'Fairy', 'Ground'], [69, 'Fairy', 'Ice'], [70, 'Fairy', 'Normal'], [71, 'Fairy', 'Poison'], [72, 'Fairy', 'Psychic'], [73, 'Fairy', 'Rock'], [74, 'Fairy', 'Steel'], [75, 'Fairy', 'Water'], [76, 'Fighting', 'Fire'], [77, 'Fighting', 'Flying'], [78, 'Fighting', 'Ghost'], [79, 'Fighting', 'Grass'], [80, 'Fighting', 'Ground'], [81, 'Fighting', 'Ice'], [82, 'Fighting', 'Normal'], [83, 'Fighting', 'Poison'], [84, 'Fighting', 'Psychic'], [85, 'Fighting', 'Rock'], [86, 'Fighting', 'Steel'], [87, 'Fighting', 'Water'], [88, 'Fire', 'Flying'], [89, 'Fire', 'Ghost'], [90, 'Fire', 'Grass'], [91, 'Fire', 'Ground'], [92, 'Fire', 'Ice'], [93, 'Fire', 'Normal'], [94, 'Fire', 'Poison'], [95, 'Fire', 'Psychic'], [96, 'Fire', 'Rock'], [97, 'Fire', 'Steel'], [98, 'Fire', 'Water'], [99, 'Flying', 'Ghost'], [100, 'Flying', 'Grass'], [101, 'Flying', 'Ground'], [102, 'Flying', 'Ice'], [103, 'Flying', 'Normal'], [104, 'Flying', 'Poison'], [105, 'Flying', 'Psychic'], [106, 'Flying', 'Rock'], [107, 'Flying', 'Steel'], [108, 'Flying', 'Water'], [109, 'Ghost', 'Grass'], [110, 'Ghost', 'Ground'], [111, 'Ghost', 'Ice'], [112, 'Ghost', 'Normal'], [113, 'Ghost', 'Poison'], [114, 'Ghost', 'Psychic'], [115, 'Ghost', 'Rock'], [116, 'Ghost', 'Steel'], [117, 'Ghost', 'Water'], [118, 'Grass', 'Ground'], [119, 'Grass', 'Ice'], [120, 'Grass', 'Normal'], [121, 'Grass', 'Poison'], [122, 'Grass', 'Psychic'], [123, 'Grass', 'Rock'], [124, 'Grass', 'Steel'], [125, 'Grass', 'Water'], [126, 'Ground', 'Ice'], [127, 'Ground', 'Normal'], [128, 'Ground', 'Poison'], [129, 'Ground', 'Psychic'], [130, 'Ground', 'Rock'], [131, 'Ground', 'Steel'], [132, 'Ground', 'Water'], [133, 'Ice', 'Normal'], [134, 'Ice', 'Poison'], [135, 'Ice', 'Psychic'], [136, 'Ice', 'Rock'], [137, 'Ice', 'Steel'], [138, 'Ice', 'Water'], [139, 'Normal', 'Poison'], [140, 'Normal', 'Psychic'], [141, 'Normal', 'Rock'], [142, 'Normal', 'Steel'], [143, 'Normal', 'Water'], [144, 'Poison', 'Psychic'], [145, 'Poison', 'Rock'], [146, 'Poison', 'Steel'], [147, 'Poison', 'Water'], [148, 'Psychic', 'Rock'], [149, 'Psychic', 'Steel'], [150, 'Psychic', 'Water'], [151, 'Rock', 'Steel'], [152, 'Rock', 'Water'], [153, 'Steel', 'Water']]"},{"path":"writing-efficient-python-code.html","id":"bringing-it-all-together-pokémon-z-scores","chapter":"Writing Efficient Python Code","heading":"Bringing it all together: Pokémon z-scores","text":"\nlist 720 Pokémon loaded session names. Pokémon’s corresponding Health Points stored NumPy array called hps. want analyze Health Points using z-score see many standard deviations Pokémon’s HP mean HPs.\n\ncode written calculate HP z-score Pokémon gather Pokémon highest HPs based z-scores:\n\nUse NumPy eliminate loop used create z-scores.\n\n, combine names, hps, z_scores objects together list called poke_zscores2.\n\nUse list comprehension replace loop used collect Pokémon highest HPs based z-score.\n\nUse %%timeit (cell magic mode) within IPython console compare runtimes original code blocks new code developed using NumPy list comprehension.\n\nDon’t include print() statements timing. include ten lines code timing original code blocks five lines code timing new code developed. may need press SHIFT+ENTER entering %%timeit get new line within IPython console.\n\napproach faster?\ntotal time executing original code blocks faster.total time executing updated solution using NumPy list comprehension faster.approaches execution time.\nGreat job! ’re Catching ’Em (efficiencies ). eliminated two loops using NumPy broadcasting list comprehension. notice much faster approach developed compared original loops? great improvement!  Remember techniques ’ve learned throughout chapter continue writing Python code outside course. Keep mind built-functions modules covered eliminate loops remember check unavoidable loops things can moved outside.\n","code":"poke_zscores = []\n\nfor name,hp in zip(names, hps):\n    hp_avg = hps.mean()\n    hp_std = hps.std()\n    z_score = (hp - hp_avg)/hp_std\n    poke_zscores.append((name, hp, z_score))\nhighest_hp_pokemon = []\n\nfor name,hp,zscore in poke_zscores:\n    if zscore > 2:\n        highest_hp_pokemon.append((name, hp, zscore))\n# edited/added\nhps = stats_df.HP.values\nlen(hps)## 720# Calculate the total HP avg and total HP standard deviation\nhp_avg = hps.mean()\nhp_std = hps.std()\n\n# Use NumPy to eliminate the previous for loop\nz_scores = (hps - hp_avg)/hp_std\n\n# Combine names, hps, and z_scores\npoke_zscores2 = [*zip(names, hps, z_scores)]\nprint(*poke_zscores2[:3], sep='\\n')## ('Abomasnow', 90, 0.8432264096861816)\n## ('Abra', 25, -1.673706811393817)\n## ('Absol', 65, -0.12482482919074096)# Calculate the total HP avg and total HP standard deviation\nhp_avg = hps.mean()\nhp_std = hps.std()\n\n# Use NumPy to eliminate the previous for loop\nz_scores = (hps - hp_avg)/hp_std\n\n# Combine names, hps, and z_scores\npoke_zscores2 = [*zip(names, hps, z_scores)]\nprint(*poke_zscores2[:3], sep='\\n')## ('Abomasnow', 90, 0.8432264096861816)\n## ('Abra', 25, -1.673706811393817)\n## ('Absol', 65, -0.12482482919074096)# Use list comprehension with the same logic as the highest_hp_pokemon code block\nhighest_hp_pokemon2 = [(name, hp, zscore) for name,hp,zscore in poke_zscores2 if zscore > 2]\nprint(*highest_hp_pokemon2, sep='\\n')## ('Alomomola', 165, 3.747380126316949)\n## ('Arceus', 120, 2.0048878963384884)\n## ('Aurorus', 123, 2.1210540450037194)\n## ('Blissey', 255, 7.232364586273871)\n## ('Chansey', 250, 7.038754338498486)\n## ('Cresselia', 120, 2.0048878963384884)\n## ('Drifblim', 150, 3.166549382990796)\n## ('Gogoat', 123, 2.1210540450037194)\n## ('Hariyama', 144, 2.9342170856603342)\n## ('Kyurem', 125, 2.198498144113873)\n## ('KyuremBlack Kyurem', 125, 2.198498144113873)\n## ('KyuremWhite Kyurem', 125, 2.198498144113873)\n## ('Lanturn', 125, 2.198498144113873)\n## ('Lapras', 130, 2.3921083918892574)\n## ('Munchlax', 135, 2.585718639664642)\n## ('Slaking', 150, 3.166549382990796)\n## ('Snorlax', 160, 3.553769878541565)\n## ('Throh', 120, 2.0048878963384884)\n## ('Vaporeon', 130, 2.3921083918892574)\n## ('Wailmer', 130, 2.3921083918892574)\n## ('Wailord', 170, 3.9409903740923338)\n## ('Wigglytuff', 140, 2.7793288874400264)\n## ('Wobbuffet', 190, 4.715431365193871)\n## ('Xerneas', 126, 2.23722019366895)\n## ('Yveltal', 126, 2.23722019366895)"},{"path":"writing-efficient-python-code.html","id":"basic-pandas-optimizations","chapter":"Writing Efficient Python Code","heading":"Basic pandas optimizations","text":"\nchapter offers brief introduction efficiently work pandas DataFrames. ’ll learn various options iterating DataFrame. , ’ll learn efficiently apply functions data stored DataFrame.\n","code":""},{"path":"writing-efficient-python-code.html","id":"intro-to-pandas-dataframe-iteration","chapter":"Writing Efficient Python Code","heading":"Intro to pandas DataFrame iteration","text":"","code":""},{"path":"writing-efficient-python-code.html","id":"iterating-with-.iterrows","chapter":"Writing Efficient Python Code","heading":"Iterating with .iterrows()","text":"\nvideo, discussed .iterrows() returns DataFrame row tuple (index, pandas Series) pairs. , mean? Let’s explore coding exercises.\n\npandas DataFrame loaded session called pit_df. DataFrame contains stats Major League Baseball team named Pittsburgh Pirates (abbreviated ‘PIT’) year 2008 year 2012. printed console convenience.\n\nUse .iterrows() loop pit_df print row. Save first item .iterrows() second row.\n\nAdd two lines loop: one print(row) print index variable one print row’s type.\n\nInstead using row statement store output .iterrows(), use one variable named row_tuple.\n\nAdd line loop print type row_tuple.\n\nNice work! Since .iterrows() returns DataFrame row tuple (index, pandas Series) pairs, can either split tuple use index row-values separately (,row pit_df.iterrows()), can keep result .iterrows() tuple form (row_tuple pit_df.iterrows()).using ,row, can access things row using square brackets (.e., row[‘Team’]). using row_tuple, specify element tuple ’d like access grabbing team name (.e., row_tuple[1][‘Team’]).  either approach, using .iterrows() still substantially faster using .iloc saw video.\n","code":"# edited/added\nbaseball_df = pd.read_csv(\"datasets/Writing-Efficient-Python-Code/baseball_df.csv\")\npit_df = baseball_df[baseball_df.Team == 'PIT']\n\n# Iterate over pit_df and print each row\nfor i,row in pit_df.iterrows():\n    print(row)## Team              PIT\n## League             NL\n## Year             2012\n## RS                651\n## RA                674\n## W                  79\n## OBP             0.304\n## SLG             0.395\n## BA              0.243\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP            0.314\n## OSLG             0.39\n## Name: 21, dtype: object\n## Team              PIT\n## League             NL\n## Year             2011\n## RS                610\n## RA                712\n## W                  72\n## OBP             0.309\n## SLG             0.368\n## BA              0.244\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP            0.338\n## OSLG            0.409\n## Name: 51, dtype: object\n## Team              PIT\n## League             NL\n## Year             2010\n## RS                587\n## RA                866\n## W                  57\n## OBP             0.304\n## SLG             0.373\n## BA              0.242\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP            0.348\n## OSLG            0.449\n## Name: 81, dtype: object\n## Team              PIT\n## League             NL\n## Year             2009\n## RS                636\n## RA                768\n## W                  62\n## OBP             0.318\n## SLG             0.387\n## BA              0.252\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 161\n## OOBP            0.346\n## OSLG            0.442\n## Name: 111, dtype: object\n## Team              PIT\n## League             NL\n## Year             2008\n## RS                735\n## RA                884\n## W                  67\n## OBP              0.32\n## SLG             0.403\n## BA              0.258\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP            0.362\n## OSLG            0.454\n## Name: 141, dtype: object\n## Team              PIT\n## League             NL\n## Year             2007\n## RS                724\n## RA                846\n## W                  68\n## OBP             0.325\n## SLG             0.411\n## BA              0.263\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP            0.352\n## OSLG            0.447\n## Name: 171, dtype: object\n## Team              PIT\n## League             NL\n## Year             2006\n## RS                691\n## RA                797\n## W                  67\n## OBP             0.327\n## SLG             0.397\n## BA              0.263\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP            0.357\n## OSLG            0.431\n## Name: 201, dtype: object\n## Team              PIT\n## League             NL\n## Year             2005\n## RS                680\n## RA                769\n## W                  67\n## OBP             0.322\n## SLG               0.4\n## BA              0.259\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP            0.344\n## OSLG            0.424\n## Name: 231, dtype: object\n## Team              PIT\n## League             NL\n## Year             2004\n## RS                680\n## RA                744\n## W                  72\n## OBP             0.321\n## SLG             0.401\n## BA               0.26\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 161\n## OOBP            0.342\n## OSLG            0.416\n## Name: 262, dtype: object\n## Team              PIT\n## League             NL\n## Year             2003\n## RS                753\n## RA                801\n## W                  75\n## OBP             0.338\n## SLG              0.42\n## BA              0.267\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP            0.336\n## OSLG            0.431\n## Name: 292, dtype: object\n## Team              PIT\n## League             NL\n## Year             2002\n## RS                641\n## RA                730\n## W                  72\n## OBP             0.319\n## SLG             0.381\n## BA              0.244\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 161\n## OOBP            0.342\n## OSLG            0.423\n## Name: 322, dtype: object\n## Team              PIT\n## League             NL\n## Year             2001\n## RS                657\n## RA                858\n## W                  62\n## OBP             0.313\n## SLG             0.393\n## BA              0.247\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP            0.344\n## OSLG            0.433\n## Name: 352, dtype: object\n## Team              PIT\n## League             NL\n## Year             2000\n## RS                793\n## RA                888\n## W                  69\n## OBP             0.339\n## SLG             0.424\n## BA              0.267\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP            0.361\n## OSLG            0.432\n## Name: 382, dtype: object\n## Team              PIT\n## League             NL\n## Year             1999\n## RS                775\n## RA                782\n## W                  78\n## OBP             0.334\n## SLG             0.419\n## BA              0.259\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 161\n## OOBP            0.343\n## OSLG             0.42\n## Name: 412, dtype: object\n## Team              PIT\n## League             NL\n## Year             1998\n## RS                650\n## RA                718\n## W                  69\n## OBP             0.311\n## SLG             0.374\n## BA              0.254\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 163\n## OOBP              NaN\n## OSLG              NaN\n## Name: 442, dtype: object\n## Team              PIT\n## League             NL\n## Year             1997\n## RS                725\n## RA                760\n## W                  79\n## OBP             0.329\n## SLG             0.404\n## BA              0.262\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 471, dtype: object\n## Team              PIT\n## League             NL\n## Year             1996\n## RS                776\n## RA                833\n## W                  73\n## OBP             0.329\n## SLG             0.407\n## BA              0.266\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 499, dtype: object\n## Team              PIT\n## League             NL\n## Year             1993\n## RS                707\n## RA                806\n## W                  75\n## OBP             0.335\n## SLG             0.393\n## BA              0.267\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 527, dtype: object\n## Team              PIT\n## League             NL\n## Year             1992\n## RS                693\n## RA                595\n## W                  96\n## OBP             0.324\n## SLG             0.381\n## BA              0.255\n## Playoffs            1\n## RankSeason        2.0\n## RankPlayoffs      3.0\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 553, dtype: object\n## Team              PIT\n## League             NL\n## Year             1991\n## RS                768\n## RA                632\n## W                  98\n## OBP             0.338\n## SLG             0.398\n## BA              0.263\n## Playoffs            1\n## RankSeason        1.0\n## RankPlayoffs      3.0\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 579, dtype: object\n## Team              PIT\n## League             NL\n## Year             1990\n## RS                733\n## RA                619\n## W                  95\n## OBP              0.33\n## SLG             0.405\n## BA              0.259\n## Playoffs            1\n## RankSeason        2.0\n## RankPlayoffs      3.0\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 605, dtype: object\n## Team              PIT\n## League             NL\n## Year             1989\n## RS                637\n## RA                680\n## W                  74\n## OBP             0.311\n## SLG             0.359\n## BA              0.241\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 164\n## OOBP              NaN\n## OSLG              NaN\n## Name: 631, dtype: object\n## Team              PIT\n## League             NL\n## Year             1988\n## RS                651\n## RA                616\n## W                  85\n## OBP             0.317\n## SLG             0.369\n## BA              0.247\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 160\n## OOBP              NaN\n## OSLG              NaN\n## Name: 657, dtype: object\n## Team              PIT\n## League             NL\n## Year             1987\n## RS                723\n## RA                744\n## W                  80\n## OBP              0.33\n## SLG             0.403\n## BA              0.264\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 683, dtype: object\n## Team              PIT\n## League             NL\n## Year             1986\n## RS                663\n## RA                700\n## W                  64\n## OBP             0.321\n## SLG             0.374\n## BA               0.25\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 709, dtype: object\n## Team              PIT\n## League             NL\n## Year             1985\n## RS                568\n## RA                708\n## W                  57\n## OBP             0.311\n## SLG             0.347\n## BA              0.247\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 161\n## OOBP              NaN\n## OSLG              NaN\n## Name: 735, dtype: object\n## Team              PIT\n## League             NL\n## Year             1984\n## RS                615\n## RA                567\n## W                  75\n## OBP              0.31\n## SLG             0.363\n## BA              0.255\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 761, dtype: object\n## Team              PIT\n## League             NL\n## Year             1983\n## RS                659\n## RA                648\n## W                  84\n## OBP             0.325\n## SLG             0.383\n## BA              0.264\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 787, dtype: object\n## Team              PIT\n## League             NL\n## Year             1982\n## RS                724\n## RA                696\n## W                  84\n## OBP             0.327\n## SLG             0.408\n## BA              0.273\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 813, dtype: object\n## Team              PIT\n## League             NL\n## Year             1980\n## RS                666\n## RA                646\n## W                  83\n## OBP             0.322\n## SLG             0.388\n## BA              0.266\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 839, dtype: object\n## Team              PIT\n## League             NL\n## Year             1979\n## RS                775\n## RA                643\n## W                  98\n## OBP              0.33\n## SLG             0.416\n## BA              0.272\n## Playoffs            1\n## RankSeason        2.0\n## RankPlayoffs      1.0\n## G                 163\n## OOBP              NaN\n## OSLG              NaN\n## Name: 865, dtype: object\n## Team              PIT\n## League             NL\n## Year             1978\n## RS                684\n## RA                637\n## W                  88\n## OBP              0.32\n## SLG             0.385\n## BA              0.257\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 161\n## OOBP              NaN\n## OSLG              NaN\n## Name: 891, dtype: object\n## Team              PIT\n## League             NL\n## Year             1977\n## RS                734\n## RA                665\n## W                  96\n## OBP             0.331\n## SLG             0.413\n## BA              0.274\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 917, dtype: object\n## Team              PIT\n## League             NL\n## Year             1976\n## RS                708\n## RA                630\n## W                  92\n## OBP             0.321\n## SLG             0.391\n## BA              0.267\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 943, dtype: object\n## Team              PIT\n## League             NL\n## Year             1975\n## RS                712\n## RA                565\n## W                  92\n## OBP             0.323\n## SLG             0.402\n## BA              0.263\n## Playoffs            1\n## RankSeason        4.0\n## RankPlayoffs      3.0\n## G                 161\n## OOBP              NaN\n## OSLG              NaN\n## Name: 967, dtype: object\n## Team              PIT\n## League             NL\n## Year             1974\n## RS                751\n## RA                657\n## W                  88\n## OBP             0.335\n## SLG             0.391\n## BA              0.274\n## Playoffs            1\n## RankSeason        4.0\n## RankPlayoffs      3.0\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 991, dtype: object\n## Team              PIT\n## League             NL\n## Year             1973\n## RS                704\n## RA                693\n## W                  80\n## OBP             0.315\n## SLG             0.405\n## BA              0.261\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 1015, dtype: object\n## Team              PIT\n## League             NL\n## Year             1971\n## RS                788\n## RA                599\n## W                  97\n## OBP              0.33\n## SLG             0.416\n## BA              0.274\n## Playoffs            1\n## RankSeason        2.0\n## RankPlayoffs      1.0\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 1039, dtype: object\n## Team              PIT\n## League             NL\n## Year             1970\n## RS                729\n## RA                664\n## W                  89\n## OBP             0.325\n## SLG             0.406\n## BA               0.27\n## Playoffs            1\n## RankSeason        4.0\n## RankPlayoffs      3.0\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 1063, dtype: object\n## Team              PIT\n## League             NL\n## Year             1969\n## RS                725\n## RA                652\n## W                  88\n## OBP             0.334\n## SLG             0.398\n## BA              0.277\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 1086, dtype: object\n## Team              PIT\n## League             NL\n## Year             1968\n## RS                583\n## RA                532\n## W                  80\n## OBP             0.306\n## SLG             0.343\n## BA              0.252\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 163\n## OOBP              NaN\n## OSLG              NaN\n## Name: 1108, dtype: object\n## Team              PIT\n## League             NL\n## Year             1967\n## RS                679\n## RA                693\n## W                  81\n## OBP             0.324\n## SLG              0.38\n## BA              0.277\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 163\n## OOBP              NaN\n## OSLG              NaN\n## Name: 1128, dtype: object\n## Team              PIT\n## League             NL\n## Year             1966\n## RS                759\n## RA                641\n## W                  92\n## OBP             0.329\n## SLG             0.428\n## BA              0.279\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 1148, dtype: object\n## Team              PIT\n## League             NL\n## Year             1965\n## RS                675\n## RA                580\n## W                  90\n## OBP             0.317\n## SLG             0.382\n## BA              0.265\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 163\n## OOBP              NaN\n## OSLG              NaN\n## Name: 1168, dtype: object\n## Team              PIT\n## League             NL\n## Year             1964\n## RS                663\n## RA                636\n## W                  80\n## OBP             0.315\n## SLG             0.389\n## BA              0.264\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 1188, dtype: object\n## Team              PIT\n## League             NL\n## Year             1963\n## RS                567\n## RA                595\n## W                  74\n## OBP             0.309\n## SLG             0.359\n## BA               0.25\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 1208, dtype: object\n## Team              PIT\n## League             NL\n## Year             1962\n## RS                706\n## RA                626\n## W                  93\n## OBP             0.321\n## SLG             0.394\n## BA              0.268\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 161\n## OOBP              NaN\n## OSLG              NaN\n## Name: 1228, dtype: object# Iterate over pit_df and print each index variable, row, and row type\nfor i,row in pit_df.iterrows():\n    print(i)\n    print(row)\n    print(type(row))## 21\n## Team              PIT\n## League             NL\n## Year             2012\n## RS                651\n## RA                674\n## W                  79\n## OBP             0.304\n## SLG             0.395\n## BA              0.243\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP            0.314\n## OSLG             0.39\n## Name: 21, dtype: object\n## <class 'pandas.core.series.Series'>\n## 51\n## Team              PIT\n## League             NL\n## Year             2011\n## RS                610\n## RA                712\n## W                  72\n## OBP             0.309\n## SLG             0.368\n## BA              0.244\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP            0.338\n## OSLG            0.409\n## Name: 51, dtype: object\n## <class 'pandas.core.series.Series'>\n## 81\n## Team              PIT\n## League             NL\n## Year             2010\n## RS                587\n## RA                866\n## W                  57\n## OBP             0.304\n## SLG             0.373\n## BA              0.242\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP            0.348\n## OSLG            0.449\n## Name: 81, dtype: object\n## <class 'pandas.core.series.Series'>\n## 111\n## Team              PIT\n## League             NL\n## Year             2009\n## RS                636\n## RA                768\n## W                  62\n## OBP             0.318\n## SLG             0.387\n## BA              0.252\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 161\n## OOBP            0.346\n## OSLG            0.442\n## Name: 111, dtype: object\n## <class 'pandas.core.series.Series'>\n## 141\n## Team              PIT\n## League             NL\n## Year             2008\n## RS                735\n## RA                884\n## W                  67\n## OBP              0.32\n## SLG             0.403\n## BA              0.258\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP            0.362\n## OSLG            0.454\n## Name: 141, dtype: object\n## <class 'pandas.core.series.Series'>\n## 171\n## Team              PIT\n## League             NL\n## Year             2007\n## RS                724\n## RA                846\n## W                  68\n## OBP             0.325\n## SLG             0.411\n## BA              0.263\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP            0.352\n## OSLG            0.447\n## Name: 171, dtype: object\n## <class 'pandas.core.series.Series'>\n## 201\n## Team              PIT\n## League             NL\n## Year             2006\n## RS                691\n## RA                797\n## W                  67\n## OBP             0.327\n## SLG             0.397\n## BA              0.263\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP            0.357\n## OSLG            0.431\n## Name: 201, dtype: object\n## <class 'pandas.core.series.Series'>\n## 231\n## Team              PIT\n## League             NL\n## Year             2005\n## RS                680\n## RA                769\n## W                  67\n## OBP             0.322\n## SLG               0.4\n## BA              0.259\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP            0.344\n## OSLG            0.424\n## Name: 231, dtype: object\n## <class 'pandas.core.series.Series'>\n## 262\n## Team              PIT\n## League             NL\n## Year             2004\n## RS                680\n## RA                744\n## W                  72\n## OBP             0.321\n## SLG             0.401\n## BA               0.26\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 161\n## OOBP            0.342\n## OSLG            0.416\n## Name: 262, dtype: object\n## <class 'pandas.core.series.Series'>\n## 292\n## Team              PIT\n## League             NL\n## Year             2003\n## RS                753\n## RA                801\n## W                  75\n## OBP             0.338\n## SLG              0.42\n## BA              0.267\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP            0.336\n## OSLG            0.431\n## Name: 292, dtype: object\n## <class 'pandas.core.series.Series'>\n## 322\n## Team              PIT\n## League             NL\n## Year             2002\n## RS                641\n## RA                730\n## W                  72\n## OBP             0.319\n## SLG             0.381\n## BA              0.244\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 161\n## OOBP            0.342\n## OSLG            0.423\n## Name: 322, dtype: object\n## <class 'pandas.core.series.Series'>\n## 352\n## Team              PIT\n## League             NL\n## Year             2001\n## RS                657\n## RA                858\n## W                  62\n## OBP             0.313\n## SLG             0.393\n## BA              0.247\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP            0.344\n## OSLG            0.433\n## Name: 352, dtype: object\n## <class 'pandas.core.series.Series'>\n## 382\n## Team              PIT\n## League             NL\n## Year             2000\n## RS                793\n## RA                888\n## W                  69\n## OBP             0.339\n## SLG             0.424\n## BA              0.267\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP            0.361\n## OSLG            0.432\n## Name: 382, dtype: object\n## <class 'pandas.core.series.Series'>\n## 412\n## Team              PIT\n## League             NL\n## Year             1999\n## RS                775\n## RA                782\n## W                  78\n## OBP             0.334\n## SLG             0.419\n## BA              0.259\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 161\n## OOBP            0.343\n## OSLG             0.42\n## Name: 412, dtype: object\n## <class 'pandas.core.series.Series'>\n## 442\n## Team              PIT\n## League             NL\n## Year             1998\n## RS                650\n## RA                718\n## W                  69\n## OBP             0.311\n## SLG             0.374\n## BA              0.254\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 163\n## OOBP              NaN\n## OSLG              NaN\n## Name: 442, dtype: object\n## <class 'pandas.core.series.Series'>\n## 471\n## Team              PIT\n## League             NL\n## Year             1997\n## RS                725\n## RA                760\n## W                  79\n## OBP             0.329\n## SLG             0.404\n## BA              0.262\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 471, dtype: object\n## <class 'pandas.core.series.Series'>\n## 499\n## Team              PIT\n## League             NL\n## Year             1996\n## RS                776\n## RA                833\n## W                  73\n## OBP             0.329\n## SLG             0.407\n## BA              0.266\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 499, dtype: object\n## <class 'pandas.core.series.Series'>\n## 527\n## Team              PIT\n## League             NL\n## Year             1993\n## RS                707\n## RA                806\n## W                  75\n## OBP             0.335\n## SLG             0.393\n## BA              0.267\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 527, dtype: object\n## <class 'pandas.core.series.Series'>\n## 553\n## Team              PIT\n## League             NL\n## Year             1992\n## RS                693\n## RA                595\n## W                  96\n## OBP             0.324\n## SLG             0.381\n## BA              0.255\n## Playoffs            1\n## RankSeason        2.0\n## RankPlayoffs      3.0\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 553, dtype: object\n## <class 'pandas.core.series.Series'>\n## 579\n## Team              PIT\n## League             NL\n## Year             1991\n## RS                768\n## RA                632\n## W                  98\n## OBP             0.338\n## SLG             0.398\n## BA              0.263\n## Playoffs            1\n## RankSeason        1.0\n## RankPlayoffs      3.0\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 579, dtype: object\n## <class 'pandas.core.series.Series'>\n## 605\n## Team              PIT\n## League             NL\n## Year             1990\n## RS                733\n## RA                619\n## W                  95\n## OBP              0.33\n## SLG             0.405\n## BA              0.259\n## Playoffs            1\n## RankSeason        2.0\n## RankPlayoffs      3.0\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 605, dtype: object\n## <class 'pandas.core.series.Series'>\n## 631\n## Team              PIT\n## League             NL\n## Year             1989\n## RS                637\n## RA                680\n## W                  74\n## OBP             0.311\n## SLG             0.359\n## BA              0.241\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 164\n## OOBP              NaN\n## OSLG              NaN\n## Name: 631, dtype: object\n## <class 'pandas.core.series.Series'>\n## 657\n## Team              PIT\n## League             NL\n## Year             1988\n## RS                651\n## RA                616\n## W                  85\n## OBP             0.317\n## SLG             0.369\n## BA              0.247\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 160\n## OOBP              NaN\n## OSLG              NaN\n## Name: 657, dtype: object\n## <class 'pandas.core.series.Series'>\n## 683\n## Team              PIT\n## League             NL\n## Year             1987\n## RS                723\n## RA                744\n## W                  80\n## OBP              0.33\n## SLG             0.403\n## BA              0.264\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 683, dtype: object\n## <class 'pandas.core.series.Series'>\n## 709\n## Team              PIT\n## League             NL\n## Year             1986\n## RS                663\n## RA                700\n## W                  64\n## OBP             0.321\n## SLG             0.374\n## BA               0.25\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 709, dtype: object\n## <class 'pandas.core.series.Series'>\n## 735\n## Team              PIT\n## League             NL\n## Year             1985\n## RS                568\n## RA                708\n## W                  57\n## OBP             0.311\n## SLG             0.347\n## BA              0.247\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 161\n## OOBP              NaN\n## OSLG              NaN\n## Name: 735, dtype: object\n## <class 'pandas.core.series.Series'>\n## 761\n## Team              PIT\n## League             NL\n## Year             1984\n## RS                615\n## RA                567\n## W                  75\n## OBP              0.31\n## SLG             0.363\n## BA              0.255\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 761, dtype: object\n## <class 'pandas.core.series.Series'>\n## 787\n## Team              PIT\n## League             NL\n## Year             1983\n## RS                659\n## RA                648\n## W                  84\n## OBP             0.325\n## SLG             0.383\n## BA              0.264\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 787, dtype: object\n## <class 'pandas.core.series.Series'>\n## 813\n## Team              PIT\n## League             NL\n## Year             1982\n## RS                724\n## RA                696\n## W                  84\n## OBP             0.327\n## SLG             0.408\n## BA              0.273\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 813, dtype: object\n## <class 'pandas.core.series.Series'>\n## 839\n## Team              PIT\n## League             NL\n## Year             1980\n## RS                666\n## RA                646\n## W                  83\n## OBP             0.322\n## SLG             0.388\n## BA              0.266\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 839, dtype: object\n## <class 'pandas.core.series.Series'>\n## 865\n## Team              PIT\n## League             NL\n## Year             1979\n## RS                775\n## RA                643\n## W                  98\n## OBP              0.33\n## SLG             0.416\n## BA              0.272\n## Playoffs            1\n## RankSeason        2.0\n## RankPlayoffs      1.0\n## G                 163\n## OOBP              NaN\n## OSLG              NaN\n## Name: 865, dtype: object\n## <class 'pandas.core.series.Series'>\n## 891\n## Team              PIT\n## League             NL\n## Year             1978\n## RS                684\n## RA                637\n## W                  88\n## OBP              0.32\n## SLG             0.385\n## BA              0.257\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 161\n## OOBP              NaN\n## OSLG              NaN\n## Name: 891, dtype: object\n## <class 'pandas.core.series.Series'>\n## 917\n## Team              PIT\n## League             NL\n## Year             1977\n## RS                734\n## RA                665\n## W                  96\n## OBP             0.331\n## SLG             0.413\n## BA              0.274\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 917, dtype: object\n## <class 'pandas.core.series.Series'>\n## 943\n## Team              PIT\n## League             NL\n## Year             1976\n## RS                708\n## RA                630\n## W                  92\n## OBP             0.321\n## SLG             0.391\n## BA              0.267\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 943, dtype: object\n## <class 'pandas.core.series.Series'>\n## 967\n## Team              PIT\n## League             NL\n## Year             1975\n## RS                712\n## RA                565\n## W                  92\n## OBP             0.323\n## SLG             0.402\n## BA              0.263\n## Playoffs            1\n## RankSeason        4.0\n## RankPlayoffs      3.0\n## G                 161\n## OOBP              NaN\n## OSLG              NaN\n## Name: 967, dtype: object\n## <class 'pandas.core.series.Series'>\n## 991\n## Team              PIT\n## League             NL\n## Year             1974\n## RS                751\n## RA                657\n## W                  88\n## OBP             0.335\n## SLG             0.391\n## BA              0.274\n## Playoffs            1\n## RankSeason        4.0\n## RankPlayoffs      3.0\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 991, dtype: object\n## <class 'pandas.core.series.Series'>\n## 1015\n## Team              PIT\n## League             NL\n## Year             1973\n## RS                704\n## RA                693\n## W                  80\n## OBP             0.315\n## SLG             0.405\n## BA              0.261\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 1015, dtype: object\n## <class 'pandas.core.series.Series'>\n## 1039\n## Team              PIT\n## League             NL\n## Year             1971\n## RS                788\n## RA                599\n## W                  97\n## OBP              0.33\n## SLG             0.416\n## BA              0.274\n## Playoffs            1\n## RankSeason        2.0\n## RankPlayoffs      1.0\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 1039, dtype: object\n## <class 'pandas.core.series.Series'>\n## 1063\n## Team              PIT\n## League             NL\n## Year             1970\n## RS                729\n## RA                664\n## W                  89\n## OBP             0.325\n## SLG             0.406\n## BA               0.27\n## Playoffs            1\n## RankSeason        4.0\n## RankPlayoffs      3.0\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 1063, dtype: object\n## <class 'pandas.core.series.Series'>\n## 1086\n## Team              PIT\n## League             NL\n## Year             1969\n## RS                725\n## RA                652\n## W                  88\n## OBP             0.334\n## SLG             0.398\n## BA              0.277\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 1086, dtype: object\n## <class 'pandas.core.series.Series'>\n## 1108\n## Team              PIT\n## League             NL\n## Year             1968\n## RS                583\n## RA                532\n## W                  80\n## OBP             0.306\n## SLG             0.343\n## BA              0.252\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 163\n## OOBP              NaN\n## OSLG              NaN\n## Name: 1108, dtype: object\n## <class 'pandas.core.series.Series'>\n## 1128\n## Team              PIT\n## League             NL\n## Year             1967\n## RS                679\n## RA                693\n## W                  81\n## OBP             0.324\n## SLG              0.38\n## BA              0.277\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 163\n## OOBP              NaN\n## OSLG              NaN\n## Name: 1128, dtype: object\n## <class 'pandas.core.series.Series'>\n## 1148\n## Team              PIT\n## League             NL\n## Year             1966\n## RS                759\n## RA                641\n## W                  92\n## OBP             0.329\n## SLG             0.428\n## BA              0.279\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 1148, dtype: object\n## <class 'pandas.core.series.Series'>\n## 1168\n## Team              PIT\n## League             NL\n## Year             1965\n## RS                675\n## RA                580\n## W                  90\n## OBP             0.317\n## SLG             0.382\n## BA              0.265\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 163\n## OOBP              NaN\n## OSLG              NaN\n## Name: 1168, dtype: object\n## <class 'pandas.core.series.Series'>\n## 1188\n## Team              PIT\n## League             NL\n## Year             1964\n## RS                663\n## RA                636\n## W                  80\n## OBP             0.315\n## SLG             0.389\n## BA              0.264\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 1188, dtype: object\n## <class 'pandas.core.series.Series'>\n## 1208\n## Team              PIT\n## League             NL\n## Year             1963\n## RS                567\n## RA                595\n## W                  74\n## OBP             0.309\n## SLG             0.359\n## BA               0.25\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 1208, dtype: object\n## <class 'pandas.core.series.Series'>\n## 1228\n## Team              PIT\n## League             NL\n## Year             1962\n## RS                706\n## RA                626\n## W                  93\n## OBP             0.321\n## SLG             0.394\n## BA              0.268\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 161\n## OOBP              NaN\n## OSLG              NaN\n## Name: 1228, dtype: object\n## <class 'pandas.core.series.Series'># Use one variable instead of two to store the result of .iterrows()\nfor row_tuple in pit_df.iterrows():\n    print(row_tuple)## (21, Team              PIT\n## League             NL\n## Year             2012\n## RS                651\n## RA                674\n## W                  79\n## OBP             0.304\n## SLG             0.395\n## BA              0.243\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP            0.314\n## OSLG             0.39\n## Name: 21, dtype: object)\n## (51, Team              PIT\n## League             NL\n## Year             2011\n## RS                610\n## RA                712\n## W                  72\n## OBP             0.309\n## SLG             0.368\n## BA              0.244\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP            0.338\n## OSLG            0.409\n## Name: 51, dtype: object)\n## (81, Team              PIT\n## League             NL\n## Year             2010\n## RS                587\n## RA                866\n## W                  57\n## OBP             0.304\n## SLG             0.373\n## BA              0.242\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP            0.348\n## OSLG            0.449\n## Name: 81, dtype: object)\n## (111, Team              PIT\n## League             NL\n## Year             2009\n## RS                636\n## RA                768\n## W                  62\n## OBP             0.318\n## SLG             0.387\n## BA              0.252\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 161\n## OOBP            0.346\n## OSLG            0.442\n## Name: 111, dtype: object)\n## (141, Team              PIT\n## League             NL\n## Year             2008\n## RS                735\n## RA                884\n## W                  67\n## OBP              0.32\n## SLG             0.403\n## BA              0.258\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP            0.362\n## OSLG            0.454\n## Name: 141, dtype: object)\n## (171, Team              PIT\n## League             NL\n## Year             2007\n## RS                724\n## RA                846\n## W                  68\n## OBP             0.325\n## SLG             0.411\n## BA              0.263\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP            0.352\n## OSLG            0.447\n## Name: 171, dtype: object)\n## (201, Team              PIT\n## League             NL\n## Year             2006\n## RS                691\n## RA                797\n## W                  67\n## OBP             0.327\n## SLG             0.397\n## BA              0.263\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP            0.357\n## OSLG            0.431\n## Name: 201, dtype: object)\n## (231, Team              PIT\n## League             NL\n## Year             2005\n## RS                680\n## RA                769\n## W                  67\n## OBP             0.322\n## SLG               0.4\n## BA              0.259\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP            0.344\n## OSLG            0.424\n## Name: 231, dtype: object)\n## (262, Team              PIT\n## League             NL\n## Year             2004\n## RS                680\n## RA                744\n## W                  72\n## OBP             0.321\n## SLG             0.401\n## BA               0.26\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 161\n## OOBP            0.342\n## OSLG            0.416\n## Name: 262, dtype: object)\n## (292, Team              PIT\n## League             NL\n## Year             2003\n## RS                753\n## RA                801\n## W                  75\n## OBP             0.338\n## SLG              0.42\n## BA              0.267\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP            0.336\n## OSLG            0.431\n## Name: 292, dtype: object)\n## (322, Team              PIT\n## League             NL\n## Year             2002\n## RS                641\n## RA                730\n## W                  72\n## OBP             0.319\n## SLG             0.381\n## BA              0.244\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 161\n## OOBP            0.342\n## OSLG            0.423\n## Name: 322, dtype: object)\n## (352, Team              PIT\n## League             NL\n## Year             2001\n## RS                657\n## RA                858\n## W                  62\n## OBP             0.313\n## SLG             0.393\n## BA              0.247\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP            0.344\n## OSLG            0.433\n## Name: 352, dtype: object)\n## (382, Team              PIT\n## League             NL\n## Year             2000\n## RS                793\n## RA                888\n## W                  69\n## OBP             0.339\n## SLG             0.424\n## BA              0.267\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP            0.361\n## OSLG            0.432\n## Name: 382, dtype: object)\n## (412, Team              PIT\n## League             NL\n## Year             1999\n## RS                775\n## RA                782\n## W                  78\n## OBP             0.334\n## SLG             0.419\n## BA              0.259\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 161\n## OOBP            0.343\n## OSLG             0.42\n## Name: 412, dtype: object)\n## (442, Team              PIT\n## League             NL\n## Year             1998\n## RS                650\n## RA                718\n## W                  69\n## OBP             0.311\n## SLG             0.374\n## BA              0.254\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 163\n## OOBP              NaN\n## OSLG              NaN\n## Name: 442, dtype: object)\n## (471, Team              PIT\n## League             NL\n## Year             1997\n## RS                725\n## RA                760\n## W                  79\n## OBP             0.329\n## SLG             0.404\n## BA              0.262\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 471, dtype: object)\n## (499, Team              PIT\n## League             NL\n## Year             1996\n## RS                776\n## RA                833\n## W                  73\n## OBP             0.329\n## SLG             0.407\n## BA              0.266\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 499, dtype: object)\n## (527, Team              PIT\n## League             NL\n## Year             1993\n## RS                707\n## RA                806\n## W                  75\n## OBP             0.335\n## SLG             0.393\n## BA              0.267\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 527, dtype: object)\n## (553, Team              PIT\n## League             NL\n## Year             1992\n## RS                693\n## RA                595\n## W                  96\n## OBP             0.324\n## SLG             0.381\n## BA              0.255\n## Playoffs            1\n## RankSeason        2.0\n## RankPlayoffs      3.0\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 553, dtype: object)\n## (579, Team              PIT\n## League             NL\n## Year             1991\n## RS                768\n## RA                632\n## W                  98\n## OBP             0.338\n## SLG             0.398\n## BA              0.263\n## Playoffs            1\n## RankSeason        1.0\n## RankPlayoffs      3.0\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 579, dtype: object)\n## (605, Team              PIT\n## League             NL\n## Year             1990\n## RS                733\n## RA                619\n## W                  95\n## OBP              0.33\n## SLG             0.405\n## BA              0.259\n## Playoffs            1\n## RankSeason        2.0\n## RankPlayoffs      3.0\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 605, dtype: object)\n## (631, Team              PIT\n## League             NL\n## Year             1989\n## RS                637\n## RA                680\n## W                  74\n## OBP             0.311\n## SLG             0.359\n## BA              0.241\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 164\n## OOBP              NaN\n## OSLG              NaN\n## Name: 631, dtype: object)\n## (657, Team              PIT\n## League             NL\n## Year             1988\n## RS                651\n## RA                616\n## W                  85\n## OBP             0.317\n## SLG             0.369\n## BA              0.247\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 160\n## OOBP              NaN\n## OSLG              NaN\n## Name: 657, dtype: object)\n## (683, Team              PIT\n## League             NL\n## Year             1987\n## RS                723\n## RA                744\n## W                  80\n## OBP              0.33\n## SLG             0.403\n## BA              0.264\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 683, dtype: object)\n## (709, Team              PIT\n## League             NL\n## Year             1986\n## RS                663\n## RA                700\n## W                  64\n## OBP             0.321\n## SLG             0.374\n## BA               0.25\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 709, dtype: object)\n## (735, Team              PIT\n## League             NL\n## Year             1985\n## RS                568\n## RA                708\n## W                  57\n## OBP             0.311\n## SLG             0.347\n## BA              0.247\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 161\n## OOBP              NaN\n## OSLG              NaN\n## Name: 735, dtype: object)\n## (761, Team              PIT\n## League             NL\n## Year             1984\n## RS                615\n## RA                567\n## W                  75\n## OBP              0.31\n## SLG             0.363\n## BA              0.255\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 761, dtype: object)\n## (787, Team              PIT\n## League             NL\n## Year             1983\n## RS                659\n## RA                648\n## W                  84\n## OBP             0.325\n## SLG             0.383\n## BA              0.264\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 787, dtype: object)\n## (813, Team              PIT\n## League             NL\n## Year             1982\n## RS                724\n## RA                696\n## W                  84\n## OBP             0.327\n## SLG             0.408\n## BA              0.273\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 813, dtype: object)\n## (839, Team              PIT\n## League             NL\n## Year             1980\n## RS                666\n## RA                646\n## W                  83\n## OBP             0.322\n## SLG             0.388\n## BA              0.266\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 839, dtype: object)\n## (865, Team              PIT\n## League             NL\n## Year             1979\n## RS                775\n## RA                643\n## W                  98\n## OBP              0.33\n## SLG             0.416\n## BA              0.272\n## Playoffs            1\n## RankSeason        2.0\n## RankPlayoffs      1.0\n## G                 163\n## OOBP              NaN\n## OSLG              NaN\n## Name: 865, dtype: object)\n## (891, Team              PIT\n## League             NL\n## Year             1978\n## RS                684\n## RA                637\n## W                  88\n## OBP              0.32\n## SLG             0.385\n## BA              0.257\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 161\n## OOBP              NaN\n## OSLG              NaN\n## Name: 891, dtype: object)\n## (917, Team              PIT\n## League             NL\n## Year             1977\n## RS                734\n## RA                665\n## W                  96\n## OBP             0.331\n## SLG             0.413\n## BA              0.274\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 917, dtype: object)\n## (943, Team              PIT\n## League             NL\n## Year             1976\n## RS                708\n## RA                630\n## W                  92\n## OBP             0.321\n## SLG             0.391\n## BA              0.267\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 943, dtype: object)\n## (967, Team              PIT\n## League             NL\n## Year             1975\n## RS                712\n## RA                565\n## W                  92\n## OBP             0.323\n## SLG             0.402\n## BA              0.263\n## Playoffs            1\n## RankSeason        4.0\n## RankPlayoffs      3.0\n## G                 161\n## OOBP              NaN\n## OSLG              NaN\n## Name: 967, dtype: object)\n## (991, Team              PIT\n## League             NL\n## Year             1974\n## RS                751\n## RA                657\n## W                  88\n## OBP             0.335\n## SLG             0.391\n## BA              0.274\n## Playoffs            1\n## RankSeason        4.0\n## RankPlayoffs      3.0\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 991, dtype: object)\n## (1015, Team              PIT\n## League             NL\n## Year             1973\n## RS                704\n## RA                693\n## W                  80\n## OBP             0.315\n## SLG             0.405\n## BA              0.261\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 1015, dtype: object)\n## (1039, Team              PIT\n## League             NL\n## Year             1971\n## RS                788\n## RA                599\n## W                  97\n## OBP              0.33\n## SLG             0.416\n## BA              0.274\n## Playoffs            1\n## RankSeason        2.0\n## RankPlayoffs      1.0\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 1039, dtype: object)\n## (1063, Team              PIT\n## League             NL\n## Year             1970\n## RS                729\n## RA                664\n## W                  89\n## OBP             0.325\n## SLG             0.406\n## BA               0.27\n## Playoffs            1\n## RankSeason        4.0\n## RankPlayoffs      3.0\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 1063, dtype: object)\n## (1086, Team              PIT\n## League             NL\n## Year             1969\n## RS                725\n## RA                652\n## W                  88\n## OBP             0.334\n## SLG             0.398\n## BA              0.277\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 1086, dtype: object)\n## (1108, Team              PIT\n## League             NL\n## Year             1968\n## RS                583\n## RA                532\n## W                  80\n## OBP             0.306\n## SLG             0.343\n## BA              0.252\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 163\n## OOBP              NaN\n## OSLG              NaN\n## Name: 1108, dtype: object)\n## (1128, Team              PIT\n## League             NL\n## Year             1967\n## RS                679\n## RA                693\n## W                  81\n## OBP             0.324\n## SLG              0.38\n## BA              0.277\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 163\n## OOBP              NaN\n## OSLG              NaN\n## Name: 1128, dtype: object)\n## (1148, Team              PIT\n## League             NL\n## Year             1966\n## RS                759\n## RA                641\n## W                  92\n## OBP             0.329\n## SLG             0.428\n## BA              0.279\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 1148, dtype: object)\n## (1168, Team              PIT\n## League             NL\n## Year             1965\n## RS                675\n## RA                580\n## W                  90\n## OBP             0.317\n## SLG             0.382\n## BA              0.265\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 163\n## OOBP              NaN\n## OSLG              NaN\n## Name: 1168, dtype: object)\n## (1188, Team              PIT\n## League             NL\n## Year             1964\n## RS                663\n## RA                636\n## W                  80\n## OBP             0.315\n## SLG             0.389\n## BA              0.264\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 1188, dtype: object)\n## (1208, Team              PIT\n## League             NL\n## Year             1963\n## RS                567\n## RA                595\n## W                  74\n## OBP             0.309\n## SLG             0.359\n## BA               0.25\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 1208, dtype: object)\n## (1228, Team              PIT\n## League             NL\n## Year             1962\n## RS                706\n## RA                626\n## W                  93\n## OBP             0.321\n## SLG             0.394\n## BA              0.268\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 161\n## OOBP              NaN\n## OSLG              NaN\n## Name: 1228, dtype: object)# Print the row and type of each row\nfor row_tuple in pit_df.iterrows():\n    print(row_tuple)\n    print(type(row_tuple))## (21, Team              PIT\n## League             NL\n## Year             2012\n## RS                651\n## RA                674\n## W                  79\n## OBP             0.304\n## SLG             0.395\n## BA              0.243\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP            0.314\n## OSLG             0.39\n## Name: 21, dtype: object)\n## <class 'tuple'>\n## (51, Team              PIT\n## League             NL\n## Year             2011\n## RS                610\n## RA                712\n## W                  72\n## OBP             0.309\n## SLG             0.368\n## BA              0.244\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP            0.338\n## OSLG            0.409\n## Name: 51, dtype: object)\n## <class 'tuple'>\n## (81, Team              PIT\n## League             NL\n## Year             2010\n## RS                587\n## RA                866\n## W                  57\n## OBP             0.304\n## SLG             0.373\n## BA              0.242\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP            0.348\n## OSLG            0.449\n## Name: 81, dtype: object)\n## <class 'tuple'>\n## (111, Team              PIT\n## League             NL\n## Year             2009\n## RS                636\n## RA                768\n## W                  62\n## OBP             0.318\n## SLG             0.387\n## BA              0.252\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 161\n## OOBP            0.346\n## OSLG            0.442\n## Name: 111, dtype: object)\n## <class 'tuple'>\n## (141, Team              PIT\n## League             NL\n## Year             2008\n## RS                735\n## RA                884\n## W                  67\n## OBP              0.32\n## SLG             0.403\n## BA              0.258\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP            0.362\n## OSLG            0.454\n## Name: 141, dtype: object)\n## <class 'tuple'>\n## (171, Team              PIT\n## League             NL\n## Year             2007\n## RS                724\n## RA                846\n## W                  68\n## OBP             0.325\n## SLG             0.411\n## BA              0.263\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP            0.352\n## OSLG            0.447\n## Name: 171, dtype: object)\n## <class 'tuple'>\n## (201, Team              PIT\n## League             NL\n## Year             2006\n## RS                691\n## RA                797\n## W                  67\n## OBP             0.327\n## SLG             0.397\n## BA              0.263\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP            0.357\n## OSLG            0.431\n## Name: 201, dtype: object)\n## <class 'tuple'>\n## (231, Team              PIT\n## League             NL\n## Year             2005\n## RS                680\n## RA                769\n## W                  67\n## OBP             0.322\n## SLG               0.4\n## BA              0.259\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP            0.344\n## OSLG            0.424\n## Name: 231, dtype: object)\n## <class 'tuple'>\n## (262, Team              PIT\n## League             NL\n## Year             2004\n## RS                680\n## RA                744\n## W                  72\n## OBP             0.321\n## SLG             0.401\n## BA               0.26\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 161\n## OOBP            0.342\n## OSLG            0.416\n## Name: 262, dtype: object)\n## <class 'tuple'>\n## (292, Team              PIT\n## League             NL\n## Year             2003\n## RS                753\n## RA                801\n## W                  75\n## OBP             0.338\n## SLG              0.42\n## BA              0.267\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP            0.336\n## OSLG            0.431\n## Name: 292, dtype: object)\n## <class 'tuple'>\n## (322, Team              PIT\n## League             NL\n## Year             2002\n## RS                641\n## RA                730\n## W                  72\n## OBP             0.319\n## SLG             0.381\n## BA              0.244\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 161\n## OOBP            0.342\n## OSLG            0.423\n## Name: 322, dtype: object)\n## <class 'tuple'>\n## (352, Team              PIT\n## League             NL\n## Year             2001\n## RS                657\n## RA                858\n## W                  62\n## OBP             0.313\n## SLG             0.393\n## BA              0.247\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP            0.344\n## OSLG            0.433\n## Name: 352, dtype: object)\n## <class 'tuple'>\n## (382, Team              PIT\n## League             NL\n## Year             2000\n## RS                793\n## RA                888\n## W                  69\n## OBP             0.339\n## SLG             0.424\n## BA              0.267\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP            0.361\n## OSLG            0.432\n## Name: 382, dtype: object)\n## <class 'tuple'>\n## (412, Team              PIT\n## League             NL\n## Year             1999\n## RS                775\n## RA                782\n## W                  78\n## OBP             0.334\n## SLG             0.419\n## BA              0.259\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 161\n## OOBP            0.343\n## OSLG             0.42\n## Name: 412, dtype: object)\n## <class 'tuple'>\n## (442, Team              PIT\n## League             NL\n## Year             1998\n## RS                650\n## RA                718\n## W                  69\n## OBP             0.311\n## SLG             0.374\n## BA              0.254\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 163\n## OOBP              NaN\n## OSLG              NaN\n## Name: 442, dtype: object)\n## <class 'tuple'>\n## (471, Team              PIT\n## League             NL\n## Year             1997\n## RS                725\n## RA                760\n## W                  79\n## OBP             0.329\n## SLG             0.404\n## BA              0.262\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 471, dtype: object)\n## <class 'tuple'>\n## (499, Team              PIT\n## League             NL\n## Year             1996\n## RS                776\n## RA                833\n## W                  73\n## OBP             0.329\n## SLG             0.407\n## BA              0.266\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 499, dtype: object)\n## <class 'tuple'>\n## (527, Team              PIT\n## League             NL\n## Year             1993\n## RS                707\n## RA                806\n## W                  75\n## OBP             0.335\n## SLG             0.393\n## BA              0.267\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 527, dtype: object)\n## <class 'tuple'>\n## (553, Team              PIT\n## League             NL\n## Year             1992\n## RS                693\n## RA                595\n## W                  96\n## OBP             0.324\n## SLG             0.381\n## BA              0.255\n## Playoffs            1\n## RankSeason        2.0\n## RankPlayoffs      3.0\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 553, dtype: object)\n## <class 'tuple'>\n## (579, Team              PIT\n## League             NL\n## Year             1991\n## RS                768\n## RA                632\n## W                  98\n## OBP             0.338\n## SLG             0.398\n## BA              0.263\n## Playoffs            1\n## RankSeason        1.0\n## RankPlayoffs      3.0\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 579, dtype: object)\n## <class 'tuple'>\n## (605, Team              PIT\n## League             NL\n## Year             1990\n## RS                733\n## RA                619\n## W                  95\n## OBP              0.33\n## SLG             0.405\n## BA              0.259\n## Playoffs            1\n## RankSeason        2.0\n## RankPlayoffs      3.0\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 605, dtype: object)\n## <class 'tuple'>\n## (631, Team              PIT\n## League             NL\n## Year             1989\n## RS                637\n## RA                680\n## W                  74\n## OBP             0.311\n## SLG             0.359\n## BA              0.241\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 164\n## OOBP              NaN\n## OSLG              NaN\n## Name: 631, dtype: object)\n## <class 'tuple'>\n## (657, Team              PIT\n## League             NL\n## Year             1988\n## RS                651\n## RA                616\n## W                  85\n## OBP             0.317\n## SLG             0.369\n## BA              0.247\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 160\n## OOBP              NaN\n## OSLG              NaN\n## Name: 657, dtype: object)\n## <class 'tuple'>\n## (683, Team              PIT\n## League             NL\n## Year             1987\n## RS                723\n## RA                744\n## W                  80\n## OBP              0.33\n## SLG             0.403\n## BA              0.264\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 683, dtype: object)\n## <class 'tuple'>\n## (709, Team              PIT\n## League             NL\n## Year             1986\n## RS                663\n## RA                700\n## W                  64\n## OBP             0.321\n## SLG             0.374\n## BA               0.25\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 709, dtype: object)\n## <class 'tuple'>\n## (735, Team              PIT\n## League             NL\n## Year             1985\n## RS                568\n## RA                708\n## W                  57\n## OBP             0.311\n## SLG             0.347\n## BA              0.247\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 161\n## OOBP              NaN\n## OSLG              NaN\n## Name: 735, dtype: object)\n## <class 'tuple'>\n## (761, Team              PIT\n## League             NL\n## Year             1984\n## RS                615\n## RA                567\n## W                  75\n## OBP              0.31\n## SLG             0.363\n## BA              0.255\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 761, dtype: object)\n## <class 'tuple'>\n## (787, Team              PIT\n## League             NL\n## Year             1983\n## RS                659\n## RA                648\n## W                  84\n## OBP             0.325\n## SLG             0.383\n## BA              0.264\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 787, dtype: object)\n## <class 'tuple'>\n## (813, Team              PIT\n## League             NL\n## Year             1982\n## RS                724\n## RA                696\n## W                  84\n## OBP             0.327\n## SLG             0.408\n## BA              0.273\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 813, dtype: object)\n## <class 'tuple'>\n## (839, Team              PIT\n## League             NL\n## Year             1980\n## RS                666\n## RA                646\n## W                  83\n## OBP             0.322\n## SLG             0.388\n## BA              0.266\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 839, dtype: object)\n## <class 'tuple'>\n## (865, Team              PIT\n## League             NL\n## Year             1979\n## RS                775\n## RA                643\n## W                  98\n## OBP              0.33\n## SLG             0.416\n## BA              0.272\n## Playoffs            1\n## RankSeason        2.0\n## RankPlayoffs      1.0\n## G                 163\n## OOBP              NaN\n## OSLG              NaN\n## Name: 865, dtype: object)\n## <class 'tuple'>\n## (891, Team              PIT\n## League             NL\n## Year             1978\n## RS                684\n## RA                637\n## W                  88\n## OBP              0.32\n## SLG             0.385\n## BA              0.257\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 161\n## OOBP              NaN\n## OSLG              NaN\n## Name: 891, dtype: object)\n## <class 'tuple'>\n## (917, Team              PIT\n## League             NL\n## Year             1977\n## RS                734\n## RA                665\n## W                  96\n## OBP             0.331\n## SLG             0.413\n## BA              0.274\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 917, dtype: object)\n## <class 'tuple'>\n## (943, Team              PIT\n## League             NL\n## Year             1976\n## RS                708\n## RA                630\n## W                  92\n## OBP             0.321\n## SLG             0.391\n## BA              0.267\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 943, dtype: object)\n## <class 'tuple'>\n## (967, Team              PIT\n## League             NL\n## Year             1975\n## RS                712\n## RA                565\n## W                  92\n## OBP             0.323\n## SLG             0.402\n## BA              0.263\n## Playoffs            1\n## RankSeason        4.0\n## RankPlayoffs      3.0\n## G                 161\n## OOBP              NaN\n## OSLG              NaN\n## Name: 967, dtype: object)\n## <class 'tuple'>\n## (991, Team              PIT\n## League             NL\n## Year             1974\n## RS                751\n## RA                657\n## W                  88\n## OBP             0.335\n## SLG             0.391\n## BA              0.274\n## Playoffs            1\n## RankSeason        4.0\n## RankPlayoffs      3.0\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 991, dtype: object)\n## <class 'tuple'>\n## (1015, Team              PIT\n## League             NL\n## Year             1973\n## RS                704\n## RA                693\n## W                  80\n## OBP             0.315\n## SLG             0.405\n## BA              0.261\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 1015, dtype: object)\n## <class 'tuple'>\n## (1039, Team              PIT\n## League             NL\n## Year             1971\n## RS                788\n## RA                599\n## W                  97\n## OBP              0.33\n## SLG             0.416\n## BA              0.274\n## Playoffs            1\n## RankSeason        2.0\n## RankPlayoffs      1.0\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 1039, dtype: object)\n## <class 'tuple'>\n## (1063, Team              PIT\n## League             NL\n## Year             1970\n## RS                729\n## RA                664\n## W                  89\n## OBP             0.325\n## SLG             0.406\n## BA               0.27\n## Playoffs            1\n## RankSeason        4.0\n## RankPlayoffs      3.0\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 1063, dtype: object)\n## <class 'tuple'>\n## (1086, Team              PIT\n## League             NL\n## Year             1969\n## RS                725\n## RA                652\n## W                  88\n## OBP             0.334\n## SLG             0.398\n## BA              0.277\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 1086, dtype: object)\n## <class 'tuple'>\n## (1108, Team              PIT\n## League             NL\n## Year             1968\n## RS                583\n## RA                532\n## W                  80\n## OBP             0.306\n## SLG             0.343\n## BA              0.252\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 163\n## OOBP              NaN\n## OSLG              NaN\n## Name: 1108, dtype: object)\n## <class 'tuple'>\n## (1128, Team              PIT\n## League             NL\n## Year             1967\n## RS                679\n## RA                693\n## W                  81\n## OBP             0.324\n## SLG              0.38\n## BA              0.277\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 163\n## OOBP              NaN\n## OSLG              NaN\n## Name: 1128, dtype: object)\n## <class 'tuple'>\n## (1148, Team              PIT\n## League             NL\n## Year             1966\n## RS                759\n## RA                641\n## W                  92\n## OBP             0.329\n## SLG             0.428\n## BA              0.279\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 1148, dtype: object)\n## <class 'tuple'>\n## (1168, Team              PIT\n## League             NL\n## Year             1965\n## RS                675\n## RA                580\n## W                  90\n## OBP             0.317\n## SLG             0.382\n## BA              0.265\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 163\n## OOBP              NaN\n## OSLG              NaN\n## Name: 1168, dtype: object)\n## <class 'tuple'>\n## (1188, Team              PIT\n## League             NL\n## Year             1964\n## RS                663\n## RA                636\n## W                  80\n## OBP             0.315\n## SLG             0.389\n## BA              0.264\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 1188, dtype: object)\n## <class 'tuple'>\n## (1208, Team              PIT\n## League             NL\n## Year             1963\n## RS                567\n## RA                595\n## W                  74\n## OBP             0.309\n## SLG             0.359\n## BA               0.25\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 162\n## OOBP              NaN\n## OSLG              NaN\n## Name: 1208, dtype: object)\n## <class 'tuple'>\n## (1228, Team              PIT\n## League             NL\n## Year             1962\n## RS                706\n## RA                626\n## W                  93\n## OBP             0.321\n## SLG             0.394\n## BA              0.268\n## Playoffs            0\n## RankSeason        NaN\n## RankPlayoffs      NaN\n## G                 161\n## OOBP              NaN\n## OSLG              NaN\n## Name: 1228, dtype: object)\n## <class 'tuple'>"},{"path":"writing-efficient-python-code.html","id":"run-differentials-with-.iterrows","chapter":"Writing Efficient Python Code","heading":"Run differentials with .iterrows()","text":"\n’ve hired San Francisco Giants analyst—congrats! team’s owner wants calculate metric called run differential season year 2008 2012. metric calculated subtracting total number runs team allowed season team’s total number runs scored season. ‘RS’ means runs scored ‘RA’ means runs allowed.\n\nfunction calculates metric:\n\nDataFrame loaded session giants_df printed console. Let’s practice using .iterrows() add run differential column DataFrame.\n\nCreate empty list called run_diffs used store run differentials calculate.\n\nWrite loop uses .iterrows() loop giants_df collects row’s runs scored runs allowed.\n\nAdd line loop uses provided function calculate row’s run differential.\n\nAdd line loop appends row’s run differential run_diffs list.\n\nGreat job! Take look giants_df DataFrame new run differential column (‘RD’) created (printed console).‘Playoffs’ column tells team made playoffs given season. 1 means team made playoffs season 0 means team make playoffs season.notice seasons highest run differentials Giants made playoffs? fact, seasons (2010 2012), San Francisco Giants made playoffs also won World Series! Cool!\n","code":"def calc_run_diff(runs_scored, runs_allowed):\n\n    run_diff = runs_scored - runs_allowed\n\n    return run_diff\n# edited/added\ngiants_df = baseball_df[(baseball_df.Team == 'SFG') & (baseball_df.Year.between(2008,2012))][['Team', 'League', 'Year', 'RS', 'RA', 'W', 'G', 'Playoffs']]\n\ndef calc_run_diff(runs_scored, runs_allowed):\n\n    run_diff = runs_scored - runs_allowed\n\n    return run_diff# Create an empty list to store run differentials\nrun_diffs = []# Create an empty list to store run differentials\nrun_diffs = []\n\n# Write a for loop and collect runs allowed and runs scored for each row\nfor i,row in giants_df.iterrows():\n    runs_scored = row['RS']\n    runs_allowed = row['RA']# Create an empty list to store run differentials\nrun_diffs = []\n\n# Write a for loop and collect runs allowed and runs scored for each row\nfor i,row in giants_df.iterrows():\n    runs_scored = row['RS']\n    runs_allowed = row['RA']\n    \n    # Use the provided function to calculate run_diff for each row\n    run_diff = calc_run_diff(runs_scored, runs_allowed)# Create an empty list to store run differentials\nrun_diffs = []\n\n# Write a for loop and collect runs allowed and runs scored for each row\nfor i,row in giants_df.iterrows():\n    runs_scored = row['RS']\n    runs_allowed = row['RA']\n    \n    # Use the provided function to calculate run_diff for each row\n    run_diff = calc_run_diff(runs_scored, runs_allowed)\n    \n    # Append each run differential to the output list\n    run_diffs.append(run_diff)\n\ngiants_df['RD'] = run_diffs\nprint(giants_df)##     Team League  Year   RS   RA   W    G  Playoffs   RD\n## 24   SFG     NL  2012  718  649  94  162         1   69\n## 54   SFG     NL  2011  570  578  86  162         0   -8\n## 84   SFG     NL  2010  697  583  92  162         1  114\n## 114  SFG     NL  2009  657  611  88  162         0   46\n## 144  SFG     NL  2008  640  759  72  162         0 -119"},{"path":"writing-efficient-python-code.html","id":"another-iterator-method-.itertuples","chapter":"Writing Efficient Python Code","heading":"Another iterator method: .itertuples()","text":"","code":""},{"path":"writing-efficient-python-code.html","id":"iterating-with-.itertuples","chapter":"Writing Efficient Python Code","heading":"Iterating with .itertuples()","text":"\nRemember, .itertuples() returns DataFrame row special data type called namedtuple. can look attribute within namedtuple special syntax. Let’s practice working namedtuples.\n\npandas DataFrame loaded session called rangers_df. DataFrame contains stats (‘Team’, ‘League’, ‘Year’, ‘RS’, ‘RA’, ‘W’, ‘G’, ‘Playoffs’) Major League baseball team named Texas Rangers (abbreviated ‘TEX’).\n\nUse .itertuples() loop rangers_df print row.\n\nLoop rangers_df .itertuples() save row’s Index, Year, Wins (W) attribute , year, wins.\n\nNow, loop rangers_df print values rows Rangers made playoffs.\n\nAwesome! ’re getting hang using .itertuples(). Remember, need use dot syntax referencing attribute namedtuple. can create new variable using row’s dot reference (storing row.Index variable ). can use row’s dot reference directly perform calculations checks. Notice save row.Playoffs new variable check statement (able use row.Playoffs directly check). notice pattern Texas Rangers playoff appearances? six appearances two distinct sets groupings (one 2010 - 2012 one 1996 - 1999).\n","code":"# edited/added\nrangers_df = baseball_df[(baseball_df.Team == 'TEX') & (baseball_df.Year.between(1973,2012))][['Team', 'League', 'Year', 'RS', 'RA', 'W', 'G', 'Playoffs']]\n\n# Loop over the DataFrame and print each row\nfor row in rangers_df.itertuples():\n  print(row)## Pandas(Index=27, Team='TEX', League='AL', Year=2012, RS=808, RA=707, W=93, G=162, Playoffs=1)\n## Pandas(Index=57, Team='TEX', League='AL', Year=2011, RS=855, RA=677, W=96, G=162, Playoffs=1)\n## Pandas(Index=87, Team='TEX', League='AL', Year=2010, RS=787, RA=687, W=90, G=162, Playoffs=1)\n## Pandas(Index=117, Team='TEX', League='AL', Year=2009, RS=784, RA=740, W=87, G=162, Playoffs=0)\n## Pandas(Index=147, Team='TEX', League='AL', Year=2008, RS=901, RA=967, W=79, G=162, Playoffs=0)\n## Pandas(Index=177, Team='TEX', League='AL', Year=2007, RS=816, RA=844, W=75, G=162, Playoffs=0)\n## Pandas(Index=207, Team='TEX', League='AL', Year=2006, RS=835, RA=784, W=80, G=162, Playoffs=0)\n## Pandas(Index=237, Team='TEX', League='AL', Year=2005, RS=865, RA=858, W=79, G=162, Playoffs=0)\n## Pandas(Index=268, Team='TEX', League='AL', Year=2004, RS=860, RA=794, W=89, G=162, Playoffs=0)\n## Pandas(Index=298, Team='TEX', League='AL', Year=2003, RS=826, RA=969, W=71, G=162, Playoffs=0)\n## Pandas(Index=328, Team='TEX', League='AL', Year=2002, RS=843, RA=882, W=72, G=162, Playoffs=0)\n## Pandas(Index=358, Team='TEX', League='AL', Year=2001, RS=890, RA=968, W=73, G=162, Playoffs=0)\n## Pandas(Index=388, Team='TEX', League='AL', Year=2000, RS=848, RA=974, W=71, G=162, Playoffs=0)\n## Pandas(Index=418, Team='TEX', League='AL', Year=1999, RS=945, RA=859, W=95, G=162, Playoffs=1)\n## Pandas(Index=448, Team='TEX', League='AL', Year=1998, RS=940, RA=871, W=88, G=162, Playoffs=1)\n## Pandas(Index=476, Team='TEX', League='AL', Year=1997, RS=807, RA=823, W=77, G=162, Playoffs=0)\n## Pandas(Index=504, Team='TEX', League='AL', Year=1996, RS=928, RA=799, W=90, G=163, Playoffs=1)\n## Pandas(Index=532, Team='TEX', League='AL', Year=1993, RS=835, RA=751, W=86, G=162, Playoffs=0)\n## Pandas(Index=558, Team='TEX', League='AL', Year=1992, RS=682, RA=753, W=77, G=162, Playoffs=0)\n## Pandas(Index=584, Team='TEX', League='AL', Year=1991, RS=829, RA=814, W=85, G=162, Playoffs=0)\n## Pandas(Index=610, Team='TEX', League='AL', Year=1990, RS=676, RA=696, W=83, G=162, Playoffs=0)\n## Pandas(Index=636, Team='TEX', League='AL', Year=1989, RS=695, RA=714, W=83, G=162, Playoffs=0)\n## Pandas(Index=662, Team='TEX', League='AL', Year=1988, RS=637, RA=735, W=70, G=161, Playoffs=0)\n## Pandas(Index=688, Team='TEX', League='AL', Year=1987, RS=823, RA=849, W=75, G=162, Playoffs=0)\n## Pandas(Index=714, Team='TEX', League='AL', Year=1986, RS=771, RA=743, W=87, G=162, Playoffs=0)\n## Pandas(Index=740, Team='TEX', League='AL', Year=1985, RS=617, RA=785, W=62, G=161, Playoffs=0)\n## Pandas(Index=766, Team='TEX', League='AL', Year=1984, RS=656, RA=714, W=69, G=161, Playoffs=0)\n## Pandas(Index=792, Team='TEX', League='AL', Year=1983, RS=639, RA=609, W=77, G=163, Playoffs=0)\n## Pandas(Index=818, Team='TEX', League='AL', Year=1982, RS=590, RA=749, W=64, G=162, Playoffs=0)\n## Pandas(Index=844, Team='TEX', League='AL', Year=1980, RS=756, RA=752, W=76, G=163, Playoffs=0)\n## Pandas(Index=870, Team='TEX', League='AL', Year=1979, RS=750, RA=698, W=83, G=162, Playoffs=0)\n## Pandas(Index=896, Team='TEX', League='AL', Year=1978, RS=692, RA=632, W=87, G=162, Playoffs=0)\n## Pandas(Index=922, Team='TEX', League='AL', Year=1977, RS=767, RA=657, W=94, G=162, Playoffs=0)\n## Pandas(Index=947, Team='TEX', League='AL', Year=1976, RS=616, RA=652, W=76, G=162, Playoffs=0)\n## Pandas(Index=971, Team='TEX', League='AL', Year=1975, RS=714, RA=733, W=79, G=162, Playoffs=0)\n## Pandas(Index=995, Team='TEX', League='AL', Year=1974, RS=690, RA=698, W=83, G=161, Playoffs=0)\n## Pandas(Index=1019, Team='TEX', League='AL', Year=1973, RS=619, RA=844, W=57, G=162, Playoffs=0)# Loop over the DataFrame and print each row's Index, Year and Wins (W)\nfor row in rangers_df.itertuples():\n  i = row.Index\n  year = row.Year\n  wins = row.W\n  print(i, year, wins)## 27 2012 93\n## 57 2011 96\n## 87 2010 90\n## 117 2009 87\n## 147 2008 79\n## 177 2007 75\n## 207 2006 80\n## 237 2005 79\n## 268 2004 89\n## 298 2003 71\n## 328 2002 72\n## 358 2001 73\n## 388 2000 71\n## 418 1999 95\n## 448 1998 88\n## 476 1997 77\n## 504 1996 90\n## 532 1993 86\n## 558 1992 77\n## 584 1991 85\n## 610 1990 83\n## 636 1989 83\n## 662 1988 70\n## 688 1987 75\n## 714 1986 87\n## 740 1985 62\n## 766 1984 69\n## 792 1983 77\n## 818 1982 64\n## 844 1980 76\n## 870 1979 83\n## 896 1978 87\n## 922 1977 94\n## 947 1976 76\n## 971 1975 79\n## 995 1974 83\n## 1019 1973 57# Loop over the DataFrame and print each row's Index, Year and Wins (W)\nfor row in rangers_df.itertuples():\n  i = row.Index\n  year = row.Year\n  wins = row.W\n  \n  # Check if rangers made Playoffs (1 means yes; 0 means no)\n  if row.Playoffs == 1:\n    print(i, year, wins)## 27 2012 93\n## 57 2011 96\n## 87 2010 90\n## 418 1999 95\n## 448 1998 88\n## 504 1996 90"},{"path":"writing-efficient-python-code.html","id":"run-differentials-with-.itertuples","chapter":"Writing Efficient Python Code","heading":"Run differentials with .itertuples()","text":"\nNew York Yankees made trade San Francisco Giants analyst contract— ’re hot commodity! new boss seen work Giants now wants something similar Yankees data. ’d like calculate run differentials Yankees year 1962 year 2012 find season best run differential.\n\n’ve remembered function used working Giants quickly write :\n\nLet’s use .itertuples() loop yankees_df DataFrame (loaded session) calculate run differentials.\n\nUse .itertuples() loop yankees_df grab row’s runs scored runs allowed values.\n\nNow, calculate row’s run differential using calc_run_diff(). sure append row’s run differential run_diffs.\n\nAppend new column called ‘RD’ yankees_df DataFrame contains run differentials calculated.\n\nyear within DataFrame New York Yankees highest run differential?\n\n’ll need rerun code creates ‘RD’ column ’d like analyze DataFrame code rather looking console output.\n2011 (Run Differential 210)1998 (Run Differential 309)1962 (Run Differential 503)1985 (Run Differential 315)\nGreat job! used .itertuples() help Yankees calculate run differentials. Remember, using .itertuples() just like using .iterrows() except tends faster. also use dot reference looking attributes .itertuples(). found Yankees’ highest run differential 1998. know actually hold record highest run differential MLB season (411 year 1939 scored 967 runs allowed 556)? Wow!\n","code":"def calc_run_diff(runs_scored, runs_allowed):\n\n    run_diff = runs_scored - runs_allowed\n\n    return run_diff\n# edited/added\nyankees_df = baseball_df[(baseball_df.Team == 'NYY') & (baseball_df.Year.between(1962,2012))][['Team', 'League', 'Year', 'RS', 'RA', 'W', 'G', 'Playoffs']]run_diffs = []\n\n# Loop over the DataFrame and calculate each row's run differential\nfor row in yankees_df.itertuples():\n    \n    runs_scored = row.RS\n    runs_allowed = row.RArun_diffs = []\n\n# Loop over the DataFrame and calculate each row's run differential\nfor row in yankees_df.itertuples():\n    \n    runs_scored = row.RS\n    runs_allowed = row.RA\n\n    run_diff = calc_run_diff(runs_scored, runs_allowed)\n    \n    run_diffs.append(run_diff)run_diffs = []\n\n# Loop over the DataFrame and calculate each row's run differential\nfor row in yankees_df.itertuples():\n    \n    runs_scored = row.RS\n    runs_allowed = row.RA\n\n    run_diff = calc_run_diff(runs_scored, runs_allowed)\n    \n    run_diffs.append(run_diff)\n\n# Append new column\nyankees_df['RD'] = run_diffs\nprint(yankees_df)##      Team League  Year   RS   RA    W    G  Playoffs   RD\n## 18    NYY     AL  2012  804  668   95  162         1  136\n## 48    NYY     AL  2011  867  657   97  162         1  210\n## 78    NYY     AL  2010  859  693   95  162         1  166\n## 108   NYY     AL  2009  915  753  103  162         1  162\n## 138   NYY     AL  2008  789  727   89  162         0   62\n## 168   NYY     AL  2007  968  777   94  162         1  191\n## 198   NYY     AL  2006  930  767   97  162         1  163\n## 228   NYY     AL  2005  886  789   95  162         1   97\n## 259   NYY     AL  2004  897  808  101  162         1   89\n## 289   NYY     AL  2003  877  716  101  163         1  161\n## 319   NYY     AL  2002  897  697  103  161         1  200\n## 349   NYY     AL  2001  804  713   95  161         1   91\n## 379   NYY     AL  2000  871  814   87  161         1   57\n## 409   NYY     AL  1999  900  731   98  162         1  169\n## 439   NYY     AL  1998  965  656  114  162         1  309\n## 468   NYY     AL  1997  891  688   96  162         1  203\n## 496   NYY     AL  1996  871  787   92  162         1   84\n## 524   NYY     AL  1993  821  761   88  162         0   60\n## 550   NYY     AL  1992  733  746   76  162         0  -13\n## 576   NYY     AL  1991  674  777   71  162         0 -103\n## 602   NYY     AL  1990  603  749   67  162         0 -146\n## 628   NYY     AL  1989  698  792   74  161         0  -94\n## 654   NYY     AL  1988  772  748   85  161         0   24\n## 680   NYY     AL  1987  788  758   89  162         0   30\n## 706   NYY     AL  1986  797  738   90  162         0   59\n## 732   NYY     AL  1985  839  660   97  161         0  179\n## 758   NYY     AL  1984  758  679   87  162         0   79\n## 784   NYY     AL  1983  770  703   91  162         0   67\n## 810   NYY     AL  1982  709  716   79  162         0   -7\n## 836   NYY     AL  1980  820  662  103  162         1  158\n## 862   NYY     AL  1979  734  672   89  160         0   62\n## 888   NYY     AL  1978  735  582  100  163         1  153\n## 914   NYY     AL  1977  831  651  100  162         1  180\n## 940   NYY     AL  1976  730  575   97  159         1  155\n## 964   NYY     AL  1975  681  588   83  160         0   93\n## 988   NYY     AL  1974  671  623   89  162         0   48\n## 1012  NYY     AL  1973  641  610   80  162         0   31\n## 1036  NYY     AL  1971  648  641   81  162         0    7\n## 1060  NYY     AL  1970  680  612   93  163         0   68\n## 1083  NYY     AL  1969  562  587   80  162         0  -25\n## 1105  NYY     AL  1968  536  531   83  164         0    5\n## 1126  NYY     AL  1967  522  621   72  163         0  -99\n## 1146  NYY     AL  1966  611  612   70  160         0   -1\n## 1166  NYY     AL  1965  611  604   77  162         0    7\n## 1186  NYY     AL  1964  730  577   99  164         1  153\n## 1206  NYY     AL  1963  714  547  104  161         1  167\n## 1226  NYY     AL  1962  817  680   96  162         1  137"},{"path":"writing-efficient-python-code.html","id":"pandas-alternative-to-looping","chapter":"Writing Efficient Python Code","heading":"pandas alternative to looping","text":"","code":""},{"path":"writing-efficient-python-code.html","id":"analyzing-baseball-stats-with-.apply","chapter":"Writing Efficient Python Code","heading":"Analyzing baseball stats with .apply()","text":"\nTampa Bay Rays want analyze data.\n\n’d like following metrics:\n\nsum column data\n\ntotal amount runs scored year (‘RS’ + ‘RA’ year)\n\n‘Playoffs’ column text format rather using 1’s 0’s\n\nfunction can used convert ‘Playoffs’ column text:\n\nUse .apply() get metrics. DataFrame (rays_df) loaded printed console. DataFrame indexed ‘Year’ column.\n\nApply sum() column rays_df collect sum column. sure specify correct axis.\n\nApply sum() row rays_df, looking ‘RS’ ‘RA’ columns, specify correct axis.\n\nUse .apply() lambda function apply text_playoffs() row‘s ’Playoffs’ value rays_df DataFrame.\n\nGreat work! .apply() method let’s apply functions rows columns DataFrame specifying axis.’ve using pandas time, may noticed better way find stats use pandas built-.sum() method. used rays_df.sum(axis=0) get columnar sums rays_df[[‘RS’, ‘RA’]].sum(axis=1) get row sums. also used .apply() directly Series (column) DataFrame. example, use rays_df[‘Playoffs’].apply(text_playoffs) convert ‘Playoffs’ column text.\n","code":"def text_playoffs(num_playoffs): \n    if num_playoffs == 1:\n        return 'Yes'\n    else:\n        return 'No' \n# edited/added\ndef text_playoffs(num_playoffs): \n    if num_playoffs == 1:\n        return 'Yes'\n    else:\n        return 'No' \n\nrays_df = baseball_df[baseball_df.Team == 'TBR'][['Year', 'RS', 'RA', 'W', 'Playoffs']].set_index('Year')\nrays_df.index.names = [None]\n\n# Gather sum of all columns\nstat_totals = rays_df.apply(sum, axis=0)\nprint(stat_totals)## RS          3783\n## RA          3265\n## W            458\n## Playoffs       3\n## dtype: int64# Gather total runs scored in all games per year\ntotal_runs_scored = rays_df[['RS', 'RA']].apply(sum, axis=1)\nprint(total_runs_scored)## 2012    1274\n## 2011    1321\n## 2010    1451\n## 2009    1557\n## 2008    1445\n## dtype: int64# Convert numeric playoffs to text by applying text_playoffs()\ntextual_playoffs = rays_df.apply(lambda row: text_playoffs(row['Playoffs']), axis=1)\nprint(textual_playoffs)## 2012     No\n## 2011    Yes\n## 2010    Yes\n## 2009     No\n## 2008    Yes\n## dtype: object"},{"path":"writing-efficient-python-code.html","id":"settle-a-debate-with-.apply","chapter":"Writing Efficient Python Code","heading":"Settle a debate with .apply()","text":"\nWord gotten Arizona Diamondbacks awesome analytics skills. ’d like help settle debate amongst managers. One manager claims team made playoffs every year win percentage 0.50 greater. Another manager says true.\n\nLet’s use function .apply() method see manager correct.\n\nDataFrame named dbacks_df loaded session.\n\nPrint first five rows dbacks_df DataFrame see data looks like.\n\nCreate pandas Series called win_percs applying calc_win_perc() function row DataFrame lambda function.\n\nCreate new column dbacks_df called WP contains win percentages calculated step.\n\nmanager correct claim?\nmanager claimed team made playoffs every year ’ve win percentage 0.50 greater.manager claimed team made playoffs every year ’ve win percentage 0.50 greater.managers crazy! Arizona Diamondbacks never made playoffs.\nNicely done! Using .apply() method lambda function allows apply function DataFrame without need write loop.Sadly, second manager correct. year 2012, 2008, 2003, 2000 Arizona Diamondbacks win percentage greater equal 0.50, still make playoffs.\n","code":"def calc_win_perc(wins, games_played):\n    win_perc = wins / games_played\n    return np.round(win_perc,2)\n# edited/added\ndef calc_win_perc(wins, games_played):\n    win_perc = wins / games_played\n    return np.round(win_perc,2)\n  \ndbacks_df = baseball_df[(baseball_df.Team == 'ARI') & (baseball_df.Year.between(1998,2012))][['Team', 'League', 'Year', 'RS', 'RA', 'W', 'G', 'Playoffs']]# Display the first five rows of the DataFrame\nprint(dbacks_df.head())##     Team League  Year   RS   RA   W    G  Playoffs\n## 0    ARI     NL  2012  734  688  81  162         0\n## 30   ARI     NL  2011  731  662  94  162         1\n## 60   ARI     NL  2010  713  836  65  162         0\n## 90   ARI     NL  2009  720  782  70  162         0\n## 120  ARI     NL  2008  720  706  82  162         0# Display the first five rows of the DataFrame\nprint(dbacks_df.head())##     Team League  Year   RS   RA   W    G  Playoffs\n## 0    ARI     NL  2012  734  688  81  162         0\n## 30   ARI     NL  2011  731  662  94  162         1\n## 60   ARI     NL  2010  713  836  65  162         0\n## 90   ARI     NL  2009  720  782  70  162         0\n## 120  ARI     NL  2008  720  706  82  162         0# Create a win percentage Series \nwin_percs = dbacks_df.apply(lambda row: calc_win_perc(row['W'], row['G']), axis=1)\nprint(win_percs, '\\n')## 0      0.50\n## 30     0.58\n## 60     0.40\n## 90     0.43\n## 120    0.51\n## 150    0.56\n## 180    0.47\n## 210    0.48\n## 241    0.31\n## 271    0.52\n## 301    0.60\n## 331    0.57\n## 361    0.52\n## 391    0.62\n## 421    0.40\n## dtype: float64# Display the first five rows of the DataFrame\nprint(dbacks_df.head())##     Team League  Year   RS   RA   W    G  Playoffs\n## 0    ARI     NL  2012  734  688  81  162         0\n## 30   ARI     NL  2011  731  662  94  162         1\n## 60   ARI     NL  2010  713  836  65  162         0\n## 90   ARI     NL  2009  720  782  70  162         0\n## 120  ARI     NL  2008  720  706  82  162         0# Create a win percentage Series \nwin_percs = dbacks_df.apply(lambda row: calc_win_perc(row['W'], row['G']), axis=1)\nprint(win_percs, '\\n')## 0      0.50\n## 30     0.58\n## 60     0.40\n## 90     0.43\n## 120    0.51\n## 150    0.56\n## 180    0.47\n## 210    0.48\n## 241    0.31\n## 271    0.52\n## 301    0.60\n## 331    0.57\n## 361    0.52\n## 391    0.62\n## 421    0.40\n## dtype: float64# Append a new column to dbacks_df\ndbacks_df['WP'] = win_percs\nprint(dbacks_df, '\\n')##     Team League  Year   RS   RA    W    G  Playoffs    WP\n## 0    ARI     NL  2012  734  688   81  162         0  0.50\n## 30   ARI     NL  2011  731  662   94  162         1  0.58\n## 60   ARI     NL  2010  713  836   65  162         0  0.40\n## 90   ARI     NL  2009  720  782   70  162         0  0.43\n## 120  ARI     NL  2008  720  706   82  162         0  0.51\n## 150  ARI     NL  2007  712  732   90  162         1  0.56\n## 180  ARI     NL  2006  773  788   76  162         0  0.47\n## 210  ARI     NL  2005  696  856   77  162         0  0.48\n## 241  ARI     NL  2004  615  899   51  162         0  0.31\n## 271  ARI     NL  2003  717  685   84  162         0  0.52\n## 301  ARI     NL  2002  819  674   98  162         1  0.60\n## 331  ARI     NL  2001  818  677   92  162         1  0.57\n## 361  ARI     NL  2000  792  754   85  162         0  0.52\n## 391  ARI     NL  1999  908  676  100  162         1  0.62\n## 421  ARI     NL  1998  665  812   65  162         0  0.40# Display dbacks_df where WP is greater than 0.50\nprint(dbacks_df[dbacks_df['WP'] >= 0.50])##     Team League  Year   RS   RA    W    G  Playoffs    WP\n## 0    ARI     NL  2012  734  688   81  162         0  0.50\n## 30   ARI     NL  2011  731  662   94  162         1  0.58\n## 120  ARI     NL  2008  720  706   82  162         0  0.51\n## 150  ARI     NL  2007  712  732   90  162         1  0.56\n## 271  ARI     NL  2003  717  685   84  162         0  0.52\n## 301  ARI     NL  2002  819  674   98  162         1  0.60\n## 331  ARI     NL  2001  818  677   92  162         1  0.57\n## 361  ARI     NL  2000  792  754   85  162         0  0.52\n## 391  ARI     NL  1999  908  676  100  162         1  0.62"},{"path":"writing-efficient-python-code.html","id":"optimal-pandas-iterating","chapter":"Writing Efficient Python Code","heading":"Optimal pandas iterating","text":"","code":""},{"path":"writing-efficient-python-code.html","id":"replacing-.iloc-with-underlying-arrays","chapter":"Writing Efficient Python Code","heading":"Replacing .iloc with underlying arrays","text":"\nNow better grasp DataFrame’s internals let’s update one previous analyses leverage DataFrame’s underlying arrays. ’ll revisit win percentage calculations performed row row .iloc method:\n\nLet’s update analysis use arrays instead .iloc method. DataFrame (baseball_df) loaded session.\n\nUse right method collect underlying ‘W’ ‘G’ arrays baseball_df pass directly calc_win_perc() function. Store result variable called win_percs_np.\n\nCreate new column baseball_df called ‘WP’ contains win percentages just calculated.\n\nUse timeit cell magic mode within IPython console compare runtimes old code block using .iloc new code developed using NumPy arrays.\n\nDon’t include code defines calc_win_perc() function print() statements timing.\n\ninclude eight lines code timing old code block two lines code timing new code developed. may need press SHIFT+ENTER using timeit cell magic mode get new line within IPython console.\n\napproach faster?\noriginal code .iloc much faster using NumPy arraysThe old code block .iloc new code NumPy arrays similar runtimes.NumPy array approach faster .iloc approach.\nGreat job! ’re knocking park! Using DataFrame’s underlying arrays perform calculations can really speed code yields significant efficiency gains. notice NumPy array approach just faster, also used fewer lines code easier read?\n","code":"def calc_win_perc(wins, games_played):\n    win_perc = wins / games_played\n    return np.round(win_perc,2)\n\nwin_percs_list = []\n\nfor i in range(len(baseball_df)):\n    row = baseball_df.iloc[i]\n\n    wins = row['W']\n    games_played = row['G']\n\n    win_perc = calc_win_perc(wins, games_played)\n\n    win_percs_list.append(win_perc)\n\nbaseball_df['WP'] = win_percs_list\n# Use the W array and G array to calculate win percentages\nwin_percs_np = calc_win_perc(baseball_df['W'].values, baseball_df['G'].values)# Use the W array and G array to calculate win percentages\nwin_percs_np = calc_win_perc(baseball_df['W'].values, baseball_df['G'].values)\n\n# Append a new column to baseball_df that stores all win percentages\nbaseball_df['WP'] = win_percs_np\n\nprint(baseball_df.head())##   Team League  Year   RS   RA   W    OBP    SLG     BA  Playoffs  RankSeason  RankPlayoffs    G   OOBP   OSLG    WP\n## 0  ARI     NL  2012  734  688  81  0.328  0.418  0.259         0         NaN           NaN  162  0.317  0.415  0.50\n## 1  ATL     NL  2012  700  600  94  0.320  0.389  0.247         1         4.0           5.0  162  0.306  0.378  0.58\n## 2  BAL     AL  2012  712  705  93  0.311  0.417  0.247         1         5.0           4.0  162  0.315  0.403  0.57\n## 3  BOS     AL  2012  734  806  69  0.315  0.415  0.260         0         NaN           NaN  162  0.331  0.428  0.43\n## 4  CHC     NL  2012  613  759  61  0.302  0.378  0.240         0         NaN           NaN  162  0.335  0.424  0.38"},{"path":"writing-efficient-python-code.html","id":"bringing-it-all-together-predict-win-percentage","chapter":"Writing Efficient Python Code","heading":"Bringing it all together: Predict win percentage","text":"\npandas DataFrame (baseball_df) loaded session. convenience, dictionary describing column within baseball_df printed console. can reference descriptions throughout exercise.\n\n’d like attempt predict team’s win percentage given season using team’s total runs scored season (‘RS’) total runs allowed season (‘RA’) following function:\n\nLet’s compare approaches ’ve learned calculate predicted win percentage season (row) DataFrame.\n\nUse loop .itertuples() predict win percentage row baseball_df predict_win_perc() function. Save row’s predicted win percentage win_perc_pred append win_perc_preds_loop list.\n\nApply predict_win_perc() row baseball_df DataFrame using lambda function. Save predicted win percentage win_perc_preds_apply.\n\nCalculate predicted win percentages passing underlying ‘RS’ ‘RA’ arrays baseball_df predict_win_perc(). Save predictions win_perc_preds_np.\n\nCompare runtimes within IPython console three approaches used calculate predicted win percentages.\n\nUse %%timeit (cell magic mode) time six lines code (including comment lines) .itertuples() approach. may need press SHIFT+ENTER entering %%timeit get new line within IPython console.\n\nUse %timeit (line magic mode) time .apply() approach NumPy array approach separately. one line code (including comment lines).\n\norder approaches fastest slowest?\n.apply() lambda function fastest, followed .itertuples() approach, array approach slowest.Using NumPy arrays fastest approach, followed .itertuples() approach, .apply() approach slowest..itertuples() approach fastest, followed array approach, .apply() approach slowest.three approaches comparable runtimes.\nGreat job! ’s home run! practiced using three different approaches iterate pandas DataFrame perform calculations. notice .itertuples() approach beat .apply() approach? Even though implementations can useful, default using DataFrame’s underlying arrays perform calculations.Take look win percentage predictions (column ‘WP_preds’) compare actual win percentages (column ‘WP’). bad!’ve done great job throughout course! Now, well way writing efficient Python pandas code!\n","code":"def predict_win_perc(RS, RA):\n    prediction = RS ** 2 / (RS ** 2 + RA ** 2)\n    return np.round(prediction, 2)\n# edited/added\ndef predict_win_perc(RS, RA):\n    prediction = RS ** 2 / (RS ** 2 + RA ** 2)\n    return np.round(prediction, 2)win_perc_preds_loop = []\n\n# Use a loop and .itertuples() to collect each row's predicted win percentage\nfor row in baseball_df.itertuples():\n    runs_scored = row.RS\n    runs_allowed = row.RA\n    win_perc_pred = predict_win_perc(runs_scored, runs_allowed)\n    win_perc_preds_loop.append(win_perc_pred)win_perc_preds_loop = []\n\n# Use a loop and .itertuples() to collect each row's predicted win percentage\nfor row in baseball_df.itertuples():\n    runs_scored = row.RS\n    runs_allowed = row.RA\n    win_perc_pred = predict_win_perc(runs_scored, runs_allowed)\n    win_perc_preds_loop.append(win_perc_pred)\n\n# Apply predict_win_perc to each row of the DataFrame\nwin_perc_preds_apply = baseball_df.apply(lambda row: predict_win_perc(row['RS'], row['RA']), axis=1)win_perc_preds_loop = []\n\n# Use a loop and .itertuples() to collect each row's predicted win percentage\nfor row in baseball_df.itertuples():\n    runs_scored = row.RS\n    runs_allowed = row.RA\n    win_perc_pred = predict_win_perc(runs_scored, runs_allowed)\n    win_perc_preds_loop.append(win_perc_pred)\n\n# Apply predict_win_perc to each row of the DataFrame\nwin_perc_preds_apply = baseball_df.apply(lambda row: predict_win_perc(row['RS'], row['RA']), axis=1)\n\n# Calculate the win percentage predictions using NumPy arrays\nwin_perc_preds_np = predict_win_perc(baseball_df['RS'].values, baseball_df['RA'].values)\nbaseball_df['WP_preds'] = win_perc_preds_np\nprint(baseball_df.head())##   Team League  Year   RS   RA   W    OBP    SLG     BA  Playoffs  RankSeason  RankPlayoffs    G   OOBP   OSLG    WP  WP_preds\n## 0  ARI     NL  2012  734  688  81  0.328  0.418  0.259         0         NaN           NaN  162  0.317  0.415  0.50      0.53\n## 1  ATL     NL  2012  700  600  94  0.320  0.389  0.247         1         4.0           5.0  162  0.306  0.378  0.58      0.58\n## 2  BAL     AL  2012  712  705  93  0.311  0.417  0.247         1         5.0           4.0  162  0.315  0.403  0.57      0.50\n## 3  BOS     AL  2012  734  806  69  0.315  0.415  0.260         0         NaN           NaN  162  0.331  0.428  0.43      0.45\n## 4  CHC     NL  2012  613  759  61  0.302  0.378  0.240         0         NaN           NaN  162  0.335  0.424  0.38      0.39"},{"path":"writing-efficient-python-code.html","id":"congratulations-3","chapter":"Writing Efficient Python Code","heading":"Congratulations!","text":"","code":""},{"path":"writing-efficient-python-code.html","id":"congratulations-4","chapter":"Writing Efficient Python Code","heading":"Congratulations!","text":"Congratulations completing course! Now, necessary tools start writing efficient Python code!","code":""},{"path":"writing-efficient-python-code.html","id":"what-you-have-learned","chapter":"Writing Efficient Python Code","heading":"What you have learned","text":"four chapters course, learned writing efficient code truly means, writing Pythonic code often yields efficient code. ’ve explored Python’s Standard Library practiced using built-functions like range, enumerate, map. know power NumPy arrays can use fast, efficient calculations. ’re whiz using magic commands like %timeit know profile code line_profiler memory_profiler packages. ’ve also applied advanced techniques gain efficiencies using built-functions like zip, built-modules like itertools collections, branch mathematics called set theory. Finally, explored looping patterns Python always efficient approach solving problems. successfully eliminated loops code even learned efficiently iterate pandas DataFrames.","code":""},{"path":"writing-efficient-python-code.html","id":"well-done","chapter":"Writing Efficient Python Code","heading":"Well done!","text":"Well done! absolute pleasure working ! Thank taking course, hope see future!","code":""},{"path":"writing-functions-in-python.html","id":"writing-functions-in-python","chapter":"Writing Functions in Python","heading":"Writing Functions in Python","text":"Shayne Miel\nShayne Miel building web-scale machine learning applications since 2006. Cycling leadership roles (Tech Lead, Director, VP) individual contributor roles several large EdTech companies, honed skills data science engineering. days can find standing desk architecting microservice solutions, training deep learning models, building visualization tools ensure teammates’ models performing desired. evenings stops pretending business professional follows true nature: playing board games building pillow forts kids. Follow Twitter: 1\nCourse Description\n’ve done analysis, built report, trained model. ’s next? Well, want deploy model production, code need reliable exploratory scripts Jupyter notebook. Writing Functions Python give strong foundation writing complex beautiful functions can contribute research engineering skills team. ’ll learn useful tricks, like write context managers decorators. ’ll also learn best practices around write maintainable reusable functions good documentation. say people can good research write high-quality code unicorns. Take course discover magic!\n","code":""},{"path":"writing-functions-in-python.html","id":"best-practices","chapter":"Writing Functions in Python","heading":"Best Practices","text":"\ngoal course transform Python expert, first chapter starts best practices writing functions. ’ll cover docstrings matter know need turn chunk code function. also learn details Python passes arguments functions, well common gotchas can cause debugging headaches calling functions.\n","code":""},{"path":"writing-functions-in-python.html","id":"docstrings","chapter":"Writing Functions in Python","heading":"Docstrings","text":"","code":""},{"path":"writing-functions-in-python.html","id":"crafting-a-docstring","chapter":"Writing Functions in Python","heading":"Crafting a docstring","text":"\n’ve decided write world’s greatest open-source natural language processing Python package. revolutionize working free-form text, way numpy arrays, pandas tabular data, scikit-learn machine learning.\n\nfirst function write count_letter(). takes string single letter returns number times letter appears string. want users open-source package able understand function works easily, need give docstring. Build Google Style docstring function following steps.\n\nCopy following string add docstring function: Count number times letter appears content.\n\nNow add arguments section, using Google style docstrings. Use str indicate string.\n\nAdd returns section informs user return value int.\n\nFinally, add information ValueError gets raised arguments aren’t correct.\n\ndelightful docstring! require bit typing, information presented make easy others use code future. Remember even though computers execute , code actually written humans read (otherwise ’d just writing 1s 0s computer operates ).\n","code":"def count_letter(content, letter):\n  \"\"\"Count the number of times `letter` appears in `content`.\n\n  Args:\n    content (str): The string to search.\n    letter (str): The letter to search for.\n\n  Returns:\n    int\n\n  # Add a section detailing what errors might be raised\n  Raises:\n    ValueError: If `letter` is not a one-character string.\n  \"\"\"\n  if (not isinstance(letter, str)) or len(letter) != 1:\n    raise ValueError('`letter` must be a single character string.')\n  return len([char for char in content if char == letter])"},{"path":"writing-functions-in-python.html","id":"retrieving-docstrings","chapter":"Writing Functions in Python","heading":"Retrieving docstrings","text":"\ngroup friends working building amazing new Python IDE (integrated development environment – like PyCharm, Spyder, Eclipse, Visual Studio, etc.). team wants add feature displays tooltip function’s docstring whenever user starts typing function name. way, user doesn’t go elsewhere look documentation function trying use. ’ve asked complete build_tooltip() function retrieves docstring arbitrary function.\n\nreusing count_letter() function developed last exercise show can properly extract docstring.\n\nBegin getting docstring function count_letter(). Use attribute count_letter() function.\n\nNow use function inspect module get better-formatted version count_letter()’s docstring.\n\nNow create build_tooltip() function can extract docstring function pass .\n\nIDE going incredibly delightful experience users now! Notice count_letter.__doc__ version docstring strange whitespace beginning first line. ’s docstring indented line visually reading code. want print docstring, removing leading spaces inspect.getdoc() look much better.\n","code":"# Get the \"count_letter\" docstring by using an attribute of the function\ndocstring = count_letter.__doc__\n\nborder = '#' * 28\nprint('{}\\n{}\\n{}'.format(border, docstring, border))## ############################\n## Count the number of times `letter` appears in `content`.\n## \n##   Args:\n##     content (str): The string to search.\n##     letter (str): The letter to search for.\n## \n##   Returns:\n##     int\n## \n##   # Add a section detailing what errors might be raised\n##   Raises:\n##     ValueError: If `letter` is not a one-character string.\n##   \n## ############################import inspect\n\n# Inspect the count_letter() function to get its docstring\ndocstring = inspect.getdoc(count_letter)\n\nborder = '#' * 28\nprint('{}\\n{}\\n{}'.format(border, docstring, border))## ############################\n## Count the number of times `letter` appears in `content`.\n## \n## Args:\n##   content (str): The string to search.\n##   letter (str): The letter to search for.\n## \n## Returns:\n##   int\n## \n## # Add a section detailing what errors might be raised\n## Raises:\n##   ValueError: If `letter` is not a one-character string.\n## ############################import inspect\n\ndef build_tooltip(function):\n  \"\"\"Create a tooltip for any function that shows the\n  function's docstring.\n\n  Args:\n    function (callable): The function we want a tooltip for.\n\n  Returns:\n    str\n  \"\"\"\n  # Get the docstring for the \"function\" argument by using inspect\n  docstring = inspect.getdoc(function)\n  border = '#' * 28\n  return '{}\\n{}\\n{}'.format(border, docstring, border)\n\nprint(build_tooltip(count_letter))## ############################\n## Count the number of times `letter` appears in `content`.\n## \n## Args:\n##   content (str): The string to search.\n##   letter (str): The letter to search for.\n## \n## Returns:\n##   int\n## \n## # Add a section detailing what errors might be raised\n## Raises:\n##   ValueError: If `letter` is not a one-character string.\n## ############################print(build_tooltip(range))## ############################\n## range(stop) -> range object\n## range(start, stop[, step]) -> range object\n## \n## Return an object that produces a sequence of integers from start (inclusive)\n## to stop (exclusive) by step.  range(i, j) produces i, i+1, i+2, ..., j-1.\n## start defaults to 0, and stop is omitted!  range(4) produces 0, 1, 2, 3.\n## These are exactly the valid indices for a list of 4 elements.\n## When step is given, it specifies the increment (or decrement).\n## ############################print(build_tooltip(print))## ############################\n## print(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False)\n## \n## Prints the values to a stream, or to sys.stdout by default.\n## Optional keyword arguments:\n## file:  a file-like object (stream); defaults to the current sys.stdout.\n## sep:   string inserted between values, default a space.\n## end:   string appended after the last value, default a newline.\n## flush: whether to forcibly flush the stream.\n## ############################"},{"path":"writing-functions-in-python.html","id":"docstrings-to-the-rescue","chapter":"Writing Functions in Python","heading":"Docstrings to the rescue!","text":"\nmaniac corrupted installation numpy! functions still exist, ’ve given random names. desperately need call numpy.histogram() function don’t time reinstall package. Fortunately , maniac didn’t think alter docstrings, know access . numpy lot functions , ’ve narrowed four possible functions numpy.histogram() disguise: numpy.leyud(), numpy.uqka(), numpy.fywdkxa() numpy.jinzyxq().\n\nExamine functions’ docstrings IPython shell determine actually numpy.histogram().\nnumpy.leyud()numpy.uqka()numpy.fywdkxa()numpy.jinzyxq()\nfound ! numpy.fywdkxa() actually numpy.histogram() disguise. ’ve spent time browsing numpy’s online documentation, notice built directly docstrings. wonderful tools like sphinx pydoc automatically generate online documentation based docstrings.\n","code":""},{"path":"writing-functions-in-python.html","id":"dry-and-do-one-thing","chapter":"Writing Functions in Python","heading":"DRY and \"Do One Thing\"","text":"","code":""},{"path":"writing-functions-in-python.html","id":"extract-a-function","chapter":"Writing Functions in Python","heading":"Extract a function","text":"\ndeveloping model predict likelihood student graduating college, wrote bit code get z-scores students’ yearly GPAs. Now ’re ready turn production-quality system, need something repetition. Writing function calculate z-scores improve code.\n\nNote: df pandas DataFrame row student 4 columns yearly student GPAs: y1_gpa, y2_gpa, y3_gpa, y4_gpa\n\nFinish function returns z-scores column.\n\nUse function calculate z-scores year (df[‘y1_z’], df[‘y2_z’], etc.) raw GPA scores (df.y1_gpa, df.y2_gpa, etc.).\n\n’s fantastic function! standardize() probably useful places code, now easy use, test, update need . ’s also easier tell code docstring name function.\n","code":"# Standardize the GPAs for each year\ndf['y1_z'] = (df.y1_gpa - df.y1_gpa.mean()) / df.y1_gpa.std()\ndf['y2_z'] = (df.y2_gpa - df.y2_gpa.mean()) / df.y2_gpa.std()\ndf['y3_z'] = (df.y3_gpa - df.y3_gpa.mean()) / df.y3_gpa.std()\ndf['y4_z'] = (df.y4_gpa - df.y4_gpa.mean()) / df.y4_gpa.std()\n# edited/added\nimport pandas as pd\ndf = pd.read_csv(\"datasets/Writing-Functions-in-Python/students.csv\")def standardize(column):\n  \"\"\"Standardize the values in a column.\n\n  Args:\n    column (pandas Series): The data to standardize.\n\n  Returns:\n    pandas Series: the values as z-scores\n  \"\"\"\n  # Finish the function so that it returns the z-scores\n  z_score = (column - column.mean()) / column.std()\n  return z_score\n\n# Use the standardize() function to calculate the z-scores\ndf['y1_z'] = standardize(df.y1_gpa)\ndf['y2_z'] = standardize(df.y2_gpa)\ndf['y3_z'] = standardize(df.y3_gpa)\ndf['y4_z'] = standardize(df.y4_gpa)"},{"path":"writing-functions-in-python.html","id":"split-up-a-function","chapter":"Writing Functions in Python","heading":"Split up a function","text":"\nAnother engineer team written function calculate mean median sorted list. want show split two simpler functions: mean() median()\n\nWrite mean() function.\n\nWrite median() function.\n\nperfect split! function one thing well. Using, testing, maintaining breeze (although ’ll probably just use numpy.mean() numpy.median() real life).\n","code":"def mean_and_median(values):\n  \"\"\"Get the mean and median of a sorted list of `values`\n\n  Args:\n    values (iterable of float): A list of numbers\n\n  Returns:\n    tuple (float, float): The mean and median\n  \"\"\"\n  mean = sum(values) / len(values)\n  midpoint = int(len(values) / 2)\n  if len(values) % 2 == 0:\n    median = (values[midpoint - 1] + values[midpoint]) / 2\n  else:\n    median = values[midpoint]\n\n  return mean, median\ndef mean(values):\n  \"\"\"Get the mean of a sorted list of values\n\n  Args:\n    values (iterable of float): A list of numbers\n\n  Returns:\n    float\n  \"\"\"\n  # Write the mean() function\n  mean = sum(values) / len(values)\n  return meandef median(values):\n  \"\"\"Get the median of a sorted list of values\n\n  Args:\n    values (iterable of float): A list of numbers\n\n  Returns:\n    float\n  \"\"\"\n  # Write the median() function\n  midpoint = int(len(values) / 2)\n  if len(values) % 2 == 0:\n    median = (values[midpoint - 1] + values[midpoint]) / 2\n  else:\n    median = values[midpoint]\n  return median"},{"path":"writing-functions-in-python.html","id":"pass-by-assignment","chapter":"Writing Functions in Python","heading":"Pass by assignment","text":"","code":""},{"path":"writing-functions-in-python.html","id":"mutable-or-immutable","chapter":"Writing Functions in Python","heading":"Mutable or immutable?","text":"\nfollowing function adds mapping string lowercase version string dictionary. expect values d s function called?\nd = {}, s = ‘Hello’d = {}, s = ‘hello’d = {‘Hello’: ‘hello’}, s = ‘Hello’d = {‘Hello’: ‘hello’}, s = ‘hello’d = {‘hello’: ‘hello’}, s = ‘hello’\nCorrect! Dictionaries mutable objects Python, function can directly change _dict[_orig_string] = _string statement. Strings, hand, immutable. function creates lowercase version, assign _string variable. disconnects happens _string external s variable.\n","code":"def store_lower(_dict, _string):\n  \"\"\"Add a mapping between `_string` and a lowercased version of `_string` to `_dict`\n\n  Args:\n    _dict (dict): The dictionary to update.\n    _string (str): The string to add.\n  \"\"\"\n  orig_string = _string\n  _string = _string.lower()\n  _dict[orig_string] = _string\n\nd = {}\ns = 'Hello'\n\nstore_lower(d, s)\n"},{"path":"writing-functions-in-python.html","id":"best-practice-for-default-arguments","chapter":"Writing Functions in Python","heading":"Best practice for default arguments","text":"\nOne co-workers (obviously didn’t take course) written function adding column pandas DataFrame. Unfortunately, used mutable variable default argument value! Please show better way don’t get unexpected behavior.\n\nChange default value df immutable value follow best practices.\n\nUpdate code function new DataFrame created caller didn’t pass one.\n\nBeautiful best practice! need set mutable variable default argument, always use None set value body function. prevents unexpected behavior like adding multiple columns call function .\n","code":"def add_column(values, df=pandas.DataFrame()):\n  \"\"\"Add a column of `values` to a DataFrame `df`.\n  The column will be named \"col_<n>\" where \"n\" is\n  the numerical index of the column.\n\n  Args:\n    values (iterable): The values of the new column\n    df (DataFrame, optional): The DataFrame to update.\n      If no DataFrame is passed, one is created by default.\n\n  Returns:\n    DataFrame\n  \"\"\"\n  df['col_{}'.format(len(df.columns))] = values\n  return df\n# Use an immutable variable for the default argument\ndef better_add_column(values, df=None):\n  \"\"\"Add a column of `values` to a DataFrame `df`.\n  The column will be named \"col_<n>\" where \"n\" is\n  the numerical index of the column.\n\n  Args:\n    values (iterable): The values of the new column\n    df (DataFrame, optional): The DataFrame to update.\n      If no DataFrame is passed, one is created by default.\n\n  Returns:\n    DataFrame\n  \"\"\"\n  # Update the function to create a default DataFrame\n  if df is None:\n    df = pandas.DataFrame()\n  df['col_{}'.format(len(df.columns))] = values\n  return df"},{"path":"writing-functions-in-python.html","id":"context-managers","chapter":"Writing Functions in Python","heading":"Context Managers","text":"\n’ve ever seen “” keyword Python wondered deal , chapter ! Context managers convenient way provide connections Python guarantee connections get cleaned done using . chapter show use context managers, well write .\n","code":""},{"path":"writing-functions-in-python.html","id":"using-context-managers","chapter":"Writing Functions in Python","heading":"Using context managers","text":"","code":""},{"path":"writing-functions-in-python.html","id":"the-number-of-cats","chapter":"Writing Functions in Python","heading":"The number of cats","text":"\nworking natural language processing project determine makes great writers great. current hypothesis great writers talk cats lot. prove , want count number times word “cat” appears “Alice’s Adventures Wonderland” Lewis Carroll. already downloaded text file, alice.txt, entire contents great book.\n\nUse open() context manager open alice.txt assign file file variable.\n\nCool cat counting! opening file using open() statement, able read text file. importantly, done reading text, context manager closed file .\n","code":"# Open \"alice.txt\" and assign the file to \"file\"\nwith open('datasets/Writing-Functions-in-Python/alice.txt') as file:\n  text = file.read()\n\nn = 0\nfor word in text.split():\n  if word.lower() in ['cat', 'cats']:\n    n += 1\n\nprint('Lewis Carroll uses the word \"cat\" {} times'.format(n))## Lewis Carroll uses the word \"cat\" 24 times"},{"path":"writing-functions-in-python.html","id":"the-speed-of-cats","chapter":"Writing Functions in Python","heading":"The speed of cats","text":"\n’re working new web service processes Instagram feeds identify pictures contain cats (don’t ask – ’s internet). code processes data slower like , working tuning run faster. Given image, image, two functions can process :\n\nprocess_with_numpy(image)\n\nprocess_with_pytorch(image)\n\ncolleague wrote context manager, timer(), print long code inside context block takes run. suggesting use see two options faster. Time function determine one use web service.\n\nUse timer() context manager time long process_with_numpy(image) takes run.\n\nUse timer() context manager time long process_with_pytorch(image) takes run.\n\nTerrific timing! Now know pytorch version faster, can use web service ensure users get rapid response time expect.  may noticed <variable name> end statement timer() context manager. timer() context manager return value, <variable name> end statement isn’t necessary. next lesson, ’ll learn write context managers like timer().\n","code":"# edited/added\nimport numpy as np\nimport time\nimport contextlib\ndef get_image_from_instagram():\n  return np.random.rand(84, 84)\ndef _process_pic(n_sec):\n  print('Processing', end='', flush=True)\n  for i in range(10):\n    print('.', end='' if i < 9 else 'done!\\n', flush=True)\n    time.sleep(n_sec)\ndef process_with_pytorch(p):\n  _process_pic(0.0328)\ndef process_with_numpy(p):\n  _process_pic(0.1521)\n@contextlib.contextmanager\ndef timer():\n  \"\"\"Time how long code in the context block takes to run.\"\"\"\n  t0 = time.time()\n  try:\n      yield\n  except:\n    raise\n  finally:\n    t1 = time.time()\n    print('Elapsed: {:.2f} seconds'.format(t1 - t0))\n    \nimage = get_image_from_instagram()\n\n# Time how long process_with_numpy(image) takes to run\nwith timer():\n  print('Numpy version')\n  process_with_numpy(image)## Numpy version\n## Processing..........done!\n## Elapsed: 1.56 seconds# Time how long process_with_pytorch(image) takes to run\nwith timer():\n  print('Pytorch version')\n  process_with_pytorch(image)## Pytorch version\n## Processing..........done!\n## Elapsed: 0.36 seconds"},{"path":"writing-functions-in-python.html","id":"writing-context-managers","chapter":"Writing Functions in Python","heading":"Writing context managers","text":"","code":""},{"path":"writing-functions-in-python.html","id":"the-timer-context-manager","chapter":"Writing Functions in Python","heading":"The timer() context manager","text":"\ncolleague working web service processes Instagram photos. Customers complaining service takes long identify whether image cat , colleague come help. decide write context manager can use time long functions take run.\n\nAdd decorator contextlib module timer() function make act like context manager.\n\nSend control timer() function context block.\n\n’re managing context like boss! colleague can now use timer() context manager figure functions running slow. Notice three elements context manager : function definition, yield statement, 2 decorator. ’s also worth noticing timer() context manager return explicit value, yield written without specifying anything return.\n","code":"# Add a decorator that will make timer() a context manager\n@contextlib.contextmanager\ndef timer():\n  \"\"\"Time the execution of a context block.\n\n  Yields:\n    None\n  \"\"\"\n  start = time.time()\n  # Send control back to the context block\n  yield\n  end = time.time()\n  print('Elapsed: {:.2f}s'.format(end - start))\n\nwith timer():\n  print('This should take approximately 0.25 seconds')\n  time.sleep(0.25)## This should take approximately 0.25 seconds\n## Elapsed: 0.26s"},{"path":"writing-functions-in-python.html","id":"a-read-only-open-context-manager","chapter":"Writing Functions in Python","heading":"A read-only open() context manager","text":"\nbunch data files next deep learning project took months collect clean. terrible accidentally overwrote one files trying read training, decide create read-version open() context manager use project.\n\nregular open() context manager:\n\ntakes filename mode (‘r’ read, ‘w’ write, ‘’ append)\n\nopens file reading, writing, appending\n\nyields control back context, along reference file\n\nwaits context finish\n\ncloses file exiting\n\ncontext manager thing, except take filename argument open file reading.\n\nYield control open_read_only() context block, ensuring read_only_file object gets assigned my_file.\n\nUse read_only_file’s .close() method ensure don’t leave open files lying around.\n\nradical read-context manager! Now can relax, knowing every time use open_read_only() files safe accidentally overwritten. function example context manager return value, write yield read_only_file instead just yield. read_only_file object gets assigned my_file statement whoever using context can call .read() method context block.\n","code":"@contextlib.contextmanager\ndef open_read_only(filename):\n  \"\"\"Open a file in read-only mode.\n\n  Args:\n    filename (str): The location of the file to read\n\n  Yields:\n    file object\n  \"\"\"\n  read_only_file = open(filename, mode='r')\n  # Yield read_only_file so it can be assigned to my_file\n  yield read_only_file\n  # Close read_only_file\n  read_only_file.close()\n\nwith open_read_only('datasets/Writing-Functions-in-Python/my_file.txt') as my_file:\n  print(my_file.read())##     Congratulations! You wrote a context manager that acts like \"open()\" but operates in read-only mode!"},{"path":"writing-functions-in-python.html","id":"advanced-topics","chapter":"Writing Functions in Python","heading":"Advanced topics","text":"","code":""},{"path":"writing-functions-in-python.html","id":"context-manager-use-cases","chapter":"Writing Functions in Python","heading":"Context manager use cases","text":"\nfollowing good opportunity use context manager?\nfunction starts timer keeps track long block code takes run.function prints prime numbers 2 value n.function connects smart thermostat can programmed remotely.function prevents multiple users updating online spreadsheet time locking access spreadsheet every operation.\nCorrect! might able context manager, make much sense just normal function.\n","code":""},{"path":"writing-functions-in-python.html","id":"scraping-the-nasdaq","chapter":"Writing Functions in Python","heading":"Scraping the NASDAQ","text":"\nTraining deep neural nets expensive! might well invest NVIDIA stock since ’re spending much GPUs. pick best time invest, going collect analyze data stock . context manager stock(‘NVDA’) connect NASDAQ return object can use get latest price calling .price() method.\n\nwant connect stock(‘NVDA’) record 10 timesteps price data writing file NVDA.txt.\n\nnotice use underscore iterating loop. confusing , don’t worry. easily replaced , planned something , like use index. Since won’t using , can use dummy operator, _, doesn’t use additional memory.\n\nUse stock(‘NVDA’) context manager assign result nvda.\n\nOpen file writing open(‘NVDA.txt’, ‘w’) assign file object f_out can record price time.\n\nSuper stock scraping! Now can monitor NVIDIA stock price decide exact right time buy. Nesting context managers like allows connect stock market (CONNECT/DISCONNECT pattern) write file (OPEN/CLOSE pattern) time.\n","code":"# edited/added\nclass MockStock:\n    def __init__(self, loc, scale):\n        self.loc = loc\n        self.scale = scale\n        self.recent = list(np.random.laplace(loc, scale, 2))\n    def price(self):\n        sign = np.sign(self.recent[1] - self.recent[0])\n        # 70% chance of going same direction\n        sign = 1 if sign == 0 else (sign if np.random.rand() > 0.3 else -1 * sign)\n        new = self.recent[1] + sign * np.random.rand() / 10.0\n        self.recent = [self.recent[1], new]\n        return new\n@contextlib.contextmanager\ndef stock(symbol):\n    base = 140.00\n    scale = 1.0\n    mock = MockStock(base, scale)\n    print('Opening stock ticker for {}'.format(symbol))\n    yield mock\n    print('Closing stock ticker')\n    \n# Use the \"stock('NVDA')\" context manager\n# and assign the result to the variable \"nvda\"\nwith stock('outputs/NVDA') as nvda:\n  # Open 'NVDA.txt' for writing as f_out\n  with open('datasets/Writing-Functions-in-Python/NVDA.txt', 'w') as f_out:\n    for _ in range(10):\n      value = nvda.price()\n      print('Logging ${:.2f} for NVDA'.format(value))\n      f_out.write('{:.2f}\\n'.format(value))## Opening stock ticker for outputs/NVDA\n## Logging $141.84 for NVDA\n## 7\n## Logging $141.75 for NVDA\n## 7\n## Logging $141.68 for NVDA\n## 7\n## Logging $141.59 for NVDA\n## 7\n## Logging $141.68 for NVDA\n## 7\n## Logging $141.66 for NVDA\n## 7\n## Logging $141.63 for NVDA\n## 7\n## Logging $141.56 for NVDA\n## 7\n## Logging $141.57 for NVDA\n## 7\n## Logging $141.67 for NVDA\n## 7\n## Closing stock ticker"},{"path":"writing-functions-in-python.html","id":"changing-the-working-directory","chapter":"Writing Functions in Python","heading":"Changing the working directory","text":"\nusing open-source library lets train deep neural networks data. Unfortunately, training, library writes checkpoint models (.e., models trained portion data) current working directory. find behavior frustrating don’t want launch script directory models saved.\n\ndecide one way fix write context manager changes current working directory, lets build models, resets working directory original location. ’ll want sure errors occur model training don’t prevent resetting working directory original location.\n\nAdd statement lets handle errors might occur inside context.\n\nAdd statement ensures os.chdir(current_dir) called, whether error .\n\nExcellent error handling! Now, even someone writes buggy code using context manager, sure change current working directory back called in_dir(). important users might relying working directory started script. in_dir() great example CHANGE/RESET pattern indicates use context manager.\n","code":"# edited/added\nimport os\n\ndef in_dir(directory):\n  \"\"\"Change current working directory to `directory`,\n  allow the user to run some code, and change back.\n  Args:\n    directory (str): The path to a directory to work in.\n  \"\"\"\n  current_dir = os.getcwd()\n  os.chdir(directory)\n  # Add code that lets you handle errors\n  try:\n    yield\n  # Ensure the directory is reset,\n  # whether there was an error or not\n  finally:\n    os.chdir(current_dir)"},{"path":"writing-functions-in-python.html","id":"decorators","chapter":"Writing Functions in Python","heading":"Decorators","text":"\nDecorators extremely powerful concept Python. allow modify behavior function without changing code function . chapter lay foundational concepts needed thoroughly understand decorators (functions objects, scope, closures), give good introduction decorators used defined. deep dive Python internals set superstar Pythonista.\n","code":""},{"path":"writing-functions-in-python.html","id":"functions-are-objects","chapter":"Writing Functions in Python","heading":"Functions are objects","text":"","code":""},{"path":"writing-functions-in-python.html","id":"building-a-command-line-data-app","chapter":"Writing Functions in Python","heading":"Building a command line data app","text":"\nbuilding command line tool lets user interactively explore dataset. ’ve defined four functions: mean(), std(), minimum(), maximum() users can call analyze data. Help finish section code users can call functions typing function name input prompt.\n\nNote: function get_user_input() exercise mock version asking user enter command. randomly returns one four function names. real life, ask input wait user entered value.\n\nAdd functions std(), minimum(), maximum() function_map dictionary, like mean().\n\nname function user wants call stored func_name. Use dictionary functions, function_map, call chosen function pass data argument.\n\nPhenomenal function referencing! adding functions dictionary, can select function based user’s input. also used series /else statements, putting dictionary like much easier read maintain.\n","code":"# edited/added\nimport random\ndef get_user_input(prompt='Type a command: '):\n    command = random.choice(['mean', 'std', 'minimum', 'maximum'])\n    print(prompt)\n    print('> {}'.format(command))\n    return command\ndef mean(data):\n    print(data.mean())\ndef std(data):\n    print(data.std())\ndef minimum(data):\n    print(data.min())\ndef maximum(data):\n    print(data.max())\ndef load_data():\n    df = pd.DataFrame()\n    df['height'] = [72.1, 69.8, 63.2, 64.7]\n    df['weight'] = [198, 204, 164, 238]\n    return df\n  \n# Add the missing function references to the function map\nfunction_map = {\n  'mean': mean,\n  'std': std,\n  'minimum': minimum,\n  'maximum': maximum\n}\n\ndata = load_data()\nprint(data)##    height  weight\n## 0    72.1     198\n## 1    69.8     204\n## 2    63.2     164\n## 3    64.7     238func_name = get_user_input()\n\n# Call the chosen function and pass \"data\" as an argument## Type a command: \n## > meanfunction_map[func_name](data)## height     67.45\n## weight    201.00\n## dtype: float64"},{"path":"writing-functions-in-python.html","id":"reviewing-your-co-workers-code","chapter":"Writing Functions in Python","heading":"Reviewing your co-worker’s code","text":"\nco-worker asking review code ’ve written give tips get ready production. know docstring considered best practice maintainable, reusable functions, sanity check decide run has_docstring() function functions.\n\nCall has_docstring() co-worker’s load_and_plot_data() function.\n\nCheck function as_2D() docstring.\n\nCheck function log_product() docstring.\n\nAwesome job writing functions arguments! discovered co-worker forgot write docstring log_product(). learned enough best practices tell fix .  pass function argument another function, determine one calling one referencing. Keeping straight important dig deeper chapter. function names can think advice might give co-worker functions?\n","code":"def has_docstring(func):\n  \"\"\"Check to see if the function \n  `func` has a docstring.\n\n  Args:\n    func (callable): A function.\n\n  Returns:\n    bool\n  \"\"\"\n  return func.__doc__ is not None\n# edited/added\ndef has_docstring(func):\n    \"\"\"Check to see if the function \n    `func` has a docstring.\n    Args:\n        func (callable): A function.\n    Returns:\n        bool\n    \"\"\"\n    return func.__doc__ is not None\ndef load_and_plot_data(filename):\n    \"\"\"Load a data frame and plot each column.\n    Args:\n        filename (str): Path to a CSV file of data.\n    Returns:\n        pandas.DataFrame\n    \"\"\"\n    df = pd.load_csv(filename, index_col=0)\n    df.hist()\n    return df\n  \n# Call has_docstring() on the load_and_plot_data() function\nok = has_docstring(load_and_plot_data)\n\nif not ok:\n  print(\"load_and_plot_data() doesn't have a docstring!\")\nelse:\n  print(\"load_and_plot_data() looks ok\")## load_and_plot_data() looks ok# edited/added\ndef as_2D(arr):\n    \"\"\"Reshape an array to 2 dimensions\"\"\"\n    return np.array(arr).reshape(1, -1)\n  \n# Call has_docstring() on the as_2D() function\nok = has_docstring(as_2D)\n\nif not ok:\n  print(\"as_2D() doesn't have a docstring!\")\nelse:\n  print(\"as_2D() looks ok\")## as_2D() looks ok# edited/added\ndef log_product(arr):\n    return np.exp(np.sum(np.log(arr)))\n  \n# Call has_docstring() on the log_product() function\nok = has_docstring(log_product)\n\nif not ok:\n  print(\"log_product() doesn't have a docstring!\")\nelse:\n  print(\"log_product() looks ok\")## log_product() doesn't have a docstring!"},{"path":"writing-functions-in-python.html","id":"returning-functions-for-a-math-game","chapter":"Writing Functions in Python","heading":"Returning functions for a math game","text":"\nbuilding educational math game player enters math term, program returns function matches term. instance, user types “add”, program returns function adds two numbers. far ’ve implemented “add” function. Now want include “subtract” function.\n\nDefine subtract() function. take two arguments return first argument minus second argument.\n\nNice nested function! Now ’ve implemented subtract() function, can keep going include multiply() divide(). predict game going even bigger Fortnite!  Notice assign return value create_math_function() add subtract variables script. Since create_math_function() returns function, can call variables functions.\n","code":"def create_math_function(func_name):\n  if func_name == 'add':\n    def add(a, b):\n      return a + b\n    return add\n  elif func_name == 'subtract':\n    # Define the subtract() function\n    def subtract(a, b):\n      return a - b\n    return subtract\n  else:\n    print(\"I don't know that one\")\n    \nadd = create_math_function('add')\nprint('5 + 2 = {}'.format(add(5, 2)))## 5 + 2 = 7subtract = create_math_function('subtract')\nprint('5 - 2 = {}'.format(subtract(5, 2)))## 5 - 2 = 3"},{"path":"writing-functions-in-python.html","id":"scope","chapter":"Writing Functions in Python","heading":"Scope","text":"","code":""},{"path":"writing-functions-in-python.html","id":"understanding-scope","chapter":"Writing Functions in Python","heading":"Understanding scope","text":"\nfour values script print?\n50, 30, 100, 5010, 30, 30, 3050, 30, 100, 3010, 30, 100, 5050, 50, 50, 50\nGood job! one() doesn’t change global x, first print() statement prints 50. two() change global x second print() statement prints 30.  print() statement inside function three() referencing x value local three(), prints 100.  three() change global x value last print() statement prints 30 .\n","code":"x = 50\n\ndef one():\n  x = 10\n\ndef two():\n  global x\n  x = 30\n\ndef three():\n  x = 100\n  print(x)\n\nfor func in [one, two, three]:\n  func()\n  print(x)\n"},{"path":"writing-functions-in-python.html","id":"modifying-variables-outside-local-scope","chapter":"Writing Functions in Python","heading":"Modifying variables outside local scope","text":"\nSometimes functions need modify variable outside local scope function. ’s generally best practice , ’s still good know case need . Update functions can modify variables usually outside scope.\n\nAdd keyword lets us update call_count inside function.\n\nAdd keyword lets us modify file_contents inside save_contents().\n\nAdd keyword done check_is_done() wait_until_done() eventually stops looping.\n\nStellar scoping! adding global done check_is_done(), ensure done referenced one set False wait_until_done() called. Without keyword, wait_until_done() loop forever done = True check_is_done() changing variable local check_is_done(). Understanding scope variables help debug tricky situations like one.\n","code":"call_count = 0\n\ndef my_function():\n  # Use a keyword that lets us update call_count \n  global call_count\n  call_count += 1\n  \n  print(\"You've called my_function() {} times!\".format(\n    call_count\n  ))\n  \nfor _ in range(20):\n  my_function()## You've called my_function() 1 times!\n## You've called my_function() 2 times!\n## You've called my_function() 3 times!\n## You've called my_function() 4 times!\n## You've called my_function() 5 times!\n## You've called my_function() 6 times!\n## You've called my_function() 7 times!\n## You've called my_function() 8 times!\n## You've called my_function() 9 times!\n## You've called my_function() 10 times!\n## You've called my_function() 11 times!\n## You've called my_function() 12 times!\n## You've called my_function() 13 times!\n## You've called my_function() 14 times!\n## You've called my_function() 15 times!\n## You've called my_function() 16 times!\n## You've called my_function() 17 times!\n## You've called my_function() 18 times!\n## You've called my_function() 19 times!\n## You've called my_function() 20 times!def read_files():\n  file_contents = None\n  \n  def save_contents(filename):\n    # Add a keyword that lets us modify file_contents\n    nonlocal file_contents\n    if file_contents is None:\n      file_contents = []\n    with open(filename) as fin:\n      file_contents.append(fin.read())\n      \n  for filename in ['datasets/Writing-Functions-in-Python/1984.txt', 'datasets/Writing-Functions-in-Python/MobyDick.txt', 'datasets/Writing-Functions-in-Python/CatsEye.txt']:\n    save_contents(filename)\n    \n  return file_contents\n\nprint('\\n'.join(read_files()))## It was a bright day in April, and the clocks were striking thirteen.\n## Call me Ishmael.\n## Time is not a line but a dimension, like the dimensions of space.def wait_until_done():\n  def check_is_done():\n    # Add a keyword so that wait_until_done() \n    # doesn't run forever\n    global done\n    if random.random() < 0.1:\n      done = True\n      \n  while not done:\n    check_is_done()\n\ndone = False\nwait_until_done()\n\nprint('Work done? {}'.format(done))## Work done? True"},{"path":"writing-functions-in-python.html","id":"closures","chapter":"Writing Functions in Python","heading":"Closures","text":"","code":""},{"path":"writing-functions-in-python.html","id":"checking-for-closure","chapter":"Writing Functions in Python","heading":"Checking for closure","text":"\n’re teaching niece program Python, working returning nested functions. thinks written code correctly, worried returned function won’t necessary information called. Show nonlocal variables needs new function’s closure.\n\nUse attribute my_func() function show closure None.\n\nShow two variables closure.\n\nGet values variables closure can show equal [2, 17], arguments passed return_a_func().\n\nCase closed! niece relieved see values passed return_a_func() still accessible new function returned, even program left scope return_a_func().  Values get added function’s closure order defined enclosing function (case, arg1 arg2), used nested function. , return_a_func() took third argument (e.g., arg3) wasn’t used new_func(), captured new_func()’s closure.\n","code":"def return_a_func(arg1, arg2):\n  def new_func():\n    print('arg1 was {}'.format(arg1))\n    print('arg2 was {}'.format(arg2))\n  return new_func\n    \nmy_func = return_a_func(2, 17)\n\n# Show that my_func()'s closure is not None\nprint(my_func.__closure__ is not None)## True# Show that there are two variables in the closure\nprint(len(my_func.__closure__) == 2)## True# Get the values of the variables in the closure\nclosure_values = [\n  my_func.__closure__[i].cell_contents for i in range(2)\n]\nprint(closure_values == [2, 17])## True"},{"path":"writing-functions-in-python.html","id":"closures-keep-your-values-safe","chapter":"Writing Functions in Python","heading":"Closures keep your values safe","text":"\nstill helping niece understand closures. written function get_new_func() returns nested function. nested function call_func() calls whatever function passed get_new_func(). ’ve also written my_special_function() simply prints message states executing my_special_function().\n\nwant show niece matter my_special_function() passing get_new_func(), new function still mimics behavior original my_special_function() new function’s closure.\n\nShow still get original message even redefine my_special_function() print “hello”.\n\nShow even delete my_special_function(), can still call new_func() without problems.\n\nShow still get original message even overwrite my_special_function() new function.\n\nWell done! niece feels like understands closures now. seen can modify, delete, overwrite values needed nested function, nested function can still access values stored safely function’s closure. even realized run memory issues wound adding large array object closure, resolved keep eye sort problem.\n","code":"def my_special_function():\n  print('You are running my_special_function()')\n  \ndef get_new_func(func):\n  def call_func():\n    func()\n  return call_func\n\nnew_func = get_new_func(my_special_function)\n\n# Redefine my_special_function() to just print \"hello\"\ndef my_special_function():\n  print(\"hello\")\n\nnew_func()## You are running my_special_function()def my_special_function():\n  print('You are running my_special_function()')\n  \ndef get_new_func(func):\n  def call_func():\n    func()\n  return call_func\n\nnew_func = get_new_func(my_special_function)\n\n# Delete my_special_function()\ndel(my_special_function)\n\nnew_func()## You are running my_special_function()def my_special_function():\n  print('You are running my_special_function()')\n  \ndef get_new_func(func):\n  def call_func():\n    func()\n  return call_func\n\n# Overwrite `my_special_function` with the new function\nmy_special_function = get_new_func(my_special_function)\n\nmy_special_function()## You are running my_special_function()"},{"path":"writing-functions-in-python.html","id":"decorators-1","chapter":"Writing Functions in Python","heading":"Decorators","text":"","code":""},{"path":"writing-functions-in-python.html","id":"using-decorator-syntax","chapter":"Writing Functions in Python","heading":"Using decorator syntax","text":"\nwritten decorator called print_args prints arguments values time function decorating gets called.\n\nDecorate my_function() print_args() decorator redefining my_function variable.\n\nDecorate my_function() print_args() decorator using decorator syntax.\n\ndelightful decorator! Note 3 definition my_function exactly equivalent my_function = print_args(my_function). Remember, even though decorators functions , use decorator syntax @ symbol include parentheses decorator name.\n","code":"# edited/added\ndef print_args(func):\n    sig = inspect.signature(func)\n    def wrapper(*args, **kwargs):\n        bound = sig.bind(*args, **kwargs).arguments\n        str_args = ', '.join(['{}={}'.format(k, v) for k, v in bound.items()])\n        print('{} was called with {}'.format(func.__name__, str_args))\n        return func(*args, **kwargs)\n    return wrapper\n  \ndef my_function(a, b, c):\n  print(a + b + c)\n\n# Decorate my_function() with the print_args() decorator\nmy_function = print_args(my_function)\n\nmy_function(1, 2, 3)## my_function was called with a=1, b=2, c=3\n## 6# Decorate my_function() with the print_args() decorator\n@print_args\ndef my_function(a, b, c):\n  print(a + b + c)\n\nmy_function(1, 2, 3)## my_function was called with a=1, b=2, c=3\n## 6"},{"path":"writing-functions-in-python.html","id":"defining-a-decorator","chapter":"Writing Functions in Python","heading":"Defining a decorator","text":"\nbuddy working decorator prints “” message decorated function called prints “” message decorated function called. trouble remembering wrapping decorated function supposed work. Help finishing print_before_and_after() decorator.\n\nCall function decorated pass positional arguments *args.\n\nReturn new decorated function.\n\ndarling decorator! decorator print_before_and_after() defines nested function wrapper() calls whatever function gets passed print_before_and_after(). wrapper() adds little something else function call printing one message decorated function called another right afterwards. Since print_before_and_after() returns new wrapper() function, can use decorator decorate multiply() function.\n","code":"def print_before_and_after(func):\n  def wrapper(*args):\n    print('Before {}'.format(func.__name__))\n    # Call the function being decorated with *args\n    func(*args)\n    print('After {}'.format(func.__name__))\n  # Return the nested function\n  return wrapper\n\n@print_before_and_after\ndef multiply(a, b):\n  print(a * b)\n\nmultiply(5, 10)## Before multiply\n## 50\n## After multiply"},{"path":"writing-functions-in-python.html","id":"more-on-decorators","chapter":"Writing Functions in Python","heading":"More on Decorators","text":"\nNow understand decorators work hood, chapter gives bunch real-world examples write decorators code. also learn advanced decorator concepts like preserve metadata decorated functions write decorators take arguments.\n","code":""},{"path":"writing-functions-in-python.html","id":"real-world-examples","chapter":"Writing Functions in Python","heading":"Real-world examples","text":"","code":""},{"path":"writing-functions-in-python.html","id":"print-the-return-type","chapter":"Writing Functions in Python","heading":"Print the return type","text":"\ndebugging package ’ve working friends. Something weird happening data returned one functions, ’re even sure function causing trouble. know sometimes bugs can sneak code expecting function return one thing, returns something different. instance, expect function return numpy array, returns list, can get unexpected behavior. ensure causing trouble, decide write decorator, print_return_type(), print type variable gets returned every call function decorating.\n\nCreate nested function, wrapper(), become new decorated function.\n\nCall function decorated.\n\nReturn new decorated function.\n\nRighteous return types! new decorator helps examine results functions runtime. Now can apply decorator every function package developing run scripts. able examine types return values help understand happening hopefully help find bug.\n","code":"def print_return_type(func):\n  # Define wrapper(), the decorated function\n  def wrapper(*args, **kwargs):\n    # Call the function being decorated\n    result = func(*args, **kwargs)\n    print('{}() returned type {}'.format(\n      func.__name__, type(result)\n    ))\n    return result\n  # Return the decorated function\n  return wrapper\n  \n@print_return_type\ndef foo(value):\n  return value\n  \nprint(foo(42))## foo() returned type <class 'int'>\n## 42print(foo([1, 2, 3]))## foo() returned type <class 'list'>\n## [1, 2, 3]print(foo({'a': 42}))## foo() returned type <class 'dict'>\n## {'a': 42}"},{"path":"writing-functions-in-python.html","id":"counter","chapter":"Writing Functions in Python","heading":"Counter","text":"\n’re working new web app, curious many times functions gets called. decide write decorator adds counter function decorate. use information future determine whether sections code remove longer used app.\n\nCall function decorated return result.\n\nReturn new decorated function.\n\nDecorate foo() counter() decorator.\n\nCool counting! Now can go decorate bunch functions counter() decorator, let program run , print many times function called.  seems little magical can reference wrapper() function inside definition wrapper() line 3. ’s just one many neat things functions Python – function, just decorators.\n","code":"def counter(func):\n  def wrapper(*args, **kwargs):\n    wrapper.count += 1\n    # Call the function being decorated and return the result\n    return func(*args, **kwargs)\n  wrapper.count = 0\n  # Return the new decorated function\n  return wrapper\n\n# Decorate foo() with the counter() decorator\n@counter\ndef foo():\n  print('calling foo()')\n  \nfoo()## calling foo()foo()## calling foo()print('foo() was called {} times.'.format(foo.count))## foo() was called 2 times."},{"path":"writing-functions-in-python.html","id":"decorators-and-metadata","chapter":"Writing Functions in Python","heading":"Decorators and metadata","text":"","code":""},{"path":"writing-functions-in-python.html","id":"preserving-docstrings-when-decorating-functions","chapter":"Writing Functions in Python","heading":"Preserving docstrings when decorating functions","text":"\nfriend come problem. ’ve written nifty decorators added functions open-source library ’ve working . However, running tests discovered docstrings mysteriously disappeared decorated functions. Show friend preserve docstrings metadata writing decorators.\n\nDecorate print_sum() add_hello() decorator replicate issue friend saw - docstring disappears.\n\nshow friend printing wrapper() function’s docstring, print_sum() docstring, add following docstring wrapper():\n\nImport function allow add metadata print_sum() decorated version print_sum().\n\nFinally, decorate wrapper() metadata func() preserved new decorated function.\n\n’s wrap! friend concerned couldn’t print docstrings functions. now realize strange behavior seeing caused fact accidentally printing wrapper() docstring instead docstring original function. adding 4(func) decorators, see docstrings back expect .\n","code":"from functools import wraps\n\ndef add_hello(func):\n  # Decorate wrapper() so that it keeps func()'s metadata\n  @wraps(func)\n  def wrapper(*args, **kwargs):\n    \"\"\"Print 'hello' and then call the decorated function.\"\"\"\n    print('Hello')\n    return func(*args, **kwargs)\n  return wrapper\n  \n@add_hello\ndef print_sum(a, b):\n  \"\"\"Adds two numbers and prints the sum\"\"\"\n  print(a + b)\n  \nprint_sum(10, 20)## Hello\n## 30print_sum_docstring = print_sum.__doc__\nprint(print_sum_docstring)## Adds two numbers and prints the sum"},{"path":"writing-functions-in-python.html","id":"measuring-decorator-overhead","chapter":"Writing Functions in Python","heading":"Measuring decorator overhead","text":"\nboss wrote decorator called check_everything() think amazing, insisting use function. However, ’ve noticed use decorate functions, makes run much slower. need convince boss decorator adding much processing time function. , going measure long decorated function takes run compare long undecorated function taken run. decorator question:\n\nCall original function instead decorated version using attribute function wraps() statement boss’s decorator added decorated function.\n\nWow! function ran approximately 10,000 times faster without boss’s decorator. least smart enough add 5(func) nested wrapper() function able access original function. show results test. sure ask raise ’re !\n","code":"def check_everything(func):\n  @wraps(func)\n  def wrapper(*args, **kwargs):\n    check_inputs(*args, **kwargs)\n    result = func(*args, **kwargs)\n    check_outputs(result)\n    return result\n  return wrapper\n# edited/added\ndef check_inputs(a, *args, **kwargs):\n  for value in a:\n    time.sleep(0.01)\n  print('Finished checking inputs')\ndef check_outputs(a, *args, **kwargs):\n  for value in a:\n    time.sleep(0.01)\n  print('Finished checking outputs')\ndef check_everything(func):\n  @wraps(func)\n  def wrapper(*args, **kwargs):\n    check_inputs(*args, **kwargs)\n    result = func(*args, **kwargs)\n    check_outputs(result)\n    return result\n  return wrapper\n\n@check_everything\ndef duplicate(my_list):\n  \"\"\"Return a new list that repeats the input twice\"\"\"\n  return my_list + my_list\n\nt_start = time.time()\nduplicated_list = duplicate(list(range(50)))## Finished checking inputs\n## Finished checking outputst_end = time.time()\ndecorated_time = t_end - t_start\n\nt_start = time.time()\n# Call the original function instead of the decorated one\nduplicated_list = duplicate.__wrapped__(list(range(50)))\nt_end = time.time()\nundecorated_time = t_end - t_start\n\nprint('Decorated time: {:.5f}s'.format(decorated_time))## Decorated time: 1.85666sprint('Undecorated time: {:.5f}s'.format(undecorated_time))## Undecorated time: 0.00906s"},{"path":"writing-functions-in-python.html","id":"decorators-that-take-arguments","chapter":"Writing Functions in Python","heading":"Decorators that take arguments","text":"","code":""},{"path":"writing-functions-in-python.html","id":"run_n_times","chapter":"Writing Functions in Python","heading":"Run_n_times()","text":"\nvideo exercise, showed example decorator takes argument: run_n_times(). code decorator repeated remind works. Practice different ways applying decorator function print_sum(). ’ll show funny prank can play co-workers.\n\nAdd run_n_times() decorator print_sum() using decorator syntax print_sum() runs 10 times.\n\nUse run_n_times() create decorator run_five_times() run function five times.\n\n’s prank: use run_n_times() modify built-print() function always prints 20 times!\n\nGood job!Good job!Good job!’ve become expert using decorators. Notice use decorator syntax decorator takes arguments, need call decorator adding parentheses, don’t add parenthesis decorators don’t take arguments.Warning: overwriting commonly used functions probably great idea, think twice using powers evil.\n","code":"def run_n_times(n):\n  \"\"\"Define and return a decorator\"\"\"\n  def decorator(func):\n    def wrapper(*args, **kwargs):\n      for i in range(n):\n        func(*args, **kwargs)\n    return wrapper\n  return decorator\n# edited/added\ndef run_n_times(n):\n  \"\"\"Define and return a decorator\"\"\"\n  def decorator(func):\n    def wrapper(*args, **kwargs):\n      for i in range(n):\n        func(*args, **kwargs)\n    return wrapper\n  return decorator\n\n# Make print_sum() run 10 times with the run_n_times() decorator\n@run_n_times(10)\ndef print_sum(a, b):\n  print(a + b)\n  \nprint_sum(15, 20)## 35\n## 35\n## 35\n## 35\n## 35\n## 35\n## 35\n## 35\n## 35\n## 35# Use run_n_times() to create the run_five_times() decorator\nrun_five_times = run_n_times(5)\n\n@run_five_times\ndef print_sum(a, b):\n  print(a + b)\n  \nprint_sum(4, 100)## 104\n## 104\n## 104\n## 104\n## 104# Modify the print() function to always run 20 times\nprint = run_n_times(20)(print)\n\nprint('What is happening?!?!')## What is happening?!?!\n## What is happening?!?!\n## What is happening?!?!\n## What is happening?!?!\n## What is happening?!?!\n## What is happening?!?!\n## What is happening?!?!\n## What is happening?!?!\n## What is happening?!?!\n## What is happening?!?!\n## What is happening?!?!\n## What is happening?!?!\n## What is happening?!?!\n## What is happening?!?!\n## What is happening?!?!\n## What is happening?!?!\n## What is happening?!?!\n## What is happening?!?!\n## What is happening?!?!\n## What is happening?!?!"},{"path":"writing-functions-in-python.html","id":"html-generator","chapter":"Writing Functions in Python","heading":"HTML Generator","text":"\nwriting script generates HTML webpage fly. far, written two decorators add bold italics tags function returns string. notice, however, two decorators look similar. Instead writing bunch similar looking decorators, want create one decorator, html(), can take pair opening closing tags.\n\nReturn decorator decorated function correct places new html() decorator.\n\nUse html() decorator wrap return value hello() strings <b> <\/b> (HTML tags mean “bold”).\n\nUse html() wrap return value goodbye() strings <> <\/> (HTML tags mean “italics”).\n\nUse html() wrap hello_goodbye() DIV, done adding strings <div> <\/div> tags around string.\n\n’s HTML hotness! new html() decorator can focus writing simple functions return information want display webpage let decorator take care wrapping appropriate HTML tags.\n","code":"def bold(func):\n  @wraps(func)\n  def wrapper(*args, **kwargs):\n    msg = func(*args, **kwargs)\n    return '<b>{}<\/b>'.format(msg)\n  return wrapper\ndef italics(func):\n  @wraps(func)\n  def wrapper(*args, **kwargs):\n    msg = func(*args, **kwargs)\n    return '<i>{}<\/i>'.format(msg)\n  return wrapper\ndef html(open_tag, close_tag):\n  def decorator(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n      msg = func(*args, **kwargs)\n      return '{}{}{}'.format(open_tag, msg, close_tag)\n    # Return the decorated function\n    return wrapper\n  # Return the decorator\n  return decorator# Make hello() return bolded text\n@html('<b>', '<\/b>')\ndef hello(name):\n  return 'Hello {}!'.format(name)\n\nprint(hello('Alice'))## <b>Hello Alice!<\/b>\n## <b>Hello Alice!<\/b>\n## <b>Hello Alice!<\/b>\n## <b>Hello Alice!<\/b>\n## <b>Hello Alice!<\/b>\n## <b>Hello Alice!<\/b>\n## <b>Hello Alice!<\/b>\n## <b>Hello Alice!<\/b>\n## <b>Hello Alice!<\/b>\n## <b>Hello Alice!<\/b>\n## <b>Hello Alice!<\/b>\n## <b>Hello Alice!<\/b>\n## <b>Hello Alice!<\/b>\n## <b>Hello Alice!<\/b>\n## <b>Hello Alice!<\/b>\n## <b>Hello Alice!<\/b>\n## <b>Hello Alice!<\/b>\n## <b>Hello Alice!<\/b>\n## <b>Hello Alice!<\/b>\n## <b>Hello Alice!<\/b># Make goodbye() return italicized text\n@html('<i>', '<\/i>')\ndef goodbye(name):\n  return 'Goodbye {}.'.format(name)\n  \nprint(goodbye('Alice'))## <i>Goodbye Alice.<\/i>\n## <i>Goodbye Alice.<\/i>\n## <i>Goodbye Alice.<\/i>\n## <i>Goodbye Alice.<\/i>\n## <i>Goodbye Alice.<\/i>\n## <i>Goodbye Alice.<\/i>\n## <i>Goodbye Alice.<\/i>\n## <i>Goodbye Alice.<\/i>\n## <i>Goodbye Alice.<\/i>\n## <i>Goodbye Alice.<\/i>\n## <i>Goodbye Alice.<\/i>\n## <i>Goodbye Alice.<\/i>\n## <i>Goodbye Alice.<\/i>\n## <i>Goodbye Alice.<\/i>\n## <i>Goodbye Alice.<\/i>\n## <i>Goodbye Alice.<\/i>\n## <i>Goodbye Alice.<\/i>\n## <i>Goodbye Alice.<\/i>\n## <i>Goodbye Alice.<\/i>\n## <i>Goodbye Alice.<\/i># Wrap the result of hello_goodbye() in <div> and <\/div>\n@html('<div>', '<\/div>')\ndef hello_goodbye(name):\n  return '\\n{}\\n{}\\n'.format(hello(name), goodbye(name))\n  \nprint(hello_goodbye('Alice'))## <div>\n## <b>Hello Alice!<\/b>\n## <i>Goodbye Alice.<\/i>\n## <\/div>\n## <div>\n## <b>Hello Alice!<\/b>\n## <i>Goodbye Alice.<\/i>\n## <\/div>\n## <div>\n## <b>Hello Alice!<\/b>\n## <i>Goodbye Alice.<\/i>\n## <\/div>\n## <div>\n## <b>Hello Alice!<\/b>\n## <i>Goodbye Alice.<\/i>\n## <\/div>\n## <div>\n## <b>Hello Alice!<\/b>\n## <i>Goodbye Alice.<\/i>\n## <\/div>\n## <div>\n## <b>Hello Alice!<\/b>\n## <i>Goodbye Alice.<\/i>\n## <\/div>\n## <div>\n## <b>Hello Alice!<\/b>\n## <i>Goodbye Alice.<\/i>\n## <\/div>\n## <div>\n## <b>Hello Alice!<\/b>\n## <i>Goodbye Alice.<\/i>\n## <\/div>\n## <div>\n## <b>Hello Alice!<\/b>\n## <i>Goodbye Alice.<\/i>\n## <\/div>\n## <div>\n## <b>Hello Alice!<\/b>\n## <i>Goodbye Alice.<\/i>\n## <\/div>\n## <div>\n## <b>Hello Alice!<\/b>\n## <i>Goodbye Alice.<\/i>\n## <\/div>\n## <div>\n## <b>Hello Alice!<\/b>\n## <i>Goodbye Alice.<\/i>\n## <\/div>\n## <div>\n## <b>Hello Alice!<\/b>\n## <i>Goodbye Alice.<\/i>\n## <\/div>\n## <div>\n## <b>Hello Alice!<\/b>\n## <i>Goodbye Alice.<\/i>\n## <\/div>\n## <div>\n## <b>Hello Alice!<\/b>\n## <i>Goodbye Alice.<\/i>\n## <\/div>\n## <div>\n## <b>Hello Alice!<\/b>\n## <i>Goodbye Alice.<\/i>\n## <\/div>\n## <div>\n## <b>Hello Alice!<\/b>\n## <i>Goodbye Alice.<\/i>\n## <\/div>\n## <div>\n## <b>Hello Alice!<\/b>\n## <i>Goodbye Alice.<\/i>\n## <\/div>\n## <div>\n## <b>Hello Alice!<\/b>\n## <i>Goodbye Alice.<\/i>\n## <\/div>\n## <div>\n## <b>Hello Alice!<\/b>\n## <i>Goodbye Alice.<\/i>\n## <\/div>"},{"path":"writing-functions-in-python.html","id":"timeout-a-real-world-example","chapter":"Writing Functions in Python","heading":"Timeout(): a real world example","text":"","code":""},{"path":"writing-functions-in-python.html","id":"tag-your-functions","chapter":"Writing Functions in Python","heading":"Tag your functions","text":"\nTagging something means given thing one strings act labels. instance, often tag emails photos can search later. ’ve decided write decorator let tag functions arbitrary list tags. use tags many things:\n\nAdding information worked function, user can look ask run trouble using .\n\nLabeling functions “experimental” users know inputs outputs might change future.\n\nMarking functions plan remove future version code.\n\nEtc.\n\nDefine new decorator, named decorator(), return.\n\nEnsure decorated function keeps metadata.\n\nCall function decorated return result.\n\nReturn new decorator.\n\nTerrific tagging! new decorator, can really interesting things. instance, tag bunch image transforming functions, write code searches functions transform images apply , one , given input image. neat uses can come decorator?\n","code":"def tag(*tags):\n  # Define a new decorator, named \"decorator\", to return\n  def decorator(func):\n    # Ensure the decorated function keeps its metadata\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n      # Call the function being decorated and return the result\n      return func(*args, **kwargs)\n    wrapper.tags = tags\n    return wrapper\n  # Return the new decorator\n  return decorator\n\n@tag('test', 'this is a tag')\ndef foo():\n  pass\n\nprint(foo.tags)## ('test', 'this is a tag')\n## ('test', 'this is a tag')\n## ('test', 'this is a tag')\n## ('test', 'this is a tag')\n## ('test', 'this is a tag')\n## ('test', 'this is a tag')\n## ('test', 'this is a tag')\n## ('test', 'this is a tag')\n## ('test', 'this is a tag')\n## ('test', 'this is a tag')\n## ('test', 'this is a tag')\n## ('test', 'this is a tag')\n## ('test', 'this is a tag')\n## ('test', 'this is a tag')\n## ('test', 'this is a tag')\n## ('test', 'this is a tag')\n## ('test', 'this is a tag')\n## ('test', 'this is a tag')\n## ('test', 'this is a tag')\n## ('test', 'this is a tag')"},{"path":"writing-functions-in-python.html","id":"check-the-return-type","chapter":"Writing Functions in Python","heading":"Check the return type","text":"\nPython’s flexibility around data types usually cited one benefits language. can sometimes cause problems though incorrect data types go unnoticed. ’ve decided order ensure code exactly want , explicitly check return types functions make sure ’re returning expect. , going create decorator checks return type decorated function correct.\n\nNote: assert keyword can use test whether something true. type assert condition condition True, function doesn’t anything. condition False, function raises error. type error raises called AssertionError.\n\nStart completing returns_dict() decorator raises AssertionError return type decorated function dictionary.\n\nNow complete returns() decorator, takes expected return type argument.\n\n! took training wheels exercise, still great job. know write decorators now, even importantly, know work way .\n","code":"def returns_dict(func):\n  # Complete the returns_dict() decorator\n  def wrapper(*args, **kwargs):\n    result = func(*args, **kwargs)\n    assert type(result) == dict\n    return result\n  return wrapper\n\n@returns_dict\ndef foo(value):\n  return value\n\ntry:\n  print(foo([1,2,3]))\nexcept AssertionError:\n  print('foo() did not return a dict!')## foo() did not return a dict!\n## foo() did not return a dict!\n## foo() did not return a dict!\n## foo() did not return a dict!\n## foo() did not return a dict!\n## foo() did not return a dict!\n## foo() did not return a dict!\n## foo() did not return a dict!\n## foo() did not return a dict!\n## foo() did not return a dict!\n## foo() did not return a dict!\n## foo() did not return a dict!\n## foo() did not return a dict!\n## foo() did not return a dict!\n## foo() did not return a dict!\n## foo() did not return a dict!\n## foo() did not return a dict!\n## foo() did not return a dict!\n## foo() did not return a dict!\n## foo() did not return a dict!def returns(return_type):\n  # Write a decorator that raises an AssertionError if the\n  # decorated function returns a value that is not return_type\n  def decorator(func):\n    def wrapper(*args, **kwargs):\n      result = func(*args, **kwargs)\n      assert type(result) == return_type\n      return result\n    return wrapper\n  return decorator\n  \n@returns(dict)\ndef foo(value):\n  return value\n\ntry:\n  print(foo([1,2,3]))\nexcept AssertionError:\n  print('foo() did not return a dict!')## foo() did not return a dict!\n## foo() did not return a dict!\n## foo() did not return a dict!\n## foo() did not return a dict!\n## foo() did not return a dict!\n## foo() did not return a dict!\n## foo() did not return a dict!\n## foo() did not return a dict!\n## foo() did not return a dict!\n## foo() did not return a dict!\n## foo() did not return a dict!\n## foo() did not return a dict!\n## foo() did not return a dict!\n## foo() did not return a dict!\n## foo() did not return a dict!\n## foo() did not return a dict!\n## foo() did not return a dict!\n## foo() did not return a dict!\n## foo() did not return a dict!\n## foo() did not return a dict!"},{"path":"writing-functions-in-python.html","id":"great-job","chapter":"Writing Functions in Python","heading":"Great job!","text":"","code":""},{"path":"writing-functions-in-python.html","id":"great-job-1","chapter":"Writing Functions in Python","heading":"Great job!","text":"Great job! ’ve covered lot course.","code":""},{"path":"writing-functions-in-python.html","id":"chapter-1---best-practices","chapter":"Writing Functions in Python","heading":"Chapter 1 - Best Practices","text":"first chapter, learned make high-quality functions giving docstrings making sure one thing. Remembering acronym DRY, “Don’t Repeat ”, helped notice needed pull part code reusable function. also learned Python passes arguments functions difference mutable immutable variables.","code":""},{"path":"writing-functions-in-python.html","id":"chapter-2---context-managers","chapter":"Writing Functions in Python","heading":"Chapter 2 - Context Managers","text":"chapter context managers, learned use keyword “” enter exit context. also learned write context managers using contextmanager() decorator.","code":""},{"path":"writing-functions-in-python.html","id":"chapter-3---decorators","chapter":"Writing Functions in Python","heading":"Chapter 3 - Decorators","text":"also spent lot time course understanding decorators: work, use , write decorators .","code":""},{"path":"writing-functions-in-python.html","id":"chapter-4---more-on-decorators","chapter":"Writing Functions in Python","heading":"Chapter 4 - More on Decorators","text":"Finally, chapter 4, learned use functools.wraps() make sure decorated functions maintain metadata.","code":""},{"path":"writing-functions-in-python.html","id":"chapter-4---more-on-decorators-1","chapter":"Writing Functions in Python","heading":"Chapter 4 - More on Decorators","text":"learned write decorators take arguments.","code":""},{"path":"writing-functions-in-python.html","id":"thank-you","chapter":"Writing Functions in Python","heading":"Thank you!","text":"honor spend time . wanted let know ’ll donating portion proceeds course WiMLDS, non-profit helps support promote women fields machine learning data science. ’ll looking forward hearing amazing things Python future!","code":""},{"path":"object-oriented-programming-in-python.html","id":"object-oriented-programming-in-python","chapter":"Object-Oriented Programming in Python","heading":"Object-Oriented Programming in Python","text":"Alex Yarosh\nAlex software engineer mathematician. currently work Cockroach Labs - company behind CockroachDB - develop online product trainings. like cats, teaching, trains.\nCourse Description\n’ve done analysis, built report, trained model. ’s next? Well, want deploy model production, code need reliable exploratory scripts Jupyter notebook. Writing Functions Python give strong foundation writing complex beautiful functions can contribute research engineering skills team. ’ll learn useful tricks, like write context managers decorators. ’ll also learn best practices around write maintainable reusable functions good documentation. say people can good research write high-quality code unicorns. Take course discover magic!\nObject-oriented programming (OOP) widely used programming paradigm reduces development times—making easier read, reuse, maintain code. OOP shifts focus thinking code sequence actions looking program collection objects interact . course, ’ll learn create classes, act blueprints every object Python. ’ll leverage principles called inheritance polymorphism reuse optimize code. Dive learn create beautiful code ’s clean efficient!","code":""},{"path":"object-oriented-programming-in-python.html","id":"oop-fundamentals","chapter":"Object-Oriented Programming in Python","heading":"OOP Fundamentals","text":"\nchapter, ’ll learn object-oriented programming (OOP) , differs procedural-programming, can applied. ’ll define classes, learn create methods, attributes, constructors.\n","code":""},{"path":"object-oriented-programming-in-python.html","id":"what-is-oop","chapter":"Object-Oriented Programming in Python","heading":"What is OOP?","text":"","code":""},{"path":"object-oriented-programming-in-python.html","id":"oop-termininology","chapter":"Object-Oriented Programming in Python","heading":"OOP termininology","text":"\nlot terminology – classes, objects, methods, attributes… start writing object-oriented code, make sure solid grasp main concepts OOP.\n\nClassify cards correct buckets. statements true false?\nTrue:\nEncapsulation software design practice bundling data methods operate data.\n\nEncapsulation software design practice bundling data methods operate data.\n\nMethods encode behavior object represented functions.\n\nMethods encode behavior object represented functions.\n\nAttributes encode state object represented variables.\n\nAttributes encode state object represented variables.\nFalse:\nprogramming language can either object-oriented procedural, .\n\nprogramming language can either object-oriented procedural, .\n\nObject class different terms describing concept.\n\nObject class different terms describing concept.\n\n.columns example method DataFrame object.\n\n.columns example method DataFrame object.\n\nObject abstract template describing general states behaviors.\n\nObject abstract template describing general states behaviors.\n\nGreat job! Classes objects attributes methods, difference class abstract template, object concrete representation class.\n","code":""},{"path":"object-oriented-programming-in-python.html","id":"exploring-object-interface","chapter":"Object-Oriented Programming in Python","heading":"Exploring object interface","text":"\nbest way learn write object-oriented code study design existing classes.\n’ve already learned exploration tools like type() dir().\n\nAnother important function help(): calling help(x) console show documentation object class x.\n\nreal world classes many methods attributes, easy get lost, exercise, start something simpler. defined class, created object class called mystery. Explore object console using tools learned.\n\nclass mystery object ?\nnumpy.ndarray__main__.Employeepandas.core.DataFramesalesforce.CustomerIt doesn’t class\nmystery object Employee! Explore console find attributes .\n\nPrint mystery employee’s name attribute.\n\nPrint employee’s salary.\n\nNatasha – mystery employee – salary stored attribute .salary.\n\nGive Natasha raise $2500 using suitable method (use help() need !).\n\nPrint salary .\n\nGreat start! can use help() explore unfamiliar object. Notice descriptive names attributes methods, together methods’ docstrings, helped figure class functionality even didn’t know implemented. Keep mind writing classes!\n","code":"class Employee:\n  \n    def __init__(self, name, salary=30000):\n        self.name = name\n        self.salary = salary\n        \n    def give_raise(self, amount):\n        self.salary += amount\n\nmystery = Employee(name = \"Natasha Ting\", salary = 73500)\ntype(mystery)## <class '__main__.Employee'># Print the mystery employee's name\nprint(mystery.name)## Natasha Ting# Print the mystery employee's salary\nprint(mystery.salary)## 73500# Give the mystery employee a raise of $2500\nmystery.give_raise(2500)\n\n# Print the salary again\nprint(mystery.salary)## 76000"},{"path":"object-oriented-programming-in-python.html","id":"class-anatomy-attributes-and-methods","chapter":"Object-Oriented Programming in Python","heading":"Class anatomy: attributes and methods","text":"","code":""},{"path":"object-oriented-programming-in-python.html","id":"understanding-class-definitions","chapter":"Object-Oriented Programming in Python","heading":"Understanding class definitions","text":"\nObjects classes consist attributes (storing state) methods (storing behavior).\n\nget writing classes, need understand basic structure class, attributes class definition relate attributes object. exercise, class one method one attribute, well object class.\n\nArrange code blocks order produce output 6 run.\n\nDon’t forget indent blocks correctly using <> buttons left ☰ icon!\n\nWell done! Notice used self.count refer count attribute inside class definition, mc.count refer count attribute object. Make sure understand difference, use form (review video necessary)!\n","code":"class MyCounter:\n  \n  def set_count(self, n):\n    self.count = n\n\nmc = MyCounter()\nmc.set_count(5)\nmc.count = mc.count + 1\nprint(mc.count)## 6"},{"path":"object-oriented-programming-in-python.html","id":"create-your-first-class","chapter":"Object-Oriented Programming in Python","heading":"Create your first class","text":"\nTime write first class! exercise, ’ll start building Employee class briefly explored previous lesson. ’ll start creating methods set attributes, add methods manipulate .\n\nmentioned first video, object-oriented approach useful code involves complex interactions many objects. real production code, classes can dozens attributes methods complicated logic, underlying structure simple class.\n\nclasses course attributes short methods, organizational principles behind directly translatable complicated code.\n\nCreate empty class Employee.\n\nCreate object emp class Employee calling Employee().\n\nTry printing .name attribute emp object console. happens?\n\nModify Employee class include .set_name() method takes new_name argument, assigns new_name .name attribute class.\n\nUse set_name() method emp set name ‘Korel Rossi’.\n\nPrint emp.name.\n\nFollow pattern add another method - set_salary() - set salary attribute class parameter new_salary passed method.\n\nSet salary emp 50000.\n\nTry printing emp.salary calling set_salary().\n\nFantastic! created first class two methods two attributes. Try running dir(emp) console see can find attributes methods pop !\n","code":"# Create an empty class Employee\nclass Employee:\n    pass\n\n# Create an object emp of class Employee  \nemp = Employee()# Include a set_name method\nclass Employee:\n  \n  def set_name(self, new_name):\n    self.name = new_name\n  \n# Create an object emp of class Employee  \nemp = Employee()\n\n# Use set_name() on emp to set the name of emp to 'Korel Rossi'\nemp.set_name('Korel Rossi')\n\n# Print the name of emp\nprint(emp.name)## Korel Rossiclass Employee:\n  \n  def set_name(self, new_name):\n    self.name = new_name\n  \n  # Add set_salary() method  \n  def set_salary(self, new_salary):\n    self.salary = new_salary \n  \n  \n# Create an object emp of class Employee  \nemp = Employee()\n\n# Use set_name to set the name of emp to 'Korel Rossi'\nemp.set_name('Korel Rossi')\n\n# Set the salary of emp to 50000\nemp.set_salary(50000)"},{"path":"object-oriented-programming-in-python.html","id":"using-attributes-in-class-definition","chapter":"Object-Oriented Programming in Python","heading":"Using attributes in class definition","text":"\nprevious exercise, defined Employee class two attributes two methods setting attributes. kind method, aptly called setter method, far possible kind. Methods functions, anything can function, can also method. example, can use methods print, return values, make plots, raise exceptions, long makes sense behavior objects described class (Employee probably wouldn’t pivot_table() method).\n\nexercise, ’ll go beyond setter methods learn use existing class attributes define new methods. Employee class emp object previous exercise script pane.\n\nPrint salary attribute emp.\n\nAttributes aren’t read-: use assignment (equality sign) increase salary attribute emp 1500, print .\n\nRaising salary employee common pattern behavior, part class definition instead.\n\nAdd method give_raise() Employee increases salary amount passed give_raise() parameter.\n\nMethods don’t just modify attributes - can return values well!\n\nAdd method monthly_salary() returns value .salary attribute divided 12.\n\nCall .monthly_salary() emp, assign mon_sal, print.\n\ngreat! might wondering: write methods operations performed object attributes directly? code simple, methods deal attribute values often pre-processing checks built : example, maybe company maximal allowable raise amount. prudent add clause give_raise() method checks whether raise amount within limits.\n","code":"class Employee:\n    def set_name(self, new_name):\n        self.name = new_name\n\n    def set_salary(self, new_salary):\n        self.salary = new_salary \n  \nemp = Employee()\nemp.set_name('Korel Rossi')\nemp.set_salary(50000)\n\n# Print the salary attribute of emp\nprint(emp.salary)## 50000# Increase salary of emp by 1500\nemp.salary = emp.salary + 1500\n\n# Print the salary attribute of emp again\nprint(emp.salary)## 51500class Employee:\n    def set_name(self, new_name):\n        self.name = new_name\n\n    def set_salary(self, new_salary):\n        self.salary = new_salary \n\n    # Add a give_raise() method with raise amount as a parameter\n    def give_raise(self, amount):\n        self.salary = self.salary + amount\n\nemp = Employee()\nemp.set_name('Korel Rossi')\nemp.set_salary(50000)\n\nprint(emp.salary)## 50000emp.give_raise(1500)\nprint(emp.salary)## 51500class Employee:\n    def set_name(self, new_name):\n        self.name = new_name\n\n    def set_salary(self, new_salary):\n        self.salary = new_salary \n\n    def give_raise(self, amount):\n        self.salary = self.salary + amount\n\n    # Add monthly_salary method that returns 1/12th of salary attribute\n    def monthly_salary(self):\n        return self.salary / 12\n    \nemp = Employee()\nemp.set_name('Korel Rossi')\nemp.set_salary(50000)\n\n# Get monthly salary of emp and assign to mon_sal\nmon_sal = emp.monthly_salary()\n\n# Print mon_sal\nprint(mon_sal)## 4166.666666666667"},{"path":"object-oriented-programming-in-python.html","id":"class-anatomy-the-init-constructor","chapter":"Object-Oriented Programming in Python","heading":"Class anatomy: the init constructor","text":"","code":""},{"path":"object-oriented-programming-in-python.html","id":"correct-use-of-init","chapter":"Object-Oriented Programming in Python","heading":"Correct use of init","text":"\nPython allows run custom code - example, initializing attributes - time object created: just need define special method called init(). Use exercise check understanding init() mechanics!\n\ncode blocks return error run?\n1234\nExactly right! printout, however, 5, person writing code likely expected 0. ’s documentation important!\n","code":""},{"path":"object-oriented-programming-in-python.html","id":"add-a-class-constructor","chapter":"Object-Oriented Programming in Python","heading":"Add a class constructor","text":"\nexercise, ’ll continue working Employee class. Instead using methods like set_salary() wrote previous lesson, introduce constructor assigns name salary employee moment object created.\n\n’ll also create new attribute – hire_date – initialized parameters, instead contain current date.\n\nInitializing attributes constructor good idea, ensures object necessary attributes moment created.\n\nDefine class Employee constructor init() :\n\naccepts two arguments, name salary (default value0),\n\ncreates two attributes, also called name salary,\n\nsets values corresponding arguments.\n\ninit() method great place preprocessing.\n\nModify init() check whether salary parameter positive:\n\nyes, assign salary attribute,\n\n\n, assign 0 attribute print “Invalid salary!”.\n\n\nyes, assign salary attribute,\n\n, assign 0 attribute print “Invalid salary!”.\n\nImport datetime datetime module. contains function returns current date.\n\nAdd attribute hire_date set datetime.today().\n\n’re great! Notice add import statement use today() function. can use functions modules class definition, need import module first, import statement outside class definition.\n","code":"class Employee:\n    # Create __init__() method\n    def __init__(self, name, salary=0):\n        # Create the name and salary attributes\n        self.name = name\n        self.salary = salary\n    \n    # From the previous lesson\n    def give_raise(self, amount):\n        self.salary += amount\n\n    def monthly_salary(self):\n        return self.salary/12\n        \nemp = Employee(\"Korel Rossi\")\nprint(emp.name)## Korel Rossiprint(emp.salary)## 0class Employee:\n    \n    def __init__(self, name, salary=0):\n        self.name = name\n        # Modify code below to check if salary is positive\n        if salary >= 0:\n          self.salary = salary\n        else:\n          self.salary = 0\n          print(\"Invalid salary!\")\n        \n   \n   # ...Other methods omitted for brevity ... \n      \nemp = Employee(\"Korel Rossi\", -1000)## Invalid salary!print(emp.name)## Korel Rossiprint(emp.salary)## 0# Import datetime from datetime\nfrom datetime import datetime\n\nclass Employee:\n    \n    def __init__(self, name, salary=0):\n        self.name = name\n        if salary > 0:\n          self.salary = salary\n        else:\n          self.salary = 0\n          print(\"Invalid salary!\")\n          \n        # Add the hire_date attribute and set it to today's date\n        self.hire_date = datetime.today()\n        \n   # ...Other methods omitted for brevity ...\n      \nemp = Employee(\"Korel Rossi\")## Invalid salary!print(emp.name)## Korel Rossiprint(emp.hire_date)## 2023-01-13 18:47:06.113405"},{"path":"object-oriented-programming-in-python.html","id":"write-a-class-from-scratch","chapter":"Object-Oriented Programming in Python","heading":"Write a class from scratch","text":"\nPython developer writing visualization package. element visualization, want able tell position element, far elements, easily implement horizontal vertical flip .\n\nbasic element visualization single point. exercise, ’ll write class point plane scratch.\n\nDefine class Point :\n\nTwo attributes, x y - coordinates point plane;\n\nconstructor accepts two arguments, x y, initialize corresponding attributes.\narguments default value 0.0;\n\nmethod distance_to_origin() returns distance point origin. formula \\(\\sqrt{x^2 + y^2}\\).\n\nmethod reflect(), reflects point respect x- y-axis:\n\naccepts one argument axis,\n\n\naxis=“x” , sets y (typo!) attribute negative value y attribute,\n\n\naxis=“y”, sets x attribute negative value x attribute,\n\n\nvalue axis, prints error message.\n\n\naccepts one argument axis,\n\naxis=“x” , sets y (typo!) attribute negative value y attribute,\n\naxis=“y”, sets x attribute negative value x attribute,\n\nvalue axis, prints error message.\n\nNote: can choose use sqrt() function either numpy math package, whichever package choose, don’t forget import starting class definition!\n\ncheck work, able run following code without errors:\n\nreturn output\n\nGreat work! Notice implemented distance_to_origin() method instead attribute. Implementing attribute less sustainable - recalculate every time change values x y attributes make sure object state stays current.\n","code":"pt = Point(x=3.0)\npt.reflect(\"y\")\nprint((pt.x, pt.y))\npt.y = 4.0\nprint(pt.distance_to_origin())\n(-3.0,0.0)\n5.0\n# For use of np.sqrt\nimport numpy as np\n\nclass Point:\n    \"\"\" A point on a 2D plane\n    \n   Attributes\n    ----------\n    x : float, default 0.0. The x coordinate of the point        \n    y : float, default 0.0. The y coordinate of the point\n    \"\"\"\n    def __init__(self, x=0.0, y=0.0):\n      self.x = x\n      self.y = y\n      \n    def distance_to_origin(self):\n      \"\"\"Calculate distance from the point to the origin (0,0)\"\"\"\n      return np.sqrt(self.x ** 2 + self.y ** 2)\n    \n    def reflect(self, axis):\n      \"\"\"Reflect the point with respect to x or y axis.\"\"\"\n      if axis == \"x\":\n        self.y = - self.y\n      elif axis == \"y\":\n        self.x = - self.x\n      else:\n        print(\"The argument axis only accepts values 'x' and 'y'!\")"},{"path":"object-oriented-programming-in-python.html","id":"inheritance-and-polymorphism","chapter":"Object-Oriented Programming in Python","heading":"Inheritance and Polymorphism","text":"\nInheritance polymorphism core concepts OOP enable efficient consistent code reuse. Learn inherit class, customize redefine methods, review differences class-level data instance-level data.\n","code":""},{"path":"object-oriented-programming-in-python.html","id":"instance-and-class-data","chapter":"Object-Oriented Programming in Python","heading":"Instance and class data","text":"","code":""},{"path":"object-oriented-programming-in-python.html","id":"class-level-attributes","chapter":"Object-Oriented Programming in Python","heading":"Class-level attributes","text":"\nClass attributes store data shared among class instances. assigned values class body, referred using ClassName. syntax rather self. syntax used methods.\n\nexercise, game developer working game several players moving grid interacting . first step, want define Player class just move along straight line. Player position attribute move() method. grid limited, position Player maximal value.\n\nDefine class Player :\n\nclass attribute MAX_POSITION value 10.\n\ninit() method sets position instance attribute 0.\n\nPrint Player.MAX_POSITION.\n\nCreate Player object p print MAX_POSITION.\n\nAdd move() method steps parameter :\n\nposition plus steps less MAX_POSITION, add steps position assign result back position;\n\notherwise, set position MAX_POSITION.\n\nTake look console visualization!\n\nGreat work!\n","code":"# Create a Player class\nclass Player:\n    MAX_POSITION = 10\n    \n    def __init__(self):\n      self.position = 0\n\n# Print Player.MAX_POSITION  \nprint(Player.MAX_POSITION)   ## 10# Create a player p and print its MAX_POSITITON\np = Player()\nprint(p.MAX_POSITION)## 10class Player:\n    MAX_POSITION = 10\n    \n    def __init__(self):\n        self.position = 0\n\n    # Add a move() method with steps parameter     \n    def move(self, steps):\n        if self.position + steps < Player.MAX_POSITION:\n           self.position = self.position + steps \n        else:\n           self.position = Player.MAX_POSITION\n    \n    # This method provides a rudimentary visualization in the console    \n    def draw(self):\n        drawing = \"-\" * self.position + \"|\" +\"-\"*(Player.MAX_POSITION - self.position)\n        print(drawing)\n\np = Player(); p.draw()## |----------p.move(4); p.draw()## ----|------p.move(5); p.draw()## ---------|-p.move(3); p.draw()## ----------|"},{"path":"object-oriented-programming-in-python.html","id":"changing-class-attributes","chapter":"Object-Oriented Programming in Python","heading":"Changing class attributes","text":"\nlearned define class attributes access class instances. happen try assign another value class attribute accessing instance? answer simple might think!\n\nPlayer class previous exercise pre-defined. Recall position instance attribute, MAX_SPEED MAX_POSITION class attributes. initial value MAX_SPEED 3.\n\nCreate two Player objects p1 p2.\n\nPrint p1.MAX_SPEED p2.MAX_SPEED.\n\nAssign 7 p1.MAX_SPEED.\n\nPrint p1.MAX_SPEED p2.MAX_SPEED .\n\nPrint Player.MAX_SPEED.\n\nExamine output carefully.\n\nEven though MAX_SPEED shared across instances, assigning 7 p1.MAX_SPEED didn’t change value MAX_SPEED p2, Player class.\n\nhappened? fact, Python created new instance attribute p1, also called MAX_SPEED, assigned 7 , without touching class attribute.\n\nNow let’s change class attribute value real.\n\nModify assignment assign 7 Player.MAX_SPEED instead.\n\nobvious, right? makes sense, think ! shouldn’t able change data instances class single instance. Imagine change time computers world changing time computer! want change value class attribute runtime, need referring class name, instance.\n","code":"# edited/added\nclass Player:\n    MAX_POSITION = 10\n    MAX_SPEED = 3\n    \n    def __init__(self):\n        self.position = 0\n    # Add a move() method with steps parameter     \n    def move(self, steps):\n        if self.position + steps < Player.MAX_POSITION:\n           self.position = self.position + steps \n        else:\n           self.position = Player.MAX_POSITION\n    # This method provides a rudimentary visualization in the console    \n    def draw(self):\n        drawing = \"-\" * self.position + \"|\" +\"-\"*(Player.MAX_POSITION - self.position)\n        print(drawing)# Create Players p1 and p2\np1, p2 = Player(), Player()\n\nprint(\"MAX_SPEED of p1 and p2 before assignment:\")## MAX_SPEED of p1 and p2 before assignment:# Print p1.MAX_SPEED and p2.MAX_SPEED\nprint(p1.MAX_SPEED)## 3print(p2.MAX_SPEED)## 3# Assign 7 to p1.MAX_SPEED\np1.MAX_SPEED = 7\n\nprint(\"MAX_SPEED of p1 and p2 after assignment:\")\n# Print p1.MAX_SPEED and p2.MAX_SPEED## MAX_SPEED of p1 and p2 after assignment:print(p1.MAX_SPEED)## 7print(p2.MAX_SPEED)## 3print(\"MAX_SPEED of Player:\")## MAX_SPEED of Player:# Print Player.MAX_SPEED\nprint(Player.MAX_SPEED)## 3# Create Players p1 and p2\np1, p2 = Player(), Player()\n\nprint(\"MAX_SPEED of p1 and p2 before assignment:\")\n# Print p1.MAX_SPEED and p2.MAX_SPEED## MAX_SPEED of p1 and p2 before assignment:print(p1.MAX_SPEED)## 3print(p2.MAX_SPEED)\n\n# ---MODIFY THIS LINE---## 3Player.MAX_SPEED = 7\n\nprint(\"MAX_SPEED of p1 and p2 after assignment:\")\n# Print p1.MAX_SPEED and p2.MAX_SPEED## MAX_SPEED of p1 and p2 after assignment:print(p1.MAX_SPEED)## 7print(p2.MAX_SPEED)## 7print(\"MAX_SPEED of Player:\")\n# Print Player.MAX_SPEED## MAX_SPEED of Player:print(Player.MAX_SPEED)## 7"},{"path":"object-oriented-programming-in-python.html","id":"alternative-constructors","chapter":"Object-Oriented Programming in Python","heading":"Alternative constructors","text":"\nPython allows define class methods well, using 6 decorator special first argument cls. main use class methods defining methods return instance class, aren’t using code init().\n\nexample, developing time series package want define class working dates, BetterDate. attributes class year, month, day. want constructor creates BetterDate objects given values year, month, day, also want able create BetterDate objects strings like 2020-04-30.\n\nmight find following functions useful:\n\n.split(“-”) method split string “-” array, e.g. “2020-04-30”.split(“-”) returns [“2020”, “04”, “30”],\n\nint() convert string number, e.g. int(“2019”) 2019 .\n\nAdd class method from_str() :\n\naccepts string datestr format‘YYYY-MM-DD’,\n\nsplits datestr converts part integer,\n\nreturns instance class attributes set values extracted datestr.\n\ncompatibility, also want able convert datetime object BetterDate object.\n\nAdd class method from_datetime() accepts datetime object argument, uses attributes .year, .month .day create BetterDate object attribute values.\n\nGreat work class methods! ’s another type methods bound class instance - static methods, defined decorator 7. mainly used helper utility functions well live outside class, make sense bundled class. Static methods beyond scope class, can read .\n","code":"class BetterDate:\n    # Constructor\n    def __init__(self, year, month, day):\n      # Recall that Python allows multiple variable assignments in one line\n      self.year, self.month, self.day = year, month, day\n    \n    # Define a class method from_str\n    @classmethod\n    def from_str(cls, datestr):\n         # Split the string at \"-\" and  convert each part to integer\n        parts = datestr.split(\"-\")\n        year, month, day = int(parts[0]), int(parts[1]), int(parts[2])\n        # Return the class instance\n        return cls(year, month, day)\n        \nbd = BetterDate.from_str('2020-04-30')   \nprint(bd.year)## 2020print(bd.month)## 4print(bd.day)## 30# import datetime from datetime\nfrom datetime import datetime\n\nclass BetterDate:\n    def __init__(self, year, month, day):\n      self.year, self.month, self.day = year, month, day\n      \n    @classmethod\n    def from_str(cls, datestr):\n        year, month, day = map(int, datestr.split(\"-\"))\n        return cls(year, month, day)\n      \n    # Define a class method from_datetime accepting a datetime object\n    @classmethod\n    def from_datetime(cls, dateobj):\n      year, month, day = dateobj.year, dateobj.month, dateobj.day\n      return cls(year, month, day) \n\n\n# You should be able to run the code below with no errors: \ntoday = datetime.today()     \nbd = BetterDate.from_datetime(today)   \nprint(bd.year)## 2023print(bd.month)## 1print(bd.day)## 13"},{"path":"object-oriented-programming-in-python.html","id":"class-inheritance","chapter":"Object-Oriented Programming in Python","heading":"Class inheritance","text":"","code":""},{"path":"object-oriented-programming-in-python.html","id":"understanding-inheritance","chapter":"Object-Oriented Programming in Python","heading":"Understanding inheritance","text":"\nInheritance powerful tool object-oriented languages allows customize functionality existing classes without re-implement methods scratch.\n\nexercise ’ll check understanding basics inheritance. questions, ’ll make use following two classes:\n\n`\n\nClassify cards correct buckets. statements true false?\nTrue:\nInheritance represents -relationship.\n\nInheritance represents -relationship.\n\nRunning ind = Indexer() cause error.\n\nRunning ind = Indexer() cause error.\n\nClass Indexer inherited Counter.\n\nClass Indexer inherited Counter.\n\nind Indexer object, isinstance(ind, Counter) return True.\n\nind Indexer object, isinstance(ind, Counter) return True.\nFalse:\nEvery Counter object Indexer object.\n\nEvery Counter object Indexer object.\n\nind Indexer object, running ind.add_counts(5) cause error.\n\nind Indexer object, running ind.add_counts(5) cause error.\n\nInheritance can used add parts one class another class.\n\nInheritance can used add parts one class another class.\n\nGreat job, ’re pro! fact instances child class also instances parent class allows create consistent interfaces Alex mentioned video. place Counter go – example, argument function, able use Indexer instead methods attributes Counter.\n","code":"class Counter:\n    def __init__(self, count):\n       self.count = count\n\n    def add_counts(self, n):\n       self.count += n\n\nclass Indexer(Counter):\n   pass\n"},{"path":"object-oriented-programming-in-python.html","id":"create-a-subclass","chapter":"Object-Oriented Programming in Python","heading":"Create a subclass","text":"\npurpose child classes – sub-classes, usually called - customize extend functionality parent class.\n\nRecall Employee class earlier course. organizations, managers enjoy privileges responsibilities regular employee. make sense introduce Manager class functionality Employee.\n\nManager still employee, Manager class inherited Employee class.\n\nAdd empty Manager class inherited Employee.\n\nCreate object mng Manager class name Debbie Lashko salary 86500.\n\nPrint name mng.\n\nRemove pass statement add display() method Manager class just prints string “Manager” followed full name, e.g. “Manager Katie Flatcher”\n\nCall .display()method mnginstance.\n\nExcellent! already started customizing! Manager class now includes functionality wasn’t present original class (display() function) addition functionality Employee class. Notice wasn’t anything special adding new method.\n","code":"class Employee:\n  MIN_SALARY = 30000    \n\n  def __init__(self, name, salary=MIN_SALARY):\n      self.name = name\n      if salary >= Employee.MIN_SALARY:\n        self.salary = salary\n      else:\n        self.salary = Employee.MIN_SALARY\n        \n  def give_raise(self, amount):\n      self.salary += amount\n        \n# Define a new class Manager inheriting from Employee\nclass Manager(Employee):\n  pass\n\n# Define a Manager object\nmng = Manager(\"Debbie Lashko\", 86500)\n\n# Print mng's name\nprint(mng.name)## Debbie Lashkoclass Employee:\n  MIN_SALARY = 30000    \n\n  def __init__(self, name, salary=MIN_SALARY):\n      self.name = name\n      if salary >= Employee.MIN_SALARY:\n        self.salary = salary\n      else:\n        self.salary = Employee.MIN_SALARY\n        \n  def give_raise(self, amount):\n    self.salary += amount\n\n        \n# MODIFY Manager class and add a display method\nclass Manager(Employee):\n  def display(self):\n    print(\"Manager \", self.name)\n\n\nmng = Manager(\"Debbie Lashko\", 86500)\nprint(mng.name)## Debbie Lashko# Call mng.display()\nmng.display()## Manager  Debbie Lashko"},{"path":"object-oriented-programming-in-python.html","id":"customizing-functionality-via-inheritance","chapter":"Object-Oriented Programming in Python","heading":"Customizing functionality via inheritance","text":"","code":""},{"path":"object-oriented-programming-in-python.html","id":"method-inheritance","chapter":"Object-Oriented Programming in Python","heading":"Method inheritance","text":"\nInheritance powerful allows us reuse customize code without rewriting existing code. calling methods parent class within child class, reuse code methods, making code concise manageable.\n\nexercise, ’ll continue working Manager class inherited Employee class. ’ll add new data class, customize give_raise() method Chapter 1 increase manager’s raise amount bonus percentage whenever given raise.\n\nsimplified version Employee class, well beginning Manager class previous lesson provided script pane.\n\nAdd constructor Manager :\n\naccepts name, salary (default 50000), project (default None)\n\ncalls constructor Employee class name salary parameters,\n\ncreates project attribute sets project parameter.\n\nAdd give_raise() method Manager :\n\naccepts parameters Employee.give_raise(), plus bonus parameter default value 1.05 (bonus 5%),\n\nmultiplies amount bonus,\n\nuses Employee’s method raise salary product.\n\nGood work! new class, use default values ensured signature customized method compatible signature parent class. defined Manager‘s’give_raise() 2 non-optional parameters? result mngr.give_raise(1000)? Experiment console see can understand ’s happening. Adding print statements give_raise() help!\n","code":"class Employee:\n    def __init__(self, name, salary=30000):\n        self.name = name\n        self.salary = salary\n\n    def give_raise(self, amount):\n        self.salary += amount\n\n        \nclass Manager(Employee):\n  # Add a constructor \n    def __init__(self, name, salary=50000, project=None):\n        # Call the parent's constructor   \n        Employee.__init__(self, name, salary)\n\n        # Assign project attribute\n        self.project = project\n  \n    def display(self):\n        print(\"Manager \", self.name)class Employee:\n    def __init__(self, name, salary=30000):\n        self.name = name\n        self.salary = salary\n\n    def give_raise(self, amount):\n        self.salary += amount\n\n        \nclass Manager(Employee):\n    def display(self):\n        print(\"Manager \", self.name)\n\n    def __init__(self, name, salary=50000, project=None):\n        Employee.__init__(self, name, salary)\n        self.project = project\n\n    # Add a give_raise method\n    def give_raise(self, amount, bonus=1.05):\n        new_amount = amount * bonus\n        Employee.give_raise(self, new_amount)\n    \n    \nmngr = Manager(\"Ashta Dunbar\", 78500)\nmngr.give_raise(1000)\nprint(mngr.salary)## 79550.0mngr.give_raise(2000, bonus=1.03)\nprint(mngr.salary)## 81610.0"},{"path":"object-oriented-programming-in-python.html","id":"inheritance-of-class-attributes","chapter":"Object-Oriented Programming in Python","heading":"Inheritance of class attributes","text":"\nbeginning chapter, learned class attributes methods shared among instances class. work inheritance?\n\nexercise, ’ll create subclasses Player class first lesson chapter, explore inheritance class attributes methods.\n\nPlayer class defined . Recall Player class two class-level attributes: MAX_POSITION MAX_SPEED, default values 10 3.\n\nCreate class Racer inherited Player,\n\nAssign 5 MAX_SPEED body class.\n\nCreate Player object p Racer object r (arguments needed constructor).\n\nExamine printouts carefully. Next step quiz!\n\nfollowing statements inheritance class attributes correct?\nClass attributes inherited, new class attributes name CAN created child class.Class attributes inherited, new class attributes name created child class.Class attributes CAN inherited, value class attributes CAN overwritten child classClass attributes can inherited, value class attributes overwritten child class\nCorrect! notice value MAX_SPEED Player affected changes attribute name Racer.\n","code":"class Racer(Player):\n    MAX_SPEED = 5\n    \np = Player()\nr = Racer()\n\nprint(\"p.MAX_SPEED = \", p.MAX_SPEED)## p.MAX_SPEED =  7print(\"r.MAX_SPEED = \", r.MAX_SPEED)## r.MAX_SPEED =  5print(\"p.MAX_POSITION = \", p.MAX_POSITION)## p.MAX_POSITION =  10print(\"r.MAX_POSITION = \", r.MAX_POSITION)## r.MAX_POSITION =  10"},{"path":"object-oriented-programming-in-python.html","id":"customizing-a-dataframe","chapter":"Object-Oriented Programming in Python","heading":"Customizing a DataFrame","text":"\ncompany, data come timestamp recording dataset created, make sure outdated information used. like use pandas DataFrames processing data, need customize class allow use timestamps.\n\nexercise, implement small LoggedDF class inherits regular pandas DataFrame created_at attribute storing timestamp. augment standard to_csv() method always include column storing creation date.\n\nTip: DataFrame methods many parameters, sustainable copy method ’re customizing. trick use variable-length arguments *args **kwargsto catch .\n\nImport pandas pd.\n\nDefine LoggedDF class inherited pd.DataFrame.\n\nDefine constructor arguments *args **kwargs :\n\ncalls pd.DataFrame constructor arguments,\n\n\nassigns datetime.today() self.created_at.\n\n\ncalls pd.DataFrame constructor arguments,\n\nassigns datetime.today() self.created_at.\n\nAdd to_csv() method LoggedDF :\n\ncopies self temporary DataFrame using .copy(),\n\ncreates new column created_at temporary DataFrame fills self.created_at\n\ncalls pd.DataFrame.to_csv() temporary variable.\n\nIncredible work! Using *args **kwargs allows worry keeping signature customized method compatible. Notice last line, called parent method passed object isn’t self. call parent methods class, accept object first argument, object usually self, doesn’t !\n","code":"# Import pandas as pd\nimport pandas as pd\n\n# Define LoggedDF inherited from pd.DataFrame and add the constructor\nclass LoggedDF(pd.DataFrame):\n  \n  def __init__(self, *args, **kwargs):\n    pd.DataFrame.__init__(self, *args, **kwargs)\n    self.created_at = datetime.today()\n    \n    \nldf = LoggedDF({\"col1\": [1,2], \"col2\": [3,4]})\nprint(ldf.values)## [[1 3]\n##  [2 4]]print(ldf.created_at)## 2023-01-13 18:47:09.991438# Import pandas as pd\nimport pandas as pd\n\n# Define LoggedDF inherited from pd.DataFrame and add the constructor\nclass LoggedDF(pd.DataFrame):\n  \n  def __init__(self, *args, **kwargs):\n    pd.DataFrame.__init__(self, *args, **kwargs)\n    self.created_at = datetime.today()\n    \n  def to_csv(self, *args, **kwargs):\n    # Copy self to a temporary DataFrame\n    temp = self.copy()\n    \n    # Create a new column filled with self.created_at\n    temp[\"created_at\"] = self.created_at\n    \n    # Call pd.DataFrame.to_csv on temp, passing in *args and **kwargs\n    pd.DataFrame.to_csv(temp, *args, **kwargs)"},{"path":"object-oriented-programming-in-python.html","id":"integrating-with-standard-python","chapter":"Object-Oriented Programming in Python","heading":"Integrating with Standard Python","text":"\nchapter, ’ll learn make sure objects store data considered equal, define customize string representations objects, even create new error types. interactive exercises, ’ll learn customize classes make work like standard Python data types.\n","code":""},{"path":"object-oriented-programming-in-python.html","id":"operator-overloading-comparison","chapter":"Object-Oriented Programming in Python","heading":"Operator overloading: comparison","text":"","code":""},{"path":"object-oriented-programming-in-python.html","id":"overloading-equality","chapter":"Object-Oriented Programming in Python","heading":"Overloading equality","text":"\ncomparing two objects custom class using ==, Python default compares just object references, data contained objects. override behavior, class can implement special eq() method, accepts two arguments – objects compared – returns True False. method implicitly called two objects compared.\n\nBankAccount class previous chapter available script pane. one attribute, balance, withdraw() method. Two bank accounts balance necessarily account, bank account usually account number, two accounts account number considered .\n\nTry selecting code lines 1-7 pressing “Run code” button. try create BankAccount objects console compare .\n\nModify init() method accept new parameter - number - initialize new number attribute.\n\nDefine eq() method returns True number attribute two objects equal.\n\nExamine print statements output console.\n\nGreat job! Notice method compares just account numbers, balances. happen two accounts account number different balances? code wrote treat accounts equal, might better throw error - exception - instead, informing user something wrong. end chapter, ’ll learn define exception classes create kinds custom errors.\n","code":"class BankAccount:\n     # MODIFY to initialize a number attribute\n    def __init__(self, number, balance=0):\n        self.balance = balance\n        self.number = number\n      \n    def withdraw(self, amount):\n        self.balance -= amount \n\n    # Define __eq__ that returns True if the number attributes are equal \n    def __eq__(self, other):\n        return self.number == other.number    \n    \nacct1 = BankAccount(123, 1000)\nacct2 = BankAccount(123, 1000)\nacct3 = BankAccount(456, 1000)\nprint(acct1 == acct2)## Trueprint(acct1 == acct3)## False"},{"path":"object-oriented-programming-in-python.html","id":"checking-class-equality","chapter":"Object-Oriented Programming in Python","heading":"Checking class equality","text":"\nprevious exercise, defined BankAccount class number attribute used comparison. compare BankAccount object object another class also number attribute, end unexpected results.\n\nexample, consider two classes\n\nRunning acct == pn return True, even though ’re comparing phone number bank account number.\n\ngood practice check class objects passed eq() method make sure comparison makes sense.\n\nPhone BankAccount classes defined. Try running code -using “Run code” button examine output.\n\nModify definition BankAccount return True number attribute type() objects passed .\n\nRun code examine output .\n\nPerfect! Now comparing objects class BankAccount return True. Another way ensure object type expect use isinstance(obj, Class) function. can helpful handling inheritance, Python considers object instance parent child class.\nTry running pn == acct console (reversed order equality). tell eq() method?\n","code":"\nclass Phone:\n  def __init__(self, number):\n     self.number = number\n\n  def __eq__(self, other):\n    return self.number == \\\n          other.number\n\npn = Phone(873555333)\n\nclass BankAccount:\n  def __init__(self, number):\n     self.number = number\n\n  def __eq__(self, other):\n    return self.number == \\\n           other.number\n\nacct = BankAccount(873555333)\n# edited/added\nclass Phone:\n  def __init__(self, number):\n     self.number = number\n\n  def __eq__(self, other):\n    return self.number == \\\n          other.number\n\npn = Phone(873555333)\n\nclass BankAccount:\n    def __init__(self, number, balance=0):\n        self.number, self.balance = number, balance\n      \n    def withdraw(self, amount):\n        self.balance -= amount \n\n    # MODIFY to add a check for the type()\n    def __eq__(self, other):\n        return (self.number == other.number) and (type(self) == type(other))    \n\nacct = BankAccount(873555333)      \npn = Phone(873555333)\nprint(acct == pn)## False"},{"path":"object-oriented-programming-in-python.html","id":"comparison-and-inheritance","chapter":"Object-Oriented Programming in Python","heading":"Comparison and inheritance","text":"\nhappens object compared object child class? Consider following two classes:\n\nChild class inherits Parent class, implement eq() method includes diagnostic printout.\n\neq() method called following code run?\n\nFeel free experiment console – classes already defined .\nParent’s eq() method called.Child’s eq() method called.code cause error.\nCorrect! Python always calls child’s eq() method comparing child object parent object.\n","code":"class Parent:\n    def __eq__(self, other):\n        print(\"Parent's __eq__() called\")\n        return True\n\nclass Child(Parent):\n    def __eq__(self, other):\n        print(\"Child's __eq__() called\")\n        return True\np = Parent()\nc = Child()\n\np == c \n"},{"path":"object-oriented-programming-in-python.html","id":"operator-overloading-string-representation","chapter":"Object-Oriented Programming in Python","heading":"Operator overloading: string representation","text":"","code":""},{"path":"object-oriented-programming-in-python.html","id":"string-formatting-review","chapter":"Object-Oriented Programming in Python","heading":"String formatting review","text":"\nstart defining custom string representations objects, make sure comfortable working strings formatting . need refresher, take minute look official Python tutorial string formatting.\n\nexercise, consider following code\n\ndefinition f missing.\n\npossible variants definition f:\n\n1.\n\n\n2.\n\n\n3.\n\n\n4.\n\n\nPick definition f make code print exactly following:\n\none correct answer! Feel free use script pane console experiment.\n1234\nGreat work! recap: format string variables, can either use keyword arguments .format (‘Insert {n} ’.format(n=num)), refer position index explicitly (like ‘Insert {0} ’.format(num)) implicitly (like ‘Insert {} ’.format(num)). can use double quotation marks inside single quotation marks way around, nest set quotation marks, need escape slash like \".\n","code":"my_num = 5\nmy_str = \"Hello\"\n\nf = ...\nprint(f)\n\nf = \"my_num is {0}, and my_str is {1}.\".format(my_num, my_str)\n \nf = \"my_num is {}, and my_str is \\\"{}\\\".\".format(my_num, my_str)\n\nf = \"my_num is {n}, and my_str is '{s}'.\".format(n=my_num, s=my_str)\n\nf = \"my_num is {my_num}, and my_str is '{my_str}'.\".format()\nmy_num is 5, and my_str is \"Hello\".\n"},{"path":"object-oriented-programming-in-python.html","id":"string-representation-of-objects","chapter":"Object-Oriented Programming in Python","heading":"String representation of objects","text":"\ntwo special methods Python return string representation object. str() called use print() str() object, repr() called use repr() object, print object console without calling print(), instead str() str() defined.\n\nstr() supposed provide “user-friendly” output describing object, repr() return expression , evaluated, return object, ensuring reproducibility code.\n\nexercise, continue working Employee class Chapter 2.\n\nAdd str() method Employee satisfies following:\n\nemp Employee object name “Amar Howard” salary 40000, print(emp) outputs\n\nAdd repr() method Employee satisfies following:\n\nemp Employee object name “Amar Howard” salary 40000, repr(emp) outputs\n\nFantastic! always define least one string representation methods object make sure person using class can get important information object easily.\n","code":"Employee name: Amar Howard\nEmployee salary: 40000\nclass Employee:\n    def __init__(self, name, salary=30000):\n        self.name, self.salary = name, salary\n      \n    # Add the __str__() method\n    def __str__(self):\n        s = \"Employee name: {name}\\nEmployee salary: {salary}\".format(name=self.name, salary=self.salary)      \n        return s\n\nemp1 = Employee(\"Amar Howard\", 30000)\nprint(emp1)## Employee name: Amar Howard\n## Employee salary: 30000emp2 = Employee(\"Carolyn Ramirez\", 35000)\nprint(emp2)## Employee name: Carolyn Ramirez\n## Employee salary: 35000Employee(\"Amar Howard\", 40000)\nclass Employee:\n    def __init__(self, name, salary=30000):\n        self.name, self.salary = name, salary\n      \n\n    def __str__(self):\n        s = \"Employee name: {name}\\nEmployee salary: {salary}\".format(name=self.name, salary=self.salary)      \n        return s\n      \n    # Add the __repr__method  \n    def __repr__(self):\n        s = \"Employee(\\\"{name}\\\", {salary})\".format(name=self.name, salary=self.salary)      \n        return s      \n\nemp1 = Employee(\"Amar Howard\", 30000)\nprint(repr(emp1))## Employee(\"Amar Howard\", 30000)emp2 = Employee(\"Carolyn Ramirez\", 35000)\nprint(repr(emp2))## Employee(\"Carolyn Ramirez\", 35000)"},{"path":"object-oriented-programming-in-python.html","id":"exceptions","chapter":"Object-Oriented Programming in Python","heading":"Exceptions","text":"","code":""},{"path":"object-oriented-programming-in-python.html","id":"catching-exceptions","chapter":"Object-Oriented Programming in Python","heading":"Catching exceptions","text":"\nstart writing custom exceptions, let’s make sure basics handling exceptions .\n\nexercise, given function invert_at_index(x, ind) takes two arguments, list x index ind, inverts element list index. example invert_at_index([5,6,7], 1) returns 1/6, 0.166666 .\n\nTry running code -examine output console. two unsafe operations function: first, element ’re trying invert value 0, code cause ZeroDivisionError exception. Second, index passed function range list, code cause IndexError. cases, script interrupted, might desirable.\n\nUse try - except - except pattern (two except blocks) inside function catch handle two exceptions follows:\n\ntry executing code -,\n\nZeroDivisionError occurs, print “divide zero!”,\n\nIndexError occurs, print “Index range!”\n\nknow got right code runs without errors, output console :\n\nGreat job! course, toy example illustrate structure: can much except block just print message. example, might make sense function return special value error occurs. ’s important note, though, code able handle two particular errors specified except blocks. error still terminate program.\n","code":"0.16666666666666666\nCannot divide by zero!\nNone\nIndex out of range!\nNone\n# MODIFY the function to catch exceptions\ndef invert_at_index(x, ind):\n  try:\n    return 1/x[ind]\n  except ZeroDivisionError:\n    print(\"Cannot divide by zero!\")\n  except IndexError:\n    print(\"Index out of range!\")\n \na = [5,6,0,7]\n\n# Works okay\nprint(invert_at_index(a, 1))## 0.16666666666666666# Potential ZeroDivisionError\nprint(invert_at_index(a, 2))\n\n# Potential IndexError## Cannot divide by zero!\n## Noneprint(invert_at_index(a, 5))## Index out of range!\n## None"},{"path":"object-oriented-programming-in-python.html","id":"custom-exceptions","chapter":"Object-Oriented Programming in Python","heading":"Custom exceptions","text":"\ndon’t rely solely built-exceptions like IndexError: can define exceptions specific application. can also define exception hierarchies. need define exception class inherited built-Exception class one subclasses.\n\nChapter 1, defined Employee class used print statements default values handle errors like creating employee salary minimum giving raise big. better way handle situation use exceptions. errors specific application (unlike, example, division zero error universal), makes sense use custom exception classes.\n\nDefine empty class SalaryError inherited built-ValueError class.\n\nDefine empty class BonusError inherited SalaryError class.\n\nComplete definition init() raise SalaryError message “Salary low!” salary parameter less MIN_SALARY class attribute.\n\n’s need else raise terminates program anyway.\n\nExamine give_bonus() method, rewrite using exceptions instead print statements:\n\nraise BonusError bonus amount high;\n\nraise SalaryError result adding bonus low.\n\nWonderful! Notice raise exception inside statement, don’t need add else branch run rest code. raise terminates function, code raise executed exception occur.\n","code":"# Define SalaryError inherited from ValueError\nclass SalaryError(ValueError): pass\n\n# Define BonusError inherited from SalaryError\nclass BonusError(SalaryError): passclass SalaryError(ValueError): pass\nclass BonusError(SalaryError): pass\n\nclass Employee:\n  MIN_SALARY = 30000\n  MAX_RAISE = 5000\n\n  def __init__(self, name, salary = 30000):\n    self.name = name\n    \n    # If salary is too low\n    if salary < Employee.MIN_SALARY:\n      # Raise a SalaryError exception\n      raise SalaryError(\"Salary is too low!\")\n      \n    self.salary = salaryclass SalaryError(ValueError): pass\nclass BonusError(SalaryError): pass\n\nclass Employee:\n  MIN_SALARY = 30000\n  MAX_BONUS = 5000\n\n  def __init__(self, name, salary = 30000):\n    self.name = name    \n    if salary < Employee.MIN_SALARY:\n      raise SalaryError(\"Salary is too low!\")      \n    self.salary = salary\n    \n  # Rewrite using exceptions  \n  def give_bonus(self, amount):\n    if amount > Employee.MAX_BONUS:\n       raise BonusError(\"The bonus amount is too high!\")\n        \n    if self.salary + amount <  Employee.MIN_SALARY:\n       raise SalaryError(\"The salary after bonus is too low!\")\n      \n    self.salary += amount"},{"path":"object-oriented-programming-in-python.html","id":"handling-exception-hierarchies","chapter":"Object-Oriented Programming in Python","heading":"Handling exception hierarchies","text":"\nPreviously, defined Employee class method get_bonus() raises BonusError SalaryError depending parameters. BonusError exception inherited SalaryError exception. exception inheritance affect exception handling?\n\nEmployee class defined . minimal salary 30000 maximal bonus amount 5000.\n\nExperiment following code\n\nselect statement TRUE handling parent/child exception classes:\nexcept block parent exception catch child exceptionsexcept block parent exception catch child exceptions\nExperiment two pieces code:\n\n(one catches BonusError SalaryError, -SalaryError BonusError)\n\nSelect statement TRUE order except blocks:\norder except blocks doesn’t matter: result .’s better include except block parent exception block child exception ensure general exception handled first.’s better include except block child exception block parent exception, otherwise child exceptions always caught parent block, except block child never executed.\nExactly! ’s better list except blocks increasing order specificity, .e. children parents, otherwise child exception called parent except block.\n","code":"emp = Employee(\"Katze Rik\", salary=50000)\ntry:\n  emp.give_bonus(7000)\nexcept SalaryError:\n  print(\"SalaryError caught!\")\n\ntry:\n  emp.give_bonus(7000)\nexcept BonusError:\n  print(\"BonusError caught!\")\n\ntry:\n  emp.give_bonus(-100000)\nexcept SalaryError:\n  print(\"SalaryError caught again!\")\n\ntry:\n  emp.give_bonus(-100000)\nexcept BonusError:\n  print(\"BonusError caught again!\")  \n\nemp = Employee(\"Katze Rik\",\\\n                    50000)\ntry:\n  emp.give_bonus(7000)\nexcept SalaryError:\n  print(\"SalaryError caught\")\nexcept BonusError:\n  print(\"BonusError caught\")\n      \nemp = Employee(\"Katze Rik\",\\\n                    50000)\ntry:\n  emp.give_bonus(7000)\nexcept BonusError:\n  print(\"BonusError caught\")\nexcept SalaryError:\n  print(\"SalaryError caught\")\n      "},{"path":"object-oriented-programming-in-python.html","id":"best-practices-of-class-design","chapter":"Object-Oriented Programming in Python","heading":"Best Practices of Class Design","text":"\ndesign classes inheritance? Python private attributes? possible control attribute access? ’ll find answers questions () learn class design best practices.\n","code":""},{"path":"object-oriented-programming-in-python.html","id":"designing-for-inheritance-and-polymorphism","chapter":"Object-Oriented Programming in Python","heading":"Designing for inheritance and polymorphism","text":"","code":""},{"path":"object-oriented-programming-in-python.html","id":"polymorphic-methods","chapter":"Object-Oriented Programming in Python","heading":"Polymorphic methods","text":"\ndesign classes effectively, need understand inheritance polymorphism work together.\n\nexercise, three classes - one parent two children - talk() method. Analyze following code:\n\noutput code ?\n\nable complete exercise just reading code, without running console!\n1234Code causes error\nGreat job! Polymorphism ensures exact method called determined dynamically based instance. think happen Child implement talk()?\n","code":"class Parent:\n    def talk(self):\n        print(\"Parent talking!\")     \n\nclass Child(Parent):\n    def talk(self):\n        print(\"Child talking!\")          \n\nclass TalkativeChild(Parent):\n    def talk(self):\n        print(\"TalkativeChild talking!\")\n        Parent.talk(self)\n\n\np, c, tc = Parent(), Child(), TalkativeChild()\n\nfor obj in (p, c, tc):\n    obj.talk()\n\nParent talking!\nParent talking!\nParent talking!      \n\n  \nParent talking!\nChild talking!\nTalkative Child talking!     \n      \n  \nParent talking!\nChild talking!\nParent talking! \nTalkative Child talking!\nParent talking!      \n      \n\nParent talking!\nChild talking!\nTalkative Child talking!\nParent talking!      \n\n  "},{"path":"object-oriented-programming-in-python.html","id":"square-and-rectangle","chapter":"Object-Oriented Programming in Python","heading":"Square and rectangle","text":"\nclassic example problem violates Liskov Substitution Principle Circle-Ellipse problem, sometimes called Square-Rectangle problem.\n\nmeans, seems like able define class Rectangle, attributes h w (height width), define class Square inherits Rectangle. , square “-” rectangle!\n\nUnfortunately, intuition doesn’t apply object-oriented design.\n\nCreate class Rectangle constructor accepts two parameters, h w, sets h w attributes values h w.\n\nCreate class Square inherited Rectangle constructor accepts one parameter w, sets h w attributes value w.\n\nclasses defined . Experiment console.\n\nexample, console script pane, create Square object side length 4. try assigning 7 h attribute.\n\nwent wrong classes?\nwasn’t correct use inheritance: call parent constructor child constructor.set h attribute 7 Square object cause error.4x4 Square object longer square assign 7 h.Square one side length, h attribute. included h attribute constructor..\nSquare inherited Rectangle always h w attributes, can’t allow change independently .\n\nDefine methods set_h() set_w() Rectangle, accepting one parameter setting h w.\n\nDefine methods set_h() set_w() Square, accepting one parameter, setting h w parameter methods.\n\nLater chapter ’ll learn make setter methods run automatically attributes assigned new values, don’t worry now, just assume assign value h square, now w attribute changed accordingly.\n\nusing setter methods violate Liskov Substitution principle?\nsyntactic inconsistencies.setter methods Square change h w attributes, setter methods Rectangle change one attribute time, Square objects substituted Rectangle programs rely one attribute staying constant.setter methods Square accept limited range parameters, unlike setter methods Rectangle, Square objects substituted Rectangle programs use parameter values outside range..\nCorrect! Remember substitution principle requires substitution preserve oversall state program. example program fail substitution made unit test setter functions Rectangle class.\n","code":"# Define a Rectangle class\nclass Rectangle:\n    def __init__(self, h, w):\n      self.h, self.w = h, w\n\n# Define a Square class\nclass Square(Rectangle):\n    def __init__(self, w):\n      self.h, self.w = w, wclass Rectangle:\n    def __init__(self, w,h):\n      self.w, self.h = w,h\n      \n# Define set_h to set h       \n    def set_h(self, h):\n      self.h = h\n\n# Define set_w to set w\n    def set_w(self, w):\n      self.w = w   \n      \nclass Square(Rectangle):\n    def __init__(self, w):\n      self.w, self.h = w, w \n      \n# Define set_h to set w and h \n    def set_h(self, h):\n      self.h = h\n      self.w = h\n      \n# Define set_w to set w and h \n    def set_w(self, w):\n      self.w = w   \n      self.h = w"},{"path":"object-oriented-programming-in-python.html","id":"managing-data-access-private-attributes","chapter":"Object-Oriented Programming in Python","heading":"Managing data access: private attributes","text":"","code":""},{"path":"object-oriented-programming-in-python.html","id":"attribute-naming-conventions","chapter":"Object-Oriented Programming in Python","heading":"Attribute naming conventions","text":"\nPython, data public. Instead access modifiers common languages like Java, Python uses naming conventions communicate developer’s intention class users, shifting responsibility safe class use onto class user.\n\nPython uses underscores extensively signal purpose methods attributes. exercise, match use case appropriate naming convention.\n\nDrag cards bucket representing appropriate naming convention use case.\n_name: helper method checks validity attribute’s value isn’t considered part class’s public interface__name: ‘version’ attribute stores current version class shouldn’t passed child classes, versions.__name__: method run whenever object printed\nGreat job! single leading underscore convention internal details implementation. Double leading underscores used attributes inherited aviod name clashes child classes. Finally, leading trailing double underscores reserved built-methods.\n","code":""},{"path":"object-oriented-programming-in-python.html","id":"using-internal-attributes","chapter":"Object-Oriented Programming in Python","heading":"Using internal attributes","text":"\nexercise, ’ll return BetterDate class Chapter 2. date class better use sensible convention exactly 30 days month.\n\ndecide add method checks validity date, don’t want make part BetterDate’s public interface.\n\nclass BetterDate available script pane.\n\nAdd class attribute _MAX_DAYS storing maximal number days month - 30.\n\nAdd another class attribute storing maximal number months year - 12. Use appropriate naming convention indicate internal attribute.\n\nAdd _is_valid() method returns True day month attributes less equal corresponding maximum values, False otherwise. Make sure refer class attributes names!\n\nGreat job! Notice still able use _is_valid() method usual. single underscore naming convention purely convention, Python doesn’t anything special attributes methods behind scenes. convention widely followed, though, see attribute name one leading underscore someone’s class - don’t use ! class developer trusts responsibility.\n","code":"# Add class attributes for max number of days and months\nclass BetterDate:\n    _MAX_DAYS = 30\n    _MAX_MONTHS = 12\n    \n    def __init__(self, year, month, day):\n        self.year, self.month, self.day = year, month, day\n        \n    @classmethod\n    def from_str(cls, datestr):\n        year, month, day = map(int, datestr.split(\"-\"))\n        return cls(year, month, day)\n        \n    # Add _is_valid() checking day and month values\n    def _is_valid(self):\n        return (self.day <= BetterDate._MAX_DAYS) and \\\n               (self.month <= BetterDate._MAX_MONTHS)\n        \nbd1 = BetterDate(2020, 4, 30)\nprint(bd1._is_valid())## Truebd2 = BetterDate(2020, 6, 45)\nprint(bd2._is_valid())## False"},{"path":"object-oriented-programming-in-python.html","id":"properties","chapter":"Object-Oriented Programming in Python","heading":"Properties","text":"","code":""},{"path":"object-oriented-programming-in-python.html","id":"what-do-properties-do","chapter":"Object-Oriented Programming in Python","heading":"What do properties do?","text":"\nthink properties attributes built-access control. especially useful additional code ’d like execute assigning values attributes.\n\nfollowing statements TRUE properties?\nProperties can used implement “read-” attributesProperties can prevent creation new attributes via assignmentProperties can accessed using dot syntax just like regular attributesProperties allow validation values assigned \nstatement indeed true! Properties control one specific attribute ’re attached . ways prevent creating new attributes, go “’re adults ” principle.\n","code":""},{"path":"object-oriented-programming-in-python.html","id":"create-and-set-properties","chapter":"Object-Oriented Programming in Python","heading":"Create and set properties","text":"\ntwo parts defining property:\n\nfirst, define “internal” attribute contain data;\n\n, define 8-decorated method whose name property name, returns internal attribute storing data.\n\n’d also like define custom setter method, ’s additional step:\n\ndefine another method whose name exactly property name (), decorate 9 prop_name name property. method take two arguments – self (always), value ’s assigned property.\n\nexercise, ’ll create balance property Customer class - better, controlled version balance attribute worked .\n\nCreate Customer class init() method :\n\ntakes parameters name new_bal,\n\nassigns name attribute name,\n\nraises ValueError new_bal negative,\n\notherwise, assigns new_bal attribute balance ().\n\nAdd method balance() 10 decorator returns _balance attribute.\n\nDefine another balance() method serve setter, appropriate decorator additional parameter:\n\nRaise ValueError parameter negative,\n\notherwise assign _balance ;\n\nprint “Setter method called”.\n\nCreate Customer named Belinda Lutz balance 2000 save cust.\n\nUse dot syntax = assign 3000 cust.balance.\n\nPrint cust.balance.\n\nconsole, try assigning -1000 cust.balance. happens?\n\nGreat start! Now user Customer class won’t able assign arbitrary values customers’ balance. also add custom getter method (decorator 11) returns value gets executed every time attribute accessed.\n","code":"# Create a Customer class\nclass Customer:\n    def __init__(self, name, new_bal):\n        self.name = name\n        if new_bal < 0:\n           raise ValueError(\"Invalid balance!\")\n        self._balance = new_balclass Customer:\n    def __init__(self, name, new_bal):\n        self.name = name\n        if new_bal < 0:\n           raise ValueError(\"Invalid balance!\")\n        self._balance = new_bal  \n\n    # Add a decorated balance() method returning _balance        \n    @property\n    def balance(self):\n        return self._balanceclass Customer:\n    def __init__(self, name, new_bal):\n        self.name = name\n        if new_bal < 0:\n           raise ValueError(\"Invalid balance!\")\n        self._balance = new_bal  \n\n    # Add a decorated balance() method returning _balance        \n    @property\n    def balance(self):\n        return self._balance\n\n    # Add a setter balance() method\n    @balance.setter\n    def balance(self, new_bal):\n        # Validate the parameter value\n        if new_bal < 0:\n           raise ValueError(\"Invalid balance!\")\n        self._balance = new_bal\n        \n        # Print \"Setter method is called\"\n        print(\"Setter method is called\")class Customer:\n    def __init__(self, name, new_bal):\n        self.name = name\n        if new_bal < 0:\n           raise ValueError(\"Invalid balance!\")\n        self._balance = new_bal  \n\n    # Add a decorated balance() method returning _balance        \n    @property\n    def balance(self):\n        return self._balance\n\n    # Add a setter balance() method\n    @balance.setter\n    def balance(self, new_bal):\n        # Validate the parameter value\n        if new_bal < 0:\n           raise ValueError(\"Invalid balance!\")\n        self._balance = new_bal\n        print(\"Setter method called\")\n        \n# Create a Customer        \ncust = Customer(\"Belinda Lutz\", 2000)\n\n# Assign 3000 to the balance property\ncust.balance = 3000## Setter method called# Print the balance property\nprint(cust.balance)## 3000"},{"path":"object-oriented-programming-in-python.html","id":"read-only-properties","chapter":"Object-Oriented Programming in Python","heading":"Read-only properties","text":"\nLoggedDF class Chapter 2 extension pandas DataFrame class additional created_at attribute stored timestamp DataFrame created, user see --date data .\n\nclass wasn’t useful: just assign value created_at DataFrame created, thus defeating whole point attribute! Now, using properties, can make attribute read-.\n\nLoggedDF class Chapter 2 available script pane.\n\nAssign new value ‘2035-07-13’ created_at attribute.\n\nPrint value ldf’s created_at attribute verify assignment successful.\n\nCreate internal attribute called _created_at turn created_at read-attribute.\n\nModify class use internal attribute, _created_at, place created_at.\n\nhappens assign ‘2035-07-13’ ldf.created_at?\ncreated_at attribute ldf updated ‘2035-07-13’.AttributeError thrown since ‘2035-07-13’ valid date.AttributeError thrown since created_at attribute doesn’t exist.AttributeError thrown since ldf.created_at read-.\n’ve put together! Notice to_csv() method original class using original created_at attribute. converting attribute property, replace call self.created_at call internal attribute ’s attached property, keep self.created_at, case ’ll now accessing property. Either way works!\n","code":"import pandas as pd\nfrom datetime import datetime\n\n# LoggedDF class definition from Chapter 2\nclass LoggedDF(pd.DataFrame):\n    def __init__(self, *args, **kwargs):\n        pd.DataFrame.__init__(self, *args, **kwargs)\n        self.created_at = datetime.today()\n\n    def to_csv(self, *args, **kwargs):\n        temp = self.copy()\n        temp[\"created_at\"] = self.created_at\n        pd.DataFrame.to_csv(temp, *args, **kwargs)   \n\n# Instantiate a LoggedDF called ldf\nldf = LoggedDF({\"col1\": [1,2], \"col2\":[3,4]})\n\n# Assign a new value to ldf's created_at attribute and print\nldf.created_at = '2035-07-13'\nprint(ldf.created_at)## 2035-07-13import pandas as pd\nfrom datetime import datetime\n\n# MODIFY the class to use _created_at instead of created_at\nclass LoggedDF(pd.DataFrame):\n    def __init__(self, *args, **kwargs):\n        pd.DataFrame.__init__(self, *args, **kwargs)\n        self._created_at = datetime.today()\n    \n    def to_csv(self, *args, **kwargs):\n        temp = self.copy()\n        temp[\"created_at\"] = self._created_at\n        pd.DataFrame.to_csv(temp, *args, **kwargs)   \n    \n    # Add a read-only property: _created_at\n    @property  \n    def created_at(self):\n        return self._created_at\n\n# Instantiate a LoggedDF called ldf\nldf = LoggedDF({\"col1\": [1,2], \"col2\":[3,4]}) "},{"path":"object-oriented-programming-in-python.html","id":"congratulations-5","chapter":"Object-Oriented Programming in Python","heading":"Congratulations!","text":"","code":""},{"path":"object-oriented-programming-in-python.html","id":"congratulations-6","chapter":"Object-Oriented Programming in Python","heading":"Congratulations!","text":"Congratulations completing course introduction object-oriented programming Python. ’ve done great job!","code":""},{"path":"object-oriented-programming-in-python.html","id":"overview","chapter":"Object-Oriented Programming in Python","heading":"Overview","text":"learned think code terms classes objects; create attributes methods. explored inheritance polymorphism – two ideas allows leverage customize existing code powerful ways. also learned distinction class-level data instance-level data. mean two objects equal? Turns , can mean anything want, learned chapter 3. defined custom equality functions, readable string representations, even built exceptions. Finally, learned makes relationship classes suitable inheritance, Python handles private vs public data, use properties manage data access.","code":""},{"path":"object-oriented-programming-in-python.html","id":"whats-next","chapter":"Object-Oriented Programming in Python","heading":"What’s next?","text":", can go ? start expanding knowledge functionality available Python. example, learn mix-classes multiple inheritance – highly debated feature Python isn’t present many object-oriented languages. learn override built-operators, like arithmetic operators, length operator; customize attribute access even using special methods; create iterator classes use index loops. learn abstract base classes used create interfaces, leverage dataclasses – new type class especially suitable data storage.","code":""},{"path":"object-oriented-programming-in-python.html","id":"whats-next-1","chapter":"Object-Oriented Programming in Python","heading":"What’s next?","text":"Also consider learning object-oriented design, based SOLID principles. Solid acronym, ’ve already learned “L” SOLID – Liskov substitution principle, 4 letters just important. Finally, encourage learn design patterns – reusable solutions addressing common problems software design.","code":""},{"path":"object-oriented-programming-in-python.html","id":"thank-you-1","chapter":"Object-Oriented Programming in Python","heading":"Thank you!","text":"Thank much taking course, good luck future coding adventures!","code":""}]
