[{"path":"index.html","id":"run-the-codes","chapter":"Run the Codes","heading":"Run the Codes","text":"See list packages Python","code":""},{"path":"introduction-to-python.html","id":"introduction-to-python","chapter":"Introduction to Python","heading":"Introduction to Python","text":"\nPython general-purpose programming language becoming ever popular data science. Companies worldwide using Python harvest insights data gain competitive edge. Unlike Python tutorials, course focuses Python specifically data science. Introduction Python course, ’ll learn powerful ways store manipulate data, helpful data science tools begin conducting analyses. Start DataCamp’s online Python curriculum now.\n","code":""},{"path":"introduction-to-python.html","id":"python-basics","chapter":"Introduction to Python","heading":"Python Basics","text":"\nintroduction basic concepts Python. Learn use Python interactively using script. Create first variables acquaint Python’s basic data types.\n","code":""},{"path":"introduction-to-python.html","id":"hello-python","chapter":"Introduction to Python","heading":"Hello Python!","text":"","code":""},{"path":"introduction-to-python.html","id":"the-python-interface","chapter":"Introduction to Python","heading":"The Python Interface","text":"\nPython script right, can type Python code solve exercises. hit Run Code Submit Answer, python script (script.py) executed output shown IPython Shell. Submit Answer checks whether submission correct gives feedback.\n\ncan hit Run Code Submit Answer often want. ’re stuck, can click Get Hint, ultimately Get Solution.\n\ncan also use IPython Shell interactively simply typing commands hitting Enter. work shell directly, code checked correctness great way experiment.\n\nExperiment IPython Shell; type 5 / 8, example.\n\nAdd another line code Python script top-right (Shell): print(7 + 10).\n\nHit Submit Answer execute Python script receive feedback.\n\nGreat! next one!\n","code":"# Example, do not modify!\nprint(5 / 8)## 0.625# Put code below here\nprint(7 + 10)## 17"},{"path":"introduction-to-python.html","id":"when-to-use-python","chapter":"Introduction to Python","heading":"When to use Python?","text":"\nPython pretty versatile language. applications can use Python?\nwant quick calculations.new business, want develop database-driven website.boss asks clean analyze results latest satisfaction survey..\nCorrect! Python extremely versatile language.\n","code":""},{"path":"introduction-to-python.html","id":"any-comments","chapter":"Introduction to Python","heading":"Any comments?","text":"\nSomething Hugo didn’t mention videos can add comments Python scripts. Comments important make sure others can understand code .\n\nadd comments Python script, can use # tag. comments run Python code, influence result. example, take comment editor, # Division; completely ignored execution.\n\nprint(7 + 10), add comment\n\nGreat!\n","code":"# Addition\n# Division\nprint(5 / 8)## 0.625# Addition\nprint(7 + 10)## 17"},{"path":"introduction-to-python.html","id":"python-as-a-calculator","chapter":"Introduction to Python","heading":"Python as a calculator","text":"\nPython perfectly suited basic calculations. Apart addition, subtraction, multiplication division, also support advanced operations :\n\nExponentiation: **. operator raises number left power number right. example 4**2 give 16.\n\nModulo: %. operator returns remainder division number left number right. example 18 % 7 equals 4.\n\ncode script gives examples.\n\nSuppose $100, can invest 10% return year. one year, ’s \\(100 \\times 1.1 = 110\\) dollars, two years ’s \\(100 \\times 1.1 \\times 1.1 = 121\\). Add code calculate much money end 7 years, print result.\n\nTime another video!\n","code":"# Addition, subtraction\nprint(5 + 5)## 10print(5 - 5)## 0# Multiplication, division, modulo, and exponentiation\nprint(3 * 5)## 15print(10 / 2)## 5.0print(18 % 7)## 4print(4 ** 2)## 16# How much is your $100 worth after 7 years?\nprint(100 * 1.1 ** 7)## 194.87171000000012"},{"path":"introduction-to-python.html","id":"variables-and-types","chapter":"Introduction to Python","heading":"Variables and Types","text":"","code":""},{"path":"introduction-to-python.html","id":"variable-assignment","chapter":"Introduction to Python","heading":"Variable Assignment","text":"\nPython, variable allows refer value name. create variable use =, like example:\n\ncan now use name variable, x, instead actual value, 5.\n\nRemember, = Python means assignment, doesn’t test equality!\n\nCreate variable savings value 100.\n\nCheck variable typing print(savings) script.\n\nGreat! Let’s try calculations variable now!\n","code":"x = 5\n# Create a variable savings\nsavings = 100\n\n# Print out savings\nprint(savings)## 100"},{"path":"introduction-to-python.html","id":"calculations-with-variables","chapter":"Introduction to Python","heading":"Calculations with variables","text":"\nRemember calculated money ended 7 years investing $100? something like :\n\nInstead calculating actual values, can use variables instead. savings variable ’ve created previous exercise represents $100 started . ’s create new variable represent 1.1 redo calculations!\n\nCreate variable growth_multiplier, equal 1.1.\n\nCreate variable, result, equal amount money saved 7 years.\n\nPrint value result.\n\nGreat!\n","code":"100 * 1.1 ** 7\n# Create a variable growth_multiplier\ngrowth_multiplier = 1.1\n\n# Calculate result\nresult = savings * growth_multiplier ** 7\n\n# Print out result\nprint(result)## 194.87171000000012"},{"path":"introduction-to-python.html","id":"other-variable-types","chapter":"Introduction to Python","heading":"Other variable types","text":"\nprevious exercise, worked two Python data types:\n\nint, integer: number without fractional part. savings, value 100, example integer.\n\nfloat, floating point: number integer fractional part, separated point. growth_multiplier, value 1.1, example float.\n\nNext numerical data types, two common data types:\n\nstr, string: type represent text. can use single double quotes build string.\n\nbool, boolean: type represent logical values. Can True False (capitalization important!).\n\nCreate new string, desc, value “compound interest”.\n\nCreate new boolean, profitable, value True.\n\nNice!\n","code":"# Create a variable desc\ndesc = \"compound interest\"\n\n# Create a variable profitable\nprofitable = True"},{"path":"introduction-to-python.html","id":"guess-the-type","chapter":"Introduction to Python","heading":"Guess the type","text":"\nfind type value variable refers value, can use type() function. Suppose ’ve defined variable , forgot type variable. determine type , simply execute:\n\nalready went ahead created three variables: , b c. can use IPython shell discover type. following options correct?\ntype int, b type str, c type boola type float, b type bool, c type stra type float, b type str, c type boola type int, b type bool, c type str\nCorrecto perfecto!\n","code":"type(a)\n# edited/added\na=194.87171000000012\nb='True'type(a)## <class 'float'>type(b)## <class 'str'>"},{"path":"introduction-to-python.html","id":"operations-with-other-types","chapter":"Introduction to Python","heading":"Operations with other types","text":"\nHugo mentioned different types behave differently Python.\n\nsum two strings, example, ’ll get different behavior sum two integers two booleans.\n\nscript variables different types already created. ’s use .\n\nCalculate product savings growth_multiplier. Store result year1.\n\nthink resulting type ? Find printing type year1.\n\nCalculate sum desc desc store result new variable doubledesc.\n\nPrint doubledesc. expect ?\n\nNice. Notice desc + desc causes “compound interest” “compound interest” pasted together.\n","code":"# edited/added\nsavings = 100\ngrowth_multiplier = 1.1\ndesc = \"compound interest\"\n\n# Assign product of savings and growth_multiplier to year1\nyear1 = savings * growth_multiplier\n\n# Print the type of year1\nprint(type(year1))## <class 'float'># Assign sum of desc and desc to doubledesc\ndoubledesc = desc + desc\n\n# Print out doubledesc\nprint(doubledesc)## compound interestcompound interest"},{"path":"introduction-to-python.html","id":"type-conversion","chapter":"Introduction to Python","heading":"Type conversion","text":"\nUsing + operator paste together two strings can useful building custom messages.\n\nSuppose, example, ’ve calculated return investment want summarize results string. Assuming integer savings float result defined, can try something like :\n\nwork, though, simply sum strings integers/floats.\n\nfix error, ’ll need explicitly convert types variables. specifically, ’ll need str(), convert value string. str(savings), example, convert integer savings string.\n\nSimilar functions int(), float() bool() help convert Python values type.\n\nHit Run Code run code. Try understand error message.\n\nFix code printout runs without errors; use function str() convert variables strings.\n\nConvert variable pi_string float store float new variable, pi_float.\n\nGreat! profit around $95; ’s pretty awesome indeed!\n","code":"print(\"I started with $\" + savings + \" and now have $\" + result + \". Awesome!\")\n# Definition of savings and result\nsavings = 100\nresult = 100 * 1.10 ** 7\n\n# Fix the printout\n#print(\"I started with $\" + savings + \" and now have $\" + result + \". Awesome!\")\n\n# Definition of savings and result\nsavings = 100\nresult = 100 * 1.10 ** 7\n\n# Fix the printout\nprint(\"I started with $\" + str(savings) + \" and now have $\" + str(result) + \". Awesome!\")## I started with $100 and now have $194.87171000000012. Awesome!# Definition of pi_string\npi_string = \"3.1415926\"\n\n# Convert pi_string into float: pi_float\npi_float = float(pi_string)"},{"path":"introduction-to-python.html","id":"can-python-handle-everything","chapter":"Introduction to Python","heading":"Can Python handle everything?","text":"\nNow know something combining different sources information, look four Python expressions .\none throw error? can always copy paste code IPython Shell find !\n“can add integers, like” + str(5) + ” strings.”“said” + (“Hey” * 2) + “Hey!”“correct answer multiple choice exercise answer number” + 2True + False\nCorrect! ’re converting 2 string str(), give error.\n","code":""},{"path":"introduction-to-python.html","id":"python-lists","chapter":"Introduction to Python","heading":"Python Lists","text":"\nLearn store, access, manipulate data lists: first step toward efficiently working huge amounts data.\n","code":""},{"path":"introduction-to-python.html","id":"python-lists-1","chapter":"Introduction to Python","heading":"Python Lists","text":"","code":""},{"path":"introduction-to-python.html","id":"create-a-list","chapter":"Introduction to Python","heading":"Create a list","text":"\nopposed int, bool etc., list compound data type; can group values together:\n\nmeasuring height family, decide collect information house ’re living . areas different parts house stored separate variables now, shown script.\n\nCreate list, areas, contains area hallway (hall), kitchen (kit), living room (liv), bedroom (bed) bathroom (bath), order. Use predefined variables.\n\nPrint areas print() function.\n\nNice! list way better , isn’t ?\n","code":"a = \"is\"\nb = \"nice\"\nmy_list = [\"my\", \"list\", a, b]\n# Area variables (in square meters)\nhall = 11.25\nkit = 18.0\nliv = 20.0\nbed = 10.75\nbath = 9.50\n\n# Create list areas\nareas = [hall, kit, liv, bed, bath]\n\nprint(areas)## [11.25, 18.0, 20.0, 10.75, 9.5]"},{"path":"introduction-to-python.html","id":"create-list-with-different-types","chapter":"Introduction to Python","heading":"Create list with different types","text":"\nlist can contain Python type. Although ’s really common, list can also contain mix Python types including strings, floats, booleans, etc.\n\nprintout previous exercise wasn’t really satisfying. ’s just list numbers representing areas, can’t tell area corresponds part house.\n\ncode editor start solution. areas, name corresponding room already placed front. Pay attention ! “bathroom” string, bath variable represents float 9.50 specified earlier.\n\nFinish code creates areas list. Build list list first contains name room string area. words, add strings “hallway”, “kitchen” “bedroom” appropriate locations.\n\nPrint areas ; printout informative time?\n\nNice! list contains strings floats, ’s problem Python!\n","code":"# area variables (in square meters)\nhall = 11.25\nkit = 18.0\nliv = 20.0\nbed = 10.75\nbath = 9.50\n\n# Adapt list areas\nareas = [\"hallway\", hall, \"kitchen\", kit, \"living room\", liv, \"bedroom\", bed, \"bathroom\", bath]\n\n# Print areas\nprint(areas)## ['hallway', 11.25, 'kitchen', 18.0, 'living room', 20.0, 'bedroom', 10.75, 'bathroom', 9.5]"},{"path":"introduction-to-python.html","id":"select-the-valid-list","chapter":"Introduction to Python","heading":"Select the valid list","text":"\nlist can contain Python type. list also Python type. means list can also contain list! Python getting funkier minute, fear , just remember list syntax:\n\nCan tell ones following lines Python code valid ways build list?\n\n. [1, 3, 4, 2]\nB. [[1, 2, 3], [4, 5, 7]]\nC. [1 + 2, “” * 5, 3]\n, B CBB CC\nCorrect! funny may look, commands valid ways build Python list.\n","code":"my_list = [el1, el2, el3]\n"},{"path":"introduction-to-python.html","id":"list-of-lists","chapter":"Introduction to Python","heading":"List of lists","text":"\ndata scientist, ’ll often dealing lot data, make sense group data.\n\nInstead creating flat list containing strings floats, representing names areas rooms house, can create list lists. script editor can already give idea.\n\nDon’t get confused : “hallway” string, hall variable represents float 11.25 specified earlier.\n\nFinish list lists also contains bedroom bathroom data. Make sure enter order!\n\nPrint house; way structuring data make sense?\n\nPrint type house. still dealing list?\n\nGreat! Get ready learn list subsetting!\n","code":"# area variables (in square meters)\nhall = 11.25\nkit = 18.0\nliv = 20.0\nbed = 10.75\nbath = 9.50\n\n# house information as list of lists\nhouse = [[\"hallway\", hall],\n         [\"kitchen\", kit],\n         [\"living room\", liv],\n         [\"bedroom\", bed],\n         [\"bathroom\", bath]]\n         \n# Print out house\nprint(house)## [['hallway', 11.25], ['kitchen', 18.0], ['living room', 20.0], ['bedroom', 10.75], ['bathroom', 9.5]]# Print out the type of house\nprint(type(house))## <class 'list'>"},{"path":"introduction-to-python.html","id":"subsetting-lists","chapter":"Introduction to Python","heading":"Subsetting Lists","text":"","code":""},{"path":"introduction-to-python.html","id":"subset-and-conquer","chapter":"Introduction to Python","heading":"Subset and conquer","text":"\nSubsetting Python lists piece cake. Take code sample , creates list x selects “b” . Remember second element, index 1. can also use negative indexing.\n\nRemember areas list , containing strings floats? definition already script. Can add correct code Python subsetting?\n\nPrint second element areas list (value 11.25).\n\nSubset print last element areas, 9.50. Using negative index makes sense !\n\nSelect number representing area living room (20.0) print .\n\nGood job!\n","code":"x = [\"a\", \"b\", \"c\", \"d\"]\nx[1]\nx[-3] # same result!\n# Create the areas list\nareas = [\"hallway\", 11.25, \"kitchen\", 18.0, \"living room\", 20.0, \"bedroom\", 10.75, \"bathroom\", 9.50]\n\n# Print out second element from areas\nprint(areas[1])## 11.25# Print out last element from areas\nprint(areas[-1])## 9.5# Print out the area of the living room\nprint(areas[5])## 20.0"},{"path":"introduction-to-python.html","id":"subset-and-calculate","chapter":"Introduction to Python","heading":"Subset and calculate","text":"\n’ve extracted values list, can use perform additional calculations. Take example, second fourth element list x extracted. strings result pasted together using + operator:\n\nUsing combination list subsetting variable assignment, create new variable, eat_sleep_area, contains sum area kitchen area bedroom.\n\nPrint new variable eat_sleep_area.\n\nBellissimo!\n","code":"x = [\"a\", \"b\", \"c\", \"d\"]\nprint(x[1] + x[3])\n# Create the areas list\nareas = [\"hallway\", 11.25, \"kitchen\", 18.0, \"living room\", 20.0, \"bedroom\", 10.75, \"bathroom\", 9.50]\n\n# Sum of kitchen and bedroom area: eat_sleep_area\neat_sleep_area = areas[3] + areas[-3]\n\n# Print the variable eat_sleep_area\nprint(eat_sleep_area)## 28.75"},{"path":"introduction-to-python.html","id":"slicing-and-dicing","chapter":"Introduction to Python","heading":"Slicing and dicing","text":"\nSelecting single values list just one part story. ’s also possible slice list, means selecting multiple elements list. Use following syntax:\n\nstart index included, end index .\n\ncode sample shows example. list “b” “c”, corresponding indexes 1 2, selected list x:\n\nelements index 1 2 included, element index 3 .\n\nUse slicing create list, downstairs, contains first 6 elements areas.\n\nsimilar thing create new variable, upstairs, contains last 4 elements areas.\n\nPrint downstairs upstairs using print().\n\nGreat!\n","code":"my_list[start:end]\nx = [\"a\", \"b\", \"c\", \"d\"]\nx[1:3]\n# Create the areas list\nareas = [\"hallway\", 11.25, \"kitchen\", 18.0, \"living room\", 20.0, \"bedroom\", 10.75, \"bathroom\", 9.50]\n\n# Use slicing to create downstairs\ndownstairs = areas[0:6]\n\n# Use slicing to create upstairs\nupstairs = areas[6:10]\n\n# Print out downstairs and upstairs\nprint(downstairs)## ['hallway', 11.25, 'kitchen', 18.0, 'living room', 20.0]print(upstairs)## ['bedroom', 10.75, 'bathroom', 9.5]"},{"path":"introduction-to-python.html","id":"slicing-and-dicing-2","chapter":"Introduction to Python","heading":"Slicing and dicing (2)","text":"\nvideo, Hugo first discussed syntax specify begin end slice list:\n\nHowever, ’s also possible specify indexes. don’t specify begin index, Python figures want start slice beginning list. don’t specify end index, slice go way last element list. experiment , try following commands IPython Shell:\n\nCreate downstairs , first 6 elements areas. time, simplify slicing omitting begin index.\n\nCreate upstairs , last 4 elements areas. time, simplify slicing omitting end index.\n\nWonderful!\n","code":"my_list[begin:end]\nx = [\"a\", \"b\", \"c\", \"d\"]\nx[:2]\nx[2:]\nx[:]\n# Create the areas list\nareas = [\"hallway\", 11.25, \"kitchen\", 18.0, \"living room\", 20.0, \"bedroom\", 10.75, \"bathroom\", 9.50]\n\n# Alternative slicing to create downstairs\ndownstairs = areas[:6]\n\n# Alternative slicing to create upstairs\nupstairs = areas[6:]"},{"path":"introduction-to-python.html","id":"subsetting-lists-of-lists","chapter":"Introduction to Python","heading":"Subsetting lists of lists","text":"\nsaw Python list can contain practically anything; even lists! subset lists lists, can use technique : square brackets. Try commands following code sample IPython Shell:\n\nx[2] results list, can subset adding additional square brackets.\n\nhouse[-1][1] return? house, list lists created , already defined workspace. can experiment IPython Shell.\nfloat: kitchen areaA string: “kitchen”float: bathroom areaA string: “bathroom”\nCorrectomundo! last piece list puzzle manipulation.\n","code":"x = [[\"a\", \"b\", \"c\"],\n     [\"d\", \"e\", \"f\"],\n     [\"g\", \"h\", \"i\"]]\nx[2][0]\nx[2][:2]\n# edited/added\nhouse = [['hallway', 11.25],\n ['kitchen', 18.0],\n ['living room', 20.0],\n ['bedroom', 10.75],\n ['bathroom', 9.5]]\nprint(house[-1][1])## 9.5"},{"path":"introduction-to-python.html","id":"manipulating-lists","chapter":"Introduction to Python","heading":"Manipulating Lists","text":"","code":""},{"path":"introduction-to-python.html","id":"replace-list-elements","chapter":"Introduction to Python","heading":"Replace list elements","text":"\nReplacing list elements pretty easy. Simply subset list assign new values subset. can select single elements can change entire list slices .\n\nUse IPython Shell experiment commands . Can tell ’s happening ?\n\nfollowing exercises, ’ll continue working areas list contains names areas different rooms house.\n\nUpdate area bathroom area 10.50 square meters instead 9.50.\n\nMake areas list trendy! Change “living room” “chill zone”.\n\nSweet! code sample showed, can also slice list replace another list update multiple elements single command.\n","code":"x = [\"a\", \"b\", \"c\", \"d\"]\nx[1] = \"r\"\nx[2:] = [\"s\", \"t\"]\n# Create the areas list\nareas = [\"hallway\", 11.25, \"kitchen\", 18.0, \"living room\", 20.0, \"bedroom\", 10.75, \"bathroom\", 9.50]\n\n# Correct the bathroom area\nareas[-1] = 10.50\n\n# Change \"living room\" to \"chill zone\"\nareas[4] = \"chill zone\""},{"path":"introduction-to-python.html","id":"extend-a-list","chapter":"Introduction to Python","heading":"Extend a list","text":"\ncan change elements list, sure want able add elements , right? can use + operator:\n\njust won lottery, awesome! decide build poolhouse garage. Can add information areas list?\n\nUse + operator paste list [“poolhouse”, 24.5] end areas list. Store resulting list areas_1.\n\nextend areas_1 adding data garage. Add string “garage” float 15.45. Name resulting list areas_2.\n\nCool! list shaping nicely!\n","code":"x = [\"a\", \"b\", \"c\", \"d\"]\ny = x + [\"e\", \"f\"]\n# Create the areas list (updated version)\nareas = [\"hallway\", 11.25, \"kitchen\", 18.0, \"chill zone\", 20.0,\n         \"bedroom\", 10.75, \"bathroom\", 10.50]\n\n# Add poolhouse data to areas, new list is areas_1\nareas_1 = areas + [\"poolhouse\", 24.5]\n\n# Add garage data to areas_1, new list is areas_2\nareas_2 = areas_1 + [\"garage\", 15.45]"},{"path":"introduction-to-python.html","id":"delete-list-elements","chapter":"Introduction to Python","heading":"Delete list elements","text":"\nFinally, can also remove elements list. can del statement:\n\nPay attention : soon remove element list, indexes elements come deleted element change!\n\nupdated extended version areas ’ve built previous exercises coded . can copy paste IPython Shell play around result.\n\nmistake! amount won lottery big looks like poolhouse isn’t going happen. decide remove corresponding string float areas list.\n\n; sign used place commands line. following two code chunks equivalent:\n\ncode chunks job us?\ndel(areas[10]); del(areas[11])del(areas[10:11])del(areas[-4:-2])del(areas[-3]); del(areas[-4])\nCorrect! ’ll learn easier ways remove specific elements Python lists later .\n","code":"x = [\"a\", \"b\", \"c\", \"d\"]\ndel(x[1])\nareas = [\"hallway\", 11.25, \"kitchen\", 18.0,\n        \"chill zone\", 20.0, \"bedroom\", 10.75,\n         \"bathroom\", 10.50, \"poolhouse\", 24.5,\n         \"garage\", 15.45]\n# Same line\ncommand1; command2\n\n# Separate lines\ncommand1\ncommand2\n"},{"path":"introduction-to-python.html","id":"inner-workings-of-lists","chapter":"Introduction to Python","heading":"Inner workings of lists","text":"\nend video, Hugo explained Python lists work behind scenes. exercise ’ll get hands-experience .\n\nPython code script already creates list name areas copy named areas_copy. Next, first element areas_copy list changed areas list printed . hit Run Code ’ll see , although ’ve changed areas_copy, change also takes effect areas list. ’s areas areas_copy point list.\n\nwant prevent changes areas_copy also taking effect areas, ’ll explicit copy areas list. can list() using [:].\n\nChange second command, creates variable areas_copy, areas_copy explicit copy areas. edit, changes made areas_copy shouldn’t affect areas. Submit answer check .\n\nNice! difference explicit reference-based copies subtle, can really important. Try keep mind list stored computer’s memory.\n","code":"# Create list areas\nareas = [11.25, 18.0, 20.0, 10.75, 9.50]\n\n# Create areas_copy\nareas_copy = areas\n\n# Change areas_copy\nareas_copy[0] = 5.0\n\n# Print areas\nprint(areas)## [5.0, 18.0, 20.0, 10.75, 9.5]# Create list areas\nareas = [11.25, 18.0, 20.0, 10.75, 9.50]\n\n# Create areas_copy\nareas_copy = list(areas)\n\n# Change areas_copy\nareas_copy[0] = 5.0\n\n# Print areas\nprint(areas)## [11.25, 18.0, 20.0, 10.75, 9.5]"},{"path":"introduction-to-python.html","id":"functions-and-packages","chapter":"Introduction to Python","heading":"Functions and Packages","text":"\n’ll learn use functions, methods, packages efficiently leverage code brilliant Python developers written. goal reduce amount code need solve challenging problems!\n","code":""},{"path":"introduction-to-python.html","id":"functions","chapter":"Introduction to Python","heading":"Functions","text":"","code":""},{"path":"introduction-to-python.html","id":"familiar-functions","chapter":"Introduction to Python","heading":"Familiar functions","text":"\nbox, Python offers bunch built-functions make life data scientist easier. already know two functions: print() type(). ’ve also used functions str(), int(), bool() float() switch data types. built-functions well.\n\nCalling function easy. get type 3.0 store output new variable, result, can use following:\n\ngeneral recipe calling functions saving result variable thus:\n\nUse print() combination type() print type var1.\n\nUse len() get length list var1. Wrap print() call directly print .\n\nUse int() convert var2 integer. Store output out2.\n\nGreat job! len() function extremely useful; also works strings count number characters!\n","code":"result = type(3.0)\noutput = function_name(input)\n# Create variables var1 and var2\nvar1 = [1, 2, 3, 4]\nvar2 = True\n\n# Print out type of var1\nprint(type(var1))## <class 'list'># Print out length of var1\nprint(len(var1))## 4# Convert var2 to an integer: out2\nout2 = int(var2)"},{"path":"introduction-to-python.html","id":"help","chapter":"Introduction to Python","heading":"Help!","text":"\nMaybe already know name Python function, still figure use . Ironically, ask information function another function: help(). IPython specifically, can also use ? function name.\n\nget help max() function, example, can use one calls:\n\nUse Shell open documentation complex(). following statements true?\ncomplex() takes exactly two arguments: real [, imag].complex() takes two arguments: real imag. arguments required.complex() takes two arguments: real imag. real required argument, imag optional argument.complex() takes two arguments: real imag. don’t specify imag, set 1 Python.\nPerfect!\n","code":"help(max)\n?max\n"},{"path":"introduction-to-python.html","id":"multiple-arguments","chapter":"Introduction to Python","heading":"Multiple arguments","text":"\nprevious exercise, square brackets around imag documentation showed us imag argument optional. Python also uses different way tell users arguments optional.\n\nlook documentation sorted() typing help(sorted) IPython Shell.\n\n’ll see sorted() takes three arguments: iterable, key reverse.\n\nkey=None means don’t specify key argument, None. reverse=False means don’t specify reverse argument, False.\n\nexercise, ’ll specify iterable reverse, key. first input pass sorted() matched iterable argument, second input? tell Python want specify reverse without changing anything key, can use =:\n\nTwo lists created editor. Can paste together sort descending order?\n\nNote: now, can understand iterable collection objects, e.g. List.\n\nUse + merge contents first second new list: full.\n\nCall sorted() full specify reverse argument True. Save sorted list full_sorted.\n\nFinish printing full_sorted.\n\nCool! Head video Python methods.\n","code":"sorted(___, reverse = ___)\n# Create lists first and second\nfirst = [11.25, 18.0, 20.0]\nsecond = [10.75, 9.50]\n\n# Paste together first and second: full\nfull = first + second\n\n# Sort full in descending order: full_sorted\nfull_sorted = sorted(full, reverse = True)\n\n# Print out full_sorted\nprint(full_sorted)## [20.0, 18.0, 11.25, 10.75, 9.5]"},{"path":"introduction-to-python.html","id":"methods","chapter":"Introduction to Python","heading":"Methods","text":"","code":""},{"path":"introduction-to-python.html","id":"string-methods","chapter":"Introduction to Python","heading":"String Methods","text":"\nStrings come bunch methods. Follow instructions closely discover . want discover detail, can always type help(str) IPython Shell.\n\nstring place already created experiment .\n\nUse upper() method place store result place_up. Use syntax calling methods learned previous video.\n\nPrint place place_up. change?\n\nPrint number o’s variable place calling count() place passing letter ‘o’ input method. ’re talking variable place, word “place”!\n\nNice! Notice printouts upper() method change object called . different lists next exercise!\n","code":"# string to experiment with: place\nplace = \"poolhouse\"\n\n# Use upper() on place: place_up\nplace_up = place.upper()\n\n# Print out place and place_up\nprint(place)## poolhouseprint(place_up)## POOLHOUSE# Print out the number of o's in place\nprint(place.count('o'))## 3"},{"path":"introduction-to-python.html","id":"list-methods","chapter":"Introduction to Python","heading":"List Methods","text":"\nStrings Python types methods associated . Lists, floats, integers booleans also types come packaged bunch useful methods. exercise, ’ll experimenting :\n\nindex(), get index first element list matches input \n\ncount(), get number times element appears list.\n\n’ll working list area different parts house: areas.\n\nUse index() method get index element areas equal 20.0. Print index.\n\nCall count() areas find many times 9.50 appears list. , simply print number.\n\nNice! examples list methods change list called .\n","code":"# Create list areas\nareas = [11.25, 18.0, 20.0, 10.75, 9.50]\n\n# Print out the index of the element 20.0\nprint(areas.index(20.0))## 2# Print out how often 9.50 appears in areas\nprint(areas.count(9.50))## 1"},{"path":"introduction-to-python.html","id":"list-methods-2","chapter":"Introduction to Python","heading":"List Methods (2)","text":"\nlist methods change list ’re called . Examples :\n\nappend(), adds element list called ,\n\nremove(), removes first element list matches input, \n\nreverse(), reverses order elements list called .\n\n’ll working list area different parts house: areas.\n\nUse append() twice add size poolhouse garage : 24.5 15.45, respectively. Make sure add order.\n\nPrint areas\n\nUse reverse() method reverse order elements areas.\n\nPrint areas .\n\nGreat!\n","code":"# Create list areas\nareas = [11.25, 18.0, 20.0, 10.75, 9.50]\n\n# Use append twice to add poolhouse and garage size\nareas.append(24.5)\nareas.append(15.45)\n\n# Print out areas\nprint(areas)## [11.25, 18.0, 20.0, 10.75, 9.5, 24.5, 15.45]# Reverse the orders of the elements in areas\nareas.reverse()\n\n# Print out areas\nprint(areas)## [15.45, 24.5, 9.5, 10.75, 20.0, 18.0, 11.25]"},{"path":"introduction-to-python.html","id":"packages","chapter":"Introduction to Python","heading":"Packages","text":"","code":""},{"path":"introduction-to-python.html","id":"import-package","chapter":"Introduction to Python","heading":"Import package","text":"\ndata scientist, notions geometry never hurt. Let’s refresh basics.\n\nfancy clustering algorithm, want find circumference, \\(C\\), area, \\(\\), circle. radius circle r, can calculate \\(C\\) \\(\\) :\n\n\\[C = 2 \\pi r\\]\n\\[= \\pi r^2 \\]\n\nuse constant pi, ’ll need math package. variable r already coded script. Fill code calculate C see print() functions create nice printouts.\n\nImport math package. Now can access constant pi math.pi.\n\nCalculate circumference circle store C.\n\nCalculate area circle store .\n\nNice! know deal functions packages, power lot Python programmers fingertips!\n","code":"# Definition of radius\nr = 0.43\n\n# Import the math package\nimport math\n\n# Calculate C\nC = 2 * r * math.pi\n\n# Build printout\nprint(\"Circumference: \" + str(C))## Circumference: 2.701769682087222# Calculate A\nA = math.pi * r ** 2\n\n# Build printout\nprint(\"Area: \" + str(A))## Area: 0.5808804816487527"},{"path":"introduction-to-python.html","id":"selective-import","chapter":"Introduction to Python","heading":"Selective import","text":"\nGeneral imports, like import math, make functionality math package available . However, decide use specific part package, can always make import selective:\n\nLet’s say Moon’s orbit around planet Earth perfect circle, radius r (km) defined script.\n\nPerform selective import math package import radians function.\n\nCalculate distance travelled Moon 12 degrees orbit. Assign result dist. can calculate r * phi, r radius phi angle radians. convert angle degrees angle radians, use radians() function, just imported.\n\nPrint dist.\n\nNice! Head next exercise.\n","code":"from math import pi\n# Definition of radius\nr = 192500\n\n# Import radians function of math package\nfrom math import radians\n\n# Travel distance of Moon over 12 degrees. Store in dist.\ndist = r * radians(12)\n\n# Print out dist\nprint(dist)## 40317.10572106901"},{"path":"introduction-to-python.html","id":"different-ways-of-importing","chapter":"Introduction to Python","heading":"Different ways of importing","text":"\nseveral ways import packages modules Python. Depending import call, ’ll use different Python code.\n\nSuppose want use function inv(), linalg subpackage scipy package. want able use function follows:\n\nimport statement need order run code without error?\nimport scipyimport scipy.linalgfrom scipy.linalg import my_invfrom scipy.linalg import inv my_inv\nCorrect! word allows create local name function ’re importing: inv() now available my_inv().\n","code":"my_inv([[1,2], [3,4]])\n"},{"path":"introduction-to-python.html","id":"numpy","chapter":"Introduction to Python","heading":"NumPy","text":"\nNumPy fundamental Python package efficiently practice data science. Learn work powerful tools NumPy array, get started data exploration.\n\"Python Fundamenals\" written Dat Tran. last built 2023-01-09.book built bookdown R package.","code":""},{"path":"introduction-to-python.html","id":"numpy-1","chapter":"Introduction to Python","heading":"Numpy","text":"","code":""},{"path":"introduction-to-python.html","id":"your-first-numpy-array","chapter":"Introduction to Python","heading":"Your First NumPy Array","text":"\nchapter, ’re going dive world baseball. Along way, ’ll get comfortable basics numpy, powerful package data science.\n\nlist baseball already defined Python script, representing height baseball players centimeters. Can add code create numpy array ?\n\nImport numpy package np, can refer numpy np.\n\nUse np.array() create numpy array baseball. Name array np_baseball.\n\nPrint type np_baseball check got right.\n\nGreat job!\n","code":"# Import the numpy package as np\nimport numpy as np\n\n# Create list baseball\nbaseball = [180, 215, 210, 210, 188, 176, 209, 200]\n\n# Create a Numpy array from baseball: np_baseball\nnp_baseball = np.array(baseball)\n\n# Print out type of np_baseball\nprint(type(np_baseball))## <class 'numpy.ndarray'>"},{"path":"introduction-to-python.html","id":"baseball-players-height","chapter":"Introduction to Python","heading":"Baseball players’ height","text":"\nhuge baseball fan. decide call MLB (Major League Baseball) ask around statistics height main players. pass along data thousand players, stored regular Python list: height_in. height expressed inches. Can make numpy array convert units meters?\n\nheight_in already available numpy package loaded, can start straight away (Source: stat.ucla.edu).\n\nCreate numpy array height_in. Name new array np_height_in.\n\nPrint np_height_in.\n\nMultiply np_height_in 0.0254 convert height measurements inches meters. Store new values new array, np_height_m.\n\nPrint np_height_m check output makes sense.\n\nNice! blink eye, numpy performs multiplications 1000 height measurements.\n","code":"# edited/added\nimport pandas as pd\nmlb = pd.read_csv(\"datasets/Introduction-to-Python/baseball.csv\")\n\n# height_in is available as a regular list\nheight_in = mlb['Height'].tolist()\n\n# Import numpy\nimport numpy as np\n\n# Create a numpy array from height_in: np_height_in\nnp_height_in = np.array(height_in)\n\n# Print out np_height_in\nprint(np_height_in)## [74 74 72 ... 75 75 73]# Convert np_height_in to m: np_height_m\nnp_height_m = np_height_in * 0.0254\n\n# Print np_height_m\nprint(np_height_m)## [1.8796 1.8796 1.8288 ... 1.905  1.905  1.8542]"},{"path":"introduction-to-python.html","id":"baseball-players-bmi","chapter":"Introduction to Python","heading":"Baseball player’s BMI","text":"\nMLB also offers let analyze weight data. , available regular Python lists: height_in weight_lb. height_in inches weight_lb pounds.\n\n’s now possible calculate BMI baseball player. Python code convert height_in numpy array correct units already available workspace. Follow instructions step step finish game!\n\nCreate numpy array weight_lb list correct units. Multiply 0.453592 go pounds kilograms. Store resulting numpy array np_weight_kg.\n\nUse np_height_m np_weight_kg calculate BMI player. Use following equation: \\[ \\mathrm{BMI} = \\frac{\\mathrm{weight (kg)}}{\\mathrm{height (m)}^2}\\] Save resulting numpy array bmi.\n\nPrint bmi.\n\nCool! Time step game!\n","code":"# height_in and weight_lb are available as regular lists\nweight_lb = mlb['Weight'].tolist()\n\n# Import numpy\nimport numpy as np\n\n# Create array from height_in with metric units: np_height_m\nnp_height_m = np.array(height_in) * 0.0254\n\n# Create array from weight_lb with metric units: np_weight_kg\nnp_weight_kg = np.array(weight_lb) * 0.453592\n\n# Calculate the BMI: bmi\nbmi = np_weight_kg / np_height_m ** 2\n\n# Print out bmi\nprint(bmi)## [23.11037639 27.60406069 28.48080465 ... 25.62295933 23.74810865\n##  25.72686361]"},{"path":"introduction-to-python.html","id":"lightweight-baseball-players","chapter":"Introduction to Python","heading":"Lightweight baseball players","text":"\nsubset regular Python lists numpy arrays, can use square brackets:\n\nnumpy specifically, can also use boolean numpy arrays:\n\ncode calculates BMI baseball players already included. Follow instructions reveal interesting things data!\n\nCreate boolean numpy array: element array True corresponding baseball player’s BMI 21. can use < operator . Name array light.\n\nPrint array light.\n\nPrint numpy array BMIs baseball players whose BMI 21. Use light inside square brackets selection bmi array.\n\nWow! appears 11 1000 baseball players BMI 21!\n","code":"x = [4 , 9 , 6, 3, 1]\nx[1]\nimport numpy as np\ny = np.array(x)\ny[1]\nhigh = y > 5\ny[high]\n# height_in and weight_lb are available as a regular lists\n\n# Import numpy\nimport numpy as np\n\n# Calculate the BMI: bmi\nnp_height_m = np.array(height_in) * 0.0254\nnp_weight_kg = np.array(weight_lb) * 0.453592\nbmi = np_weight_kg / np_height_m ** 2\n\n# Create the light array\nlight = bmi < 21\n\n# Print out light\nprint(light)## [False False False ... False False False]# Print out BMIs of all baseball players whose BMI is below 21\nprint(bmi[light])## [20.54255679 20.54255679 20.69282047 20.69282047 20.34343189 20.34343189\n##  20.69282047 20.15883472 19.4984471  20.69282047 20.9205219 ]"},{"path":"introduction-to-python.html","id":"numpy-side-effects","chapter":"Introduction to Python","heading":"NumPy Side Effects","text":"\nHugo explained , numpy great vector arithmetic. compare functionality regular Python lists, however, things changed.\n\nFirst , numpy arrays contain elements different types. try build list, elements’ types changed end homogeneous list. known type coercion.\n\nSecond, typical arithmetic operators, +, -, * / different meaning regular Python lists numpy arrays.\n\nlook line code:\n\nCan tell code chunk builds exact Python object? numpy package already imported np, can start experimenting IPython Shell straight away!\nnp.array([True, 1, 2, 3, 4, False])np.array([4, 3, 0]) + np.array([0, 2, 2])np.array([1, 1, 2]) + np.array([3, 4, -1])np.array([0, 1, 2, 3, 4, 5])\nGreat job! True converted 1, False converted 0.\n","code":"np.array([True, 1, 2]) + np.array([3, 4, False])\n"},{"path":"introduction-to-python.html","id":"subsetting-numpy-arrays","chapter":"Introduction to Python","heading":"Subsetting NumPy Arrays","text":"\n’ve seen eyes: Python lists numpy arrays sometimes behave differently. Luckily, still certainties world. example, subsetting (using square bracket notation lists arrays) works exactly . see , try following lines code IPython Shell:\n\nscript editor already contains code imports numpy np, stores height weight MLB players numpy arrays.\n\nSubset np_weight_lb printing element index 50.\n\nPrint sub-array np_height_in contains elements index 100 including index 110.\n\nNice! Time learn something new: 2D Numpy arrays!\n","code":"x = [\"a\", \"b\", \"c\"]\nx[1]\n\nnp_x = np.array(x)\nnp_x[1]\n# height_in and weight_lb are available as a regular lists\n\n# Import numpy\nimport numpy as np\n\n# Store weight and height lists as numpy arrays\nnp_weight_lb = np.array(weight_lb)\nnp_height_in = np.array(height_in)\n\n# Print out the weight at index 50\nprint(np_weight_lb[50])## 200# Print out sub-array of np_height_in: index 100 up to and including index 110\nprint(np_height_in[100:111])## [73 74 72 73 69 72 73 75 75 73 72]"},{"path":"introduction-to-python.html","id":"d-numpy-arrays","chapter":"Introduction to Python","heading":"2D Numpy Arrays","text":"","code":""},{"path":"introduction-to-python.html","id":"your-first-2d-numpy-array","chapter":"Introduction to Python","heading":"Your First 2D NumPy Array","text":"\nworking actual MLB data, let’s try create 2D numpy array small list lists.\n\nexercise, baseball list lists. main list contains 4 elements. elements list containing height weight 4 baseball players, order. baseball already coded script.\n\nUse np.array() create 2D numpy array baseball. Name np_baseball.\n\nPrint type np_baseball.\n\nPrint shape attribute np_baseball. Use np_baseball.shape.\n\nGreat! ’re ready convert actual MLB data 2D numpy array now!\n","code":"# Create baseball, a list of lists\nbaseball = [[180, 78.4],\n            [215, 102.7],\n            [210, 98.5],\n            [188, 75.2]]\n\n# Import numpy\nimport numpy as np\n\n# Create a 2D numpy array from baseball: np_baseball\nnp_baseball = np.array(baseball)\n\n# Print out the type of np_baseball\nprint(type(np_baseball))## <class 'numpy.ndarray'># Print out the shape of np_baseball\nprint(np_baseball.shape)## (4, 2)"},{"path":"introduction-to-python.html","id":"baseball-data-in-2d-form","chapter":"Introduction to Python","heading":"Baseball data in 2D form","text":"\nanother look MLB data realize makes sense restructure information 2D numpy array. array 1015 rows, corresponding 1015 baseball players information , 2 columns (height weight).\n\nMLB , , helpful passed data different structure, Python list lists. list lists, sublist represents height weight single baseball player. name embedded list baseball.\n\nCan store data 2D array unlock numpy’s extra functionality?\n\nUse np.array() create 2D numpy array baseball. Name np_baseball.\n\nPrint shape attribute np_baseball.\n\nSlick! Time show killer features multi-dimensional numpy arrays!\n","code":"# baseball is available as a regular list of lists\n\n# Import numpy package\nimport numpy as np\n\n# Create a 2D numpy array from baseball: np_baseball\nnp_baseball = np.array(baseball)\n\n# Print out the shape of np_baseball\nprint(np_baseball.shape)## (4, 2)"},{"path":"introduction-to-python.html","id":"subsetting-2d-numpy-arrays","chapter":"Introduction to Python","heading":"Subsetting 2D NumPy Arrays","text":"\n2D numpy array regular structure, .e. row column fixed number values, complicated ways subsetting become easy. look code elements “” “c” extracted list lists.\n\nregular Python lists, real pain. 2D numpy arrays, however, ’s pretty intuitive! indexes comma refer rows, comma refer columns. : slicing; example, tells Python include rows.\n\ncode converts pre-loaded baseball list 2D numpy array already script. first column contains players’ height inches second column holds player weight, pounds. Add lines make correct selections. Remember Python, first element index 0!\n\nPrint 50th row np_baseball.\n\nMake new variable, np_weight_lb, containing entire second column np_baseball.\n\nSelect height (first column) 124th baseball player np_baseball print .\n\ngoing well!\n","code":"# regular list of lists\nx = [[\"a\", \"b\"], [\"c\", \"d\"]]\n[x[0][0], x[1][0]]\n\n# numpy\nimport numpy as np\nnp_x = np.array(x)\nnp_x[:,0]\n# edited/added\nbaseball = pd.read_csv(\"datasets/Introduction-to-Python/baseball.csv\")[['Height', 'Weight']]\n\n# baseball is available as a regular list of lists\n\n# Import numpy package\nimport numpy as np\n\n# Create np_baseball (2 cols)\nnp_baseball = np.array(baseball)\n\n# Print out the 50th row of np_baseball\nprint(np_baseball[49,:])## [ 70 195]# Select the entire second column of np_baseball: np_weight_lb\nnp_weight_lb = np_baseball[:,1]\n\n# Print out height of 124th player\nprint(np_baseball[123, 0])## 75"},{"path":"introduction-to-python.html","id":"d-arithmetic","chapter":"Introduction to Python","heading":"2D Arithmetic","text":"\nRemember calculated Body Mass Index baseball players? numpy able perform calculations element-wise (.e. element element). 2D numpy arrays isn’t different! can combine matrices single numbers, vectors, matrices.\n\nExecute code IPython shell see understand:\n\nnp_baseball coded ; ’s 2D numpy array 3 columns representing height (inches), weight (pounds) age (years).\n\nmanaged get hold changes height, weight age baseball players. available 2D numpy array, updated. Add np_baseball updated print result.\n\nwant convert units height weight metric (meters kilograms respectively). first step, create numpy array three values: 0.0254, 0.453592 1. Name array conversion.\n\nMultiply np_baseball conversion print result.\n\nGreat job! Notice little code, can change values numpy data structure specific way. useful future data scientist!\n\nnow know use numpy functions get better feeling data. basically comes importing numpy calling several simple functions numpy arrays:\n\nbaseball data available 2D numpy array 3 columns (height, weight, age) 1015 rows. name numpy array np_baseball. restructuring data, however, notice height values abnormally high. Follow instructions discover summary statistic best suited ’re dealing -called outliers.\n\nCreate numpy array np_height_in equal first column np_baseball.\n\nPrint mean np_height_in.\n\nPrint median np_height_in.\n\naverage height 1586 inches, doesn’t sound right, ? However, median seem affected outliers: 74 inches makes perfect sense. ’s always good idea check median mean, get idea overall distribution entire dataset.\n","code":"import numpy as np\nnp_mat = np.array([[1, 2],\n                   [3, 4],\n                   [5, 6]])\nnp_mat * 2\nnp_mat + np.array([10, 10])\nnp_mat + np_mat\n# edited/added\nbaseball = pd.read_csv(\"datasets/Introduction-to-Python/baseball.csv\")[['Height', 'Weight', 'Age']]\nn = len(baseball)\nupdated = np.array(pd.read_csv(\"datasets/Introduction-to-Python/update.csv\", header = None))\n\n# baseball is available as a regular list of lists\n# updated is available as 2D numpy array\n\n# Import numpy package\nimport numpy as np\n\n# Create np_baseball (3 cols)\nnp_baseball = np.array(baseball)\n\n# Print out addition of np_baseball and updated\nprint(np_baseball + updated)## [[ 75.2303559  168.83775102  23.99      ]\n##  [ 75.02614252 231.09732309  35.69      ]\n##  [ 73.1544228  215.08167641  31.78      ]\n##  ...\n##  [ 76.09349925 209.23890778  26.19      ]\n##  [ 75.82285669 172.21799965  32.01      ]\n##  [ 73.99484223 203.14402711  28.92      ]]# Create numpy array: conversion\nconversion = np.array([0.0254, 0.453592, 1])\n\n# Print out product of np_baseball and conversion\nprint(np_baseball * conversion)## [[ 1.8796  81.64656 22.99   ]\n##  [ 1.8796  97.52228 34.69   ]\n##  [ 1.8288  95.25432 30.78   ]\n##  ...\n##  [ 1.905   92.98636 25.19   ]\n##  [ 1.905   86.18248 31.01   ]\n##  [ 1.8542  88.45044 27.92   ]]import numpy as np\nx = [1, 4, 8, 10, 12]\nnp.mean(x)\nnp.median(x)\n# np_baseball is available\n\n# Import numpy\nimport numpy as np\n\n# Create np_height_in from np_baseball\nnp_height_in = np_baseball[:,0]\n\n# Print out the mean of np_height_in\nprint(np.mean(np_height_in))## 73.6896551724138# Print out the median of np_height_in\nprint(np.median(np_height_in))## 74.0"},{"path":"introduction-to-python.html","id":"numpy-basic-statistics","chapter":"Introduction to Python","heading":"Numpy: Basic Statistics","text":"","code":""},{"path":"introduction-to-python.html","id":"average-versus-median","chapter":"Introduction to Python","heading":"Average versus median","text":"\nnow know use numpy functions get better feeling data. basically comes importing numpy calling several simple functions numpy arrays:\n\nbaseball data available 2D numpy array 3 columns (height, weight, age) 1015 rows. name numpy array np_baseball. restructuring data, however, notice height values abnormally high. Follow instructions discover summary statistic best suited ’re dealing -called outliers.\n\nCreate numpy array np_height_in equal first column np_baseball.\n\nPrint mean np_height_in.\n\nPrint median np_height_in.\n","code":"import numpy as np\nx = [1, 4, 8, 10, 12]\nnp.mean(x)\nnp.median(x)\n# np_baseball is available\n\n# Import numpy\nimport numpy as np\n\n# Create np_height_in from np_baseball\nnp_height_in = np_baseball[:,0]\n\n# Print out the mean of np_height_in\nprint(np.mean(np_height_in))## 73.6896551724138"},{"path":"introduction-to-python.html","id":"explore-the-baseball-data","chapter":"Introduction to Python","heading":"Explore the baseball data","text":"\nmean median far apart, decide complain MLB. find error send corrected data . ’s available 2D Numpy array np_baseball, three columns.\n\nPython script editor already includes code print informative messages different summary statistics. Can finish job?\n\ncode print mean height already included. Complete code median height. Replace None correct code.\n\nUse np.std() first column np_baseball calculate stddev. Replace None correct code.\n\nbig players tend heavier? Use np.corrcoef() store correlation first second column np_baseball corr. Replace None correct code.\n\nGreat! Time use new data science skills last exercise!\n","code":"# np_baseball is available\n\n# Import numpy\nimport numpy as np\n\n# Print mean height (first column)\navg = np.mean(np_baseball[:,0])\nprint(\"Average: \" + str(avg))## Average: 73.6896551724138# Print median height. Replace 'None'\nmed = np.median(np_baseball[:,0])\nprint(\"Median: \" + str(med))## Median: 74.0# Print out the standard deviation on height. Replace 'None'\nstddev = np.std(np_baseball[:,0])\nprint(\"Standard Deviation: \" + str(stddev))## Standard Deviation: 2.312791881046546# Print out correlation between first and second column. Replace 'None'\ncorr = np.corrcoef(np_baseball[:,0], np_baseball[:,1])\nprint(\"Correlation: \" + str(corr))## Correlation: [[1.         0.53153932]\n##  [0.53153932 1.        ]]"},{"path":"introduction-to-python.html","id":"blend-it-all-together","chapter":"Introduction to Python","heading":"Blend it all together","text":"\nlast exercises ’ve learned everything know heights weights baseball players. Now ’s time dive another sport: soccer.\n\n’ve contacted FIFA data handed two lists. lists following:\n\nelement lists corresponds player. first list, positions, contains strings representing player’s position. possible positions : ‘GK’ (goalkeeper), ‘M’ (midfield), ‘’ (attack) ‘D’ (defense). second list, heights, contains integers representing height player cm. first player lists goalkeeper pretty tall (191 cm).\n\n’re fairly confident median height goalkeepers higher players soccer field. friends don’t believe , determined show using data received FIFA newly acquired Python skills.\n\nConvert heights positions, regular lists, numpy arrays. Call np_heights np_positions.\n\nExtract heights goalkeepers. can use little trick : use np_positions == ‘GK’ index np_heights. Assign result gk_heights.\n\nExtract heights players. time use np_positions != ‘GK’ index np_heights. Assign result other_heights.\n\nPrint median height goalkeepers using np.median(). Replace None correct code.\n\nplayers. Print median height. Replace None correct code.\n\nWonderful! right disbelievers wrong! exercise marks end Intro Python Data Science course. See another course!\n","code":"positions = ['GK', 'M', 'A', 'D', ...]\nheights = [191, 184, 185, 180, ...]\n# edited/added\nfifa =  pd.read_csv(\"datasets/Introduction-to-Python/fifa.csv\", skipinitialspace=True, usecols=['position', 'height'])\npositions = list(fifa.position)\nheights = list(fifa.height)\n\n# heights and positions are available as lists\n\n# Import numpy\nimport numpy as np\n\n# Convert positions and heights to numpy arrays: np_positions, np_heights\nnp_positions = np.array(positions)\nnp_heights = np.array(heights)\n\n# Heights of the goalkeepers: gk_heights\ngk_heights = np_heights[np_positions == 'GK']\n\n# Heights of the other players: other_heights\nother_heights = np_heights[np_positions != 'GK']\n\n# Print out the median height of goalkeepers. Replace 'None'\nprint(\"Median height of goalkeepers: \" + str(np.median(gk_heights)))## Median height of goalkeepers: 188.0# Print out the median height of other players. Replace 'None'\nprint(\"Median height of other players: \" + str(np.median(other_heights)))## Median height of other players: 181.0"},{"path":"intermediate-python.html","id":"intermediate-python","chapter":"Intermediate Python","heading":"Intermediate Python","text":"\nLearning Python crucial aspiring data science practitioner. Learn visualize real data Matplotlib’s functions get acquainted data structures dictionary pandas DataFrame. four-hour intermediate course help build existing Python skills explore new Python applications functions expand repertoire help work efficiently.\n\n’ll discover dictionaries offer alternative Python lists, pandas dataframe popular way working tabular data. second chapter course, ’ll find can create manipulate datasets, access using structures. Hands-practice throughout course build confidence area.\n\nprogress, ’ll look logic, control flow, filtering loops. functions work control decision-making Python programs help perform operations data, including repeated statements. ’ll finish course applying new skills using hacker statistics calculate chances winning bet.\n\n’ve completed chapters, ’ll ready apply new skills job, new career, personal project, prepared move onto advanced Python learning.\n","code":""},{"path":"intermediate-python.html","id":"matplotlib","chapter":"Intermediate Python","heading":"Matplotlib","text":"\nData visualization key skill aspiring data scientists. Matplotlib makes easy create meaningful insightful plots. chapter, ’ll learn build various types plots, customize visually appealing interpretable.\n","code":""},{"path":"intermediate-python.html","id":"basic-plots-with-matplotlib","chapter":"Intermediate Python","heading":"Basic plots with Matplotlib","text":"","code":""},{"path":"intermediate-python.html","id":"line-plot-1","chapter":"Intermediate Python","heading":"Line plot (1)","text":"\nmatplotlib, can create bunch different plots Python. basic plot line plot. general recipe given .\n\nvideo, already saw much world population grown past years. continue ? world bank estimates world population years 1950 2100. years loaded workspace list called year, corresponding populations list called pop.\n\ncourse touches lot concepts may forgotten, ever need quick refresher, download Python data science Cheat Sheet keep handy!\n\nprint() last item year pop list see predicted population year 2100 . Use two print() functions.\n\ncan start, import matplotlib.pyplot plt. pyplot sub-package matplotlib, hence dot.\n\nUse plt.plot() build line plot. year mapped horizontal axis, pop vertical axis. Don’t forget finish plt.show() function actually display plot.\n\nGreat! Let’s interpret plot just created.\n","code":"import matplotlib.pyplot as plt\nplt.plot(x,y)\nplt.show()\n# edited/added\nimport numpy as np\nyear=list(range(1950,2100+1))\npop=list(np.loadtxt('datasets/Intermediate-Python/pop1.txt', dtype=float))\n\n# Print the last item from years and populations\nprint(year[-1])## 2100print(pop[-1])## 10.85# Import matplotlib.pyplot as plt\nimport matplotlib.pyplot as plt\n\n# Make a line plot: year on the x-axis, pop on the y-axis\nplt.plot(year,pop) \n# Display the plot with plt.show()\nplt.show()"},{"path":"intermediate-python.html","id":"line-plot-2-interpretation","chapter":"Intermediate Python","heading":"Line Plot (2): Interpretation","text":"\nanother look plot created previous exercise; ’s shown right. Based plot, approximately year ten billion human beings planet?\n2040206020852095\nCorrect! Time take data visualization skills next level!\n","code":""},{"path":"intermediate-python.html","id":"line-plot-3","chapter":"Intermediate Python","heading":"Line plot (3)","text":"\nNow ’ve built first line plot, let’s start working data professor Hans Rosling used build beautiful bubble chart. collected 2007. Two lists available :\n\nlife_exp contains life expectancy country \n\ngdp_cap, contains GDP per capita (.e. per person) country expressed US Dollars.\n\nGDP stands Gross Domestic Product. basically represents size economy country. Divide population get GDP per capita.\n\nmatplotlib.pyplot already imported plt, can get started straight away.\n\nPrint last item list gdp_cap, list life_exp; information Zimbabwe.\n\nBuild line chart, gdp_cap x-axis, life_exp y-axis. make sense plot data line plot?\n\nWell done, doesn’t look right. Let’s build plot makes sense.\n","code":"# edited/added\ngdp_cap=list(np.loadtxt('datasets/Intermediate-Python/gdp_cap.txt', dtype=float))\nlife_exp=list(np.loadtxt('datasets/Intermediate-Python/life_exp.txt', dtype=float))\n\n# Print the last item of gdp_cap and life_exp\nprint(gdp_cap[-1])## 469.709298print(life_exp[-1])## 43.487# Make a line plot, gdp_cap on the x-axis, life_exp on the y-axis\nplt.plot(gdp_cap, life_exp)\nplt.show()"},{"path":"intermediate-python.html","id":"scatter-plot-1","chapter":"Intermediate Python","heading":"Scatter Plot (1)","text":"\ntime scale along horizontal axis, line plot friend. many cases, ’re trying assess ’s correlation two variables, example, scatter plot better choice. example build scatter plot.\n\nLet’s continue gdp_cap versus life_exp plot, GDP life expectancy data different countries 2007. Maybe scatter plot better alternative?\n\n, matplotlib.pyplot package available plt.\n\nChange line plot ’s coded script scatter plot.\n\ncorrelation become clear display GDP per capita logarithmic scale. Add line plt.xscale(‘log’).\n\nFinish script plt.show() display plot.\n\nGreat! looks much better!\n","code":"import matplotlib.pyplot as plt\nplt.scatter(x,y)\nplt.show()\n# Change the line plot below to a scatter plot\nplt.scatter(gdp_cap, life_exp)\n\n# Put the x-axis on a logarithmic scale\nplt.xscale('log')\n\n# Show plot\nplt.show()"},{"path":"intermediate-python.html","id":"scatter-plot-2","chapter":"Intermediate Python","heading":"Scatter plot (2)","text":"\nprevious exercise, saw higher GDP usually corresponds higher life expectancy. words, positive correlation.\n\nthink ’s relationship population life expectancy country? list life_exp previous exercise already available. addition, now also pop available, listing corresponding populations countries 2007. populations millions people.\n\nStart scratch: import matplotlib.pyplot plt.\n\nBuild scatter plot, pop mapped horizontal axis, life_exp mapped vertical axis.\n\nFinish script plt.show() actually display plot. see correlation?\n\nNice! ’s clear relationship population life expectancy, makes perfect sense.\n","code":"# edited/added\npop=list(np.loadtxt('datasets/Intermediate-Python/pop2.txt', dtype=float))\n\n# Import package\nimport matplotlib.pyplot as plt\n\n# Build Scatter plot\nplt.scatter(pop, life_exp)\n# Show plot\nplt.show()"},{"path":"intermediate-python.html","id":"histogram","chapter":"Intermediate Python","heading":"Histogram","text":"","code":""},{"path":"intermediate-python.html","id":"build-a-histogram-1","chapter":"Intermediate Python","heading":"Build a histogram (1)","text":"\nlife_exp, list containing data life expectancy different countries 2007, available Python shell.\n\nsee life expectancy different countries distributed, let’s create histogram life_exp.\n\nmatplotlib.pyplot already available plt.\n\nUse plt.hist() create histogram values life_exp. specify number bins; Python set number bins 10 default .\n\nAdd plt.show() actually display histogram. Can tell bin contains observations?\n\nGreat job!\n","code":"# Create histogram of life_exp data\nplt.hist(life_exp)## (array([ 8.,  7., 10., 10., 10.,  8.,  5., 33., 23., 28.]), array([39.613, 43.912, 48.211, 52.51 , 56.809, 61.108, 65.407, 69.706,\n##        74.005, 78.304, 82.603]), <BarContainer object of 10 artists>)# Display histogram\nplt.show()"},{"path":"intermediate-python.html","id":"build-a-histogram-2-bins","chapter":"Intermediate Python","heading":"Build a histogram (2): bins","text":"\nprevious exercise, didn’t specify number bins. default, Python sets number bins 10 case. number bins pretty important. bins oversimplify reality won’t show details. many bins overcomplicate reality won’t show bigger picture.\n\ncontrol number bins divide data , can set bins argument.\n\n’s exactly ’ll exercise. ’ll making two plots . code script already includes plt.show() plt.clf() calls; plt.show() displays plot; plt.clf() cleans can start afresh.\n\n, life_exp available matplotlib.pyplot imported plt.\n\nBuild histogram life_exp, 5 bins. Can tell bin contains observations?\n\nBuild another histogram life_exp, time 20 bins. better?\n\nNice! can use buttons browse different plots ’ve created.\n","code":"# Build histogram with 5 bins\nplt.hist(life_exp, bins = 5)## (array([15., 20., 18., 38., 51.]), array([39.613, 48.211, 56.809, 65.407, 74.005, 82.603]), <BarContainer object of 5 artists>)# Show and clear plot\nplt.show()plt.clf()# Build histogram with 20 bins\nplt.hist(life_exp, bins = 20)## (array([ 1.,  7.,  2.,  5.,  4.,  6.,  5.,  5.,  4.,  6.,  3.,  5.,  5.,\n##         0., 12., 21., 13., 10., 17., 11.]), array([39.613 , 41.7625, 43.912 , 46.0615, 48.211 , 50.3605, 52.51  ,\n##        54.6595, 56.809 , 58.9585, 61.108 , 63.2575, 65.407 , 67.5565,\n##        69.706 , 71.8555, 74.005 , 76.1545, 78.304 , 80.4535, 82.603 ]), <BarContainer object of 20 artists>)# Show and clear plot again\nplt.show()plt.clf()"},{"path":"intermediate-python.html","id":"build-a-histogram-3-compare","chapter":"Intermediate Python","heading":"Build a histogram (3): compare","text":"\nvideo, saw population pyramids present day future. using histogram, easy make comparison.\n\nLet’s similar comparison. life_exp contains life expectancy data different countries 2007. also access second list now, life_exp1950, containing similar data 1950. Can make histogram datasets?\n\n’ll making two plots. plt.show() plt.clf() commands render everything nicely already included. Also matplotlib.pyplot imported , plt.\n\nBuild histogram life_exp 15 bins.\n\nBuild histogram life_exp1950, also 15 bins. big difference histogram 2007 data?\n\nGreat! Toggle created plots - notice anything interesting?\n","code":"# edited/added\nlife_exp1950=list(np.loadtxt('datasets/Intermediate-Python/life_exp1950.txt', dtype=float))\n\n# Histogram of life_exp, 15 bins\nplt.hist(life_exp, bins = 15)## (array([ 3.,  6.,  6.,  7.,  6.,  7.,  7.,  4.,  7.,  5.,  6., 27., 18.,\n##        17., 16.]), array([39.613, 42.479, 45.345, 48.211, 51.077, 53.943, 56.809, 59.675,\n##        62.541, 65.407, 68.273, 71.139, 74.005, 76.871, 79.737, 82.603]), <BarContainer object of 15 artists>)# Show and clear plot\nplt.show()plt.clf()# Histogram of life_exp1950, 15 bins\nplt.hist(life_exp1950, bins = 15)## (array([ 5.,  8., 14., 17., 20., 11.,  7.,  7.,  4.,  7.,  9.,  6., 11.,\n##        11.,  5.]), array([28.8       , 31.72466667, 34.64933333, 37.574     , 40.49866667,\n##        43.42333333, 46.348     , 49.27266667, 52.19733333, 55.122     ,\n##        58.04666667, 60.97133333, 63.896     , 66.82066667, 69.74533333,\n##        72.67      ]), <BarContainer object of 15 artists>)# Show and clear plot again\nplt.show()plt.clf()"},{"path":"intermediate-python.html","id":"choose-the-right-plot-1","chapter":"Intermediate Python","heading":"Choose the right plot (1)","text":"\n’re professor teaching Data Science Python, want visually assess grades exam follow particular distribution. plot use?\nLine plotScatter plotHistogram\nExcellent choice!\n","code":""},{"path":"intermediate-python.html","id":"choose-the-right-plot-2","chapter":"Intermediate Python","heading":"Choose the right plot (2)","text":"\n’re professor Data Analytics Python, want visually assess longer answers exam questions lead higher grades. plot use?\nLine plotScatter plotHistogram\nExcellent choice!\n","code":""},{"path":"intermediate-python.html","id":"customization","chapter":"Intermediate Python","heading":"Customization","text":"","code":""},{"path":"intermediate-python.html","id":"labels","chapter":"Intermediate Python","heading":"Labels","text":"\n’s time customize plot. fun part, see plot come life!\n\n’re going work scatter plot world development data: GDP per capita x-axis (logarithmic scale), life expectancy y-axis. code plot available script.\n\nfirst step, let’s add axis labels title plot. can xlabel(), ylabel() title() functions, available matplotlib.pyplot. sub-package already imported plt.\n\nstrings xlab ylab already set . Use variables set label x- y-axis.\n\nstring title also coded . Use add title plot.\n\ncustomizations, finish script plt.show() actually display plot.\n\nlooks much better already!\n","code":"# Basic scatter plot, log scale\nplt.scatter(gdp_cap, life_exp)\nplt.xscale('log') \n\n# Strings\nxlab = 'GDP per Capita [in USD]'\nylab = 'Life Expectancy [in years]'\ntitle = 'World Development in 2007'\n\n# Add axis labels\nplt.xlabel(xlab)\nplt.ylabel(ylab)\n\n# Add title\nplt.title(title)\n# After customizing, display the plot\nplt.show()"},{"path":"intermediate-python.html","id":"ticks","chapter":"Intermediate Python","heading":"Ticks","text":"\ncustomizations ’ve coded now available script, concise form.\n\nvideo, Hugo demonstrated control y-ticks specifying two arguments:\n\nexample, ticks corresponding numbers 0, 1 2 replaced one, two three, respectively.\n\nLet’s similar thing x-axis world development chart, xticks() function. tick values 1000, 10000 100000 replaced 1k, 10k 100k. end, two lists already created : tick_val tick_lab.\n\nUse tick_val tick_lab inputs xticks() function make plot readable.\n\nusual, display plot plt.show() ’ve added customizations.\n\nGreat! plot shaping nicely!\n","code":"plt.yticks([0,1,2], [\"one\",\"two\",\"three\"])\n# Scatter plot\nplt.scatter(gdp_cap, life_exp)\n\n# Previous customizations\nplt.xscale('log') \nplt.xlabel('GDP per Capita [in USD]')\nplt.ylabel('Life Expectancy [in years]')\nplt.title('World Development in 2007')\n\n# Definition of tick_val and tick_lab\ntick_val = [1000, 10000, 100000]\ntick_lab = ['1k', '10k', '100k']\n\n# Adapt the ticks on the x-axis\nplt.xticks(tick_val, tick_lab)## ([<matplotlib.axis.XTick object at 0x7f9fb4e15ee0>, <matplotlib.axis.XTick object at 0x7f9fb4e15a30>, <matplotlib.axis.XTick object at 0x7f9fb4e15880>], [Text(1000, 0, '1k'), Text(10000, 0, '10k'), Text(100000, 0, '100k')])# After customizing, display the plot\nplt.show()"},{"path":"intermediate-python.html","id":"sizes","chapter":"Intermediate Python","heading":"Sizes","text":"\nRight now, scatter plot just cloud blue dots, indistinguishable . Let’s change . Wouldn’t nice size dots corresponds population?\n\naccomplish , list pop loaded workspace. contains population numbers country expressed millions. can see list added scatter method, argument s, size.\n\nRun script see plot changes.\n\nLooks good, increasing size bubbles make things stand .\n\nImport numpy package np.\n\nUse np.array() create numpy array list pop. Call NumPy array np_pop.\n\nDouble values np_pop setting value np_pop equal np_pop * 2. np_pop NumPy array, array element doubled.\n\nChange s argument inside plt.scatter() np_pop instead pop.\n\nBellissimo! Can already tell bubbles correspond countries?\n","code":"# Import numpy as np\n\n\n# Store pop as a numpy array: np_pop\n\n\n# Double np_pop\n\n\n# Update: set s argument to np_pop\nplt.scatter(gdp_cap, life_exp, s = pop)\n\n# Previous customizations\nplt.xscale('log') \nplt.xlabel('GDP per Capita [in USD]')\nplt.ylabel('Life Expectancy [in years]')\nplt.title('World Development in 2007')\nplt.xticks([1000, 10000, 100000],['1k', '10k', '100k'])## ([<matplotlib.axis.XTick object at 0x7f9fb4bdfb50>, <matplotlib.axis.XTick object at 0x7f9fb4bdf2b0>, <matplotlib.axis.XTick object at 0x7f9fb4c76cd0>], [Text(1000, 0, '1k'), Text(10000, 0, '10k'), Text(100000, 0, '100k')])# Display the plot\nplt.show()# Import numpy as np\nimport numpy as np\n\n# Store pop as a numpy array: np_pop\nnp_pop = np.array(pop)\n\n# Double np_pop\nnp_pop = np_pop * 2\n\n# Update: set s argument to np_pop\nplt.scatter(gdp_cap, life_exp, s = np_pop)\n\n# Previous customizations\nplt.xscale('log') \nplt.xlabel('GDP per Capita [in USD]')\nplt.ylabel('Life Expectancy [in years]')\nplt.title('World Development in 2007')\nplt.xticks([1000, 10000, 100000],['1k', '10k', '100k'])## ([<matplotlib.axis.XTick object at 0x7f9fb4b008e0>, <matplotlib.axis.XTick object at 0x7f9fb4b00a30>, <matplotlib.axis.XTick object at 0x7f9fb4b00730>], [Text(1000, 0, '1k'), Text(10000, 0, '10k'), Text(100000, 0, '100k')])# Display the plot\nplt.show()"},{"path":"intermediate-python.html","id":"colors","chapter":"Intermediate Python","heading":"Colors","text":"\ncode ’ve written now available script.\n\nnext step making plot colorful! , list col created . ’s list color corresponding country, depending continent country part .\n\nmake list col ask? Gapminder data contains list continent continent country belongs . dictionary constructed maps continents onto colors:\n\nNothing worry now; learn dictionaries next chapter.\n\nAdd c = col arguments plt.scatter() function.\n\nChange opacity bubbles setting alpha argument 0.8 inside plt.scatter(). Alpha can set zero one, zero totally transparent, one transparent.\n\nNice! looking like Hans Rosling’s plot!\n","code":"dict = {\n    'Asia':'red',\n    'Europe':'green',\n    'Africa':'blue',\n    'Americas':'yellow',\n    'Oceania':'black'\n}\n# edited/added\ncol=list(np.loadtxt('datasets/Intermediate-Python/col.txt', dtype=str))\n\n# Specify c and alpha inside plt.scatter()\nplt.scatter(x = gdp_cap, y = life_exp, s = np.array(pop) * 2, c = col, alpha = 0.8)\n\n# Previous customizations\nplt.xscale('log') \nplt.xlabel('GDP per Capita [in USD]')\nplt.ylabel('Life Expectancy [in years]')\nplt.title('World Development in 2007')\nplt.xticks([1000,10000,100000], ['1k','10k','100k'])## ([<matplotlib.axis.XTick object at 0x7f9fb353db20>, <matplotlib.axis.XTick object at 0x7f9fb353ddc0>, <matplotlib.axis.XTick object at 0x7f9fb353d6a0>], [Text(1000, 0, '1k'), Text(10000, 0, '10k'), Text(100000, 0, '100k')])# Show the plot\nplt.show()"},{"path":"intermediate-python.html","id":"additional-customizations","chapter":"Intermediate Python","heading":"Additional Customizations","text":"\nanother look script, # Additional Customizations, ’ll see two plt.text() functions now. add words “India” “China” plot.\n\nAdd plt.grid(True) plt.text() calls gridlines drawn plot.\n\nBeautiful! visualization makes sense can interpret properly. Let’s next exercise.\n","code":"# Scatter plot\nplt.scatter(x = gdp_cap, y = life_exp, s = np.array(pop) * 2, c = col, alpha = 0.8)\n\n# Previous customizations\nplt.xscale('log') \nplt.xlabel('GDP per Capita [in USD]')\nplt.ylabel('Life Expectancy [in years]')\nplt.title('World Development in 2007')\nplt.xticks([1000,10000,100000], ['1k','10k','100k'])## ([<matplotlib.axis.XTick object at 0x7f9fb4bca4c0>, <matplotlib.axis.XTick object at 0x7f9fb4bcaf70>, <matplotlib.axis.XTick object at 0x7f9fb4d478e0>], [Text(1000, 0, '1k'), Text(10000, 0, '10k'), Text(100000, 0, '100k')])# Additional customizations\nplt.text(1550, 71, 'India')\nplt.text(5700, 80, 'China')\n\n# Add grid() call\nplt.grid(True)\n\n# Show the plot\nplt.show()"},{"path":"intermediate-python.html","id":"interpretation","chapter":"Intermediate Python","heading":"Interpretation","text":"\nlook colorful plot, ’s clear people live longer countries higher GDP per capita. high income countries really short life expectancy, low income countries long life expectancy. Still, huge difference life expectancy countries income level. people live middle income countries difference lifespan huge countries; depending income distributed used.\n\ncan say plot?\ncountries blue, corresponding Africa, low life expectancy low GDP per capita.negative correlation GDP per capita life expectancy.China lower GDP per capita lower life expectancy compared India.\nCorrect! next chapter, dictionaries!\n","code":""},{"path":"intermediate-python.html","id":"dictionaries-pandas","chapter":"Intermediate Python","heading":"Dictionaries & Pandas","text":"\nLearn dictionary, alternative Python list, pandas DataFrame, de facto standard work tabular data Python. get hands-practice creating manipulating datasets, ’ll learn access information need data structures.\n","code":""},{"path":"intermediate-python.html","id":"dictionaries-part-1","chapter":"Intermediate Python","heading":"Dictionaries, Part 1","text":"","code":""},{"path":"intermediate-python.html","id":"motivation-for-dictionaries","chapter":"Intermediate Python","heading":"Motivation for dictionaries","text":"\nsee dictionaries useful, look two lists defined script. countries contains names European countries. capitals lists corresponding names capital.\n\nUse index() method countries find index ‘germany’. Store index ind_ger.\n\nUse ind_ger access capital Germany capitals list. Print .\n\nHugo already told : works, ’s convenient. Head next exercise create dictionary data.\n","code":"# Definition of countries and capital\ncountries = ['spain', 'france', 'germany', 'norway']\ncapitals = ['madrid', 'paris', 'berlin', 'oslo']\n\n# Get index of 'germany': ind_ger\nind_ger = countries.index('germany')\n\n# Use ind_ger to print out capital of Germany\nprint(capitals[ind_ger])## berlin"},{"path":"intermediate-python.html","id":"create-dictionary","chapter":"Intermediate Python","heading":"Create dictionary","text":"\ncountries capitals lists available script. ’s job convert data dictionary country names keys capitals corresponding values. refresher, recipe creating dictionary:\n\nrecipe, keys values strings. also case exercise.\n\nstrings countries capitals, create dictionary called europe 4 key:value pairs. Beware capitalization! Make sure use lowercase characters everywhere.\n\nPrint europe see result expected.\n\nGreat! Now ’ve built first dictionaries, let’s get serious!\n","code":"my_dict = {\n   \"key1\":\"value1\",\n   \"key2\":\"value2\",\n}\n# Definition of countries and capital\ncountries = ['spain', 'france', 'germany', 'norway']\ncapitals = ['madrid', 'paris', 'berlin', 'oslo']\n\n# From string in countries and capitals, create dictionary europe\neurope = {'spain':'madrid', 'france':'paris', 'germany':'berlin', 'norway':'oslo'}\n\n# Print europe\nprint(europe)## {'spain': 'madrid', 'france': 'paris', 'germany': 'berlin', 'norway': 'oslo'}"},{"path":"intermediate-python.html","id":"access-dictionary","chapter":"Intermediate Python","heading":"Access dictionary","text":"\nkeys dictionary chosen wisely, accessing values dictionary easy intuitive. example, get capital France europe can use:\n\n, ‘france’ key ‘paris’ value returned.\n\nCheck keys europe calling keys() method europe. Print result.\n\nPrint value belongs key ‘norway’.\n\nGood job, now ’re warmed .\n","code":"europe['france']\n# Definition of dictionary\neurope = {'spain':'madrid', 'france':'paris', 'germany':'berlin', 'norway':'oslo' }\n\n# Print out the keys in europe\nprint(europe.keys())## dict_keys(['spain', 'france', 'germany', 'norway'])# Print out value that belongs to key 'norway'\nprint(europe['norway'])## oslo"},{"path":"intermediate-python.html","id":"dictionaries-part-2","chapter":"Intermediate Python","heading":"Dictionaries, Part 2","text":"","code":""},{"path":"intermediate-python.html","id":"dictionary-manipulation-1","chapter":"Intermediate Python","heading":"Dictionary Manipulation (1)","text":"\nknow access dictionary, can also assign new value . add new key-value pair europe can use something like :\n\nAdd key ‘italy’ value ‘rome’ europe.\n\nassert ‘italy’ now key europe, print ‘italy’ europe.\n\nAdd another key:value pair europe: ‘poland’ key, ‘warsaw’ corresponding value.\n\nPrint europe.\n\nWell done! Europe growing minute! notice order printout order dictionary’s definition? ’s dictionaries inherently unordered.\n","code":"europe['iceland'] = 'reykjavik'\n# Definition of dictionary\neurope = {'spain':'madrid', 'france':'paris', 'germany':'berlin', 'norway':'oslo' }\n\n# Add italy to europe\neurope['italy'] = 'rome'\n\n# Print out italy in europe\nprint('italy' in europe)## True# Add poland to europe\neurope['poland'] = 'warsaw'\n\n# Print europe\nprint(europe)## {'spain': 'madrid', 'france': 'paris', 'germany': 'berlin', 'norway': 'oslo', 'italy': 'rome', 'poland': 'warsaw'}"},{"path":"intermediate-python.html","id":"dictionary-manipulation-2","chapter":"Intermediate Python","heading":"Dictionary Manipulation (2)","text":"\nSomebody thought funny mess accurately generated dictionary. adapted version europe dictionary available script.\n\nCan clean ? adapting definition europe, adding Python commands script update remove key:value pairs.\n\ncapital Germany ‘bonn’; ’s ‘berlin’. Update value.\n\nAustralia Europe, Austria ! Remove key ‘australia’ europe.\n\nPrint europe see cleaning work paid .\n\nGreat job! ’s much better!\n","code":"# Definition of dictionary\neurope = {'spain':'madrid', 'france':'paris', 'germany':'bonn',\n          'norway':'oslo', 'italy':'rome', 'poland':'warsaw',\n          'australia':'vienna' }\n\n# Update capital of germany\neurope['germany'] = 'berlin'\n\n# Remove australia\ndel(europe['australia'])\n\n# Print europe\nprint(europe)## {'spain': 'madrid', 'france': 'paris', 'germany': 'berlin', 'norway': 'oslo', 'italy': 'rome', 'poland': 'warsaw'}"},{"path":"intermediate-python.html","id":"dictionariception","chapter":"Intermediate Python","heading":"Dictionariception","text":"\nRemember lists? contain anything, even lists. Well, dictionaries holds. Dictionaries can contain key:value pairs values dictionaries.\n\nexample, look script another version europe - dictionary ’ve working along - coded. keys still country names, values dictionaries contain information just capital.\n\n’s perfectly possible chain square brackets select elements. fetch population Spain europe, example, need:\n\nUse chained square brackets select print capital France.\n\nCreate dictionary, named data, keys ‘capital’ ‘population’. Set ‘rome’ 59.83, respectively.\n\nAdd new key-value pair europe; key ‘italy’ value data, dictionary just built.\n\nGreat! ’s time learn new data structure!\n","code":"europe['spain']['population']\n# Dictionary of dictionaries\neurope = { 'spain': { 'capital':'madrid', 'population':46.77 },\n           'france': { 'capital':'paris', 'population':66.03 },\n           'germany': { 'capital':'berlin', 'population':80.62 },\n           'norway': { 'capital':'oslo', 'population':5.084 } }\n\n\n# Print out the capital of France\nprint(europe['france']['capital'])## paris# Create sub-dictionary data\ndata = { 'capital':'rome', 'population':59.83 }\n\n# Add data to europe under key 'italy'\neurope['italy'] = data\n\n# Print europe\nprint(europe)## {'spain': {'capital': 'madrid', 'population': 46.77}, 'france': {'capital': 'paris', 'population': 66.03}, 'germany': {'capital': 'berlin', 'population': 80.62}, 'norway': {'capital': 'oslo', 'population': 5.084}, 'italy': {'capital': 'rome', 'population': 59.83}}"},{"path":"intermediate-python.html","id":"pandas-part-1","chapter":"Intermediate Python","heading":"Pandas, Part 1","text":"","code":""},{"path":"intermediate-python.html","id":"dictionary-to-dataframe-1","chapter":"Intermediate Python","heading":"Dictionary to DataFrame (1)","text":"\nPandas open source library, providing high-performance, easy--use data structures data analysis tools Python. Sounds promising!\n\nDataFrame one Pandas’ important data structures. ’s basically way store tabular data can label rows columns. One way build DataFrame dictionary.\n\nexercises follow working vehicle data different countries. observation corresponds country columns give information number vehicles per capita, whether people drive left right, .\n\nThree lists defined script:\n\nnames, containing country names data available.\n\ndr, list booleans tells whether people drive left right corresponding country.\n\ncpc, number motor vehicles per 1000 people corresponding country.\n\ndictionary key column label value list contains column elements.\n\nImport pandas pd.\n\nUse pre-defined lists create dictionary called my_dict. three key value pairs:\n\nkey ‘country’ value names.\n\n\nkey ‘drives_right’ value dr.\n\n\nkey ‘cars_per_cap’ value cpc.\n\n\nkey ‘country’ value names.\n\nkey ‘drives_right’ value dr.\n\nkey ‘cars_per_cap’ value cpc.\n\nUse pd.DataFrame() turn dict DataFrame called cars.\n\nPrint cars see beautiful .\n\nGood job! Notice columns cars can different types. possible 2D NumPy arrays!\n","code":"# Pre-defined lists\nnames = ['United States', 'Australia', 'Japan', 'India', 'Russia', 'Morocco', 'Egypt']\ndr =  [True, False, False, False, True, True, True]\ncpc = [809, 731, 588, 18, 200, 70, 45]\n\n# Import pandas as pd\nimport pandas as pd\n\n# Create dictionary my_dict with three key:value pairs: my_dict\nmy_dict = { 'country':names, 'drives_right':dr, 'cars_per_cap':cpc }\n\n# Build a DataFrame cars from my_dict: cars\ncars = pd.DataFrame(my_dict)\n\n# Print cars\nprint(cars)##          country  drives_right  cars_per_cap\n## 0  United States          True           809\n## 1      Australia         False           731\n## 2          Japan         False           588\n## 3          India         False            18\n## 4         Russia          True           200\n## 5        Morocco          True            70\n## 6          Egypt          True            45"},{"path":"intermediate-python.html","id":"dictionary-to-dataframe-2","chapter":"Intermediate Python","heading":"Dictionary to DataFrame (2)","text":"\nPython code solves previous exercise included script. noticed row labels (.e. labels different observations) automatically set integers 0 6?\n\nsolve list row_labels created. can use specify row labels cars DataFrame. setting index attribute cars, can access cars.index.\n\nHit Run Code see , indeed, row labels correctly set.\n\nSpecify row labels setting cars.index equal row_labels.\n\nPrint cars check row labels correct time.\n\nNice! looks much better already!\n","code":"import pandas as pd\n\n# Build cars DataFrame\nnames = ['United States', 'Australia', 'Japan', 'India', 'Russia', 'Morocco', 'Egypt']\ndr =  [True, False, False, False, True, True, True]\ncpc = [809, 731, 588, 18, 200, 70, 45]\ncars_dict = { 'country':names, 'drives_right':dr, 'cars_per_cap':cpc }\ncars = pd.DataFrame(cars_dict)\nprint(cars)##          country  drives_right  cars_per_cap\n## 0  United States          True           809\n## 1      Australia         False           731\n## 2          Japan         False           588\n## 3          India         False            18\n## 4         Russia          True           200\n## 5        Morocco          True            70\n## 6          Egypt          True            45# Definition of row_labels\nrow_labels = ['US', 'AUS', 'JPN', 'IN', 'RU', 'MOR', 'EG']\n\n# Specify row labels of cars\ncars.index = row_labels\n\n# Print cars again\nprint(cars)##            country  drives_right  cars_per_cap\n## US   United States          True           809\n## AUS      Australia         False           731\n## JPN          Japan         False           588\n## IN           India         False            18\n## RU          Russia          True           200\n## MOR        Morocco          True            70\n## EG           Egypt          True            45"},{"path":"intermediate-python.html","id":"csv-to-dataframe-1","chapter":"Intermediate Python","heading":"CSV to DataFrame (1)","text":"\nPutting data dictionary building DataFrame works, ’s efficient. ’re dealing millions observations? cases, data typically available files regular structure. One file types CSV file, short “comma-separated values”.\n\nimport CSV data Python Pandas DataFrame can use read_csv().\n\nLet’s explore function cars data previous exercises. time, however, data available CSV file, named cars.csv. available current working directory, path file simply ‘cars.csv’.\n\nimport CSV files still need pandas package: import pd.\n\nUse pd.read_csv() import cars.csv data DataFrame. Store DataFrame cars.\n\nPrint cars. everything look OK?\n\nNice job! Looks nice, exactly expected. Let’s fix next exercise.\n","code":"# Import pandas as pd\nimport pandas as pd\n\n# Import the cars.csv data: cars\ncars = pd.read_csv('datasets/Intermediate-Python/cars.csv') # edited/added\n\n# Print out cars\nprint(cars)##   Unnamed: 0  cars_per_cap        country  drives_right\n## 0         US           809  United States          True\n## 1        AUS           731      Australia         False\n## 2        JAP           588          Japan         False\n## 3         IN            18          India         False\n## 4         RU           200         Russia          True\n## 5        MOR            70        Morocco          True\n## 6         EG            45          Egypt          True"},{"path":"intermediate-python.html","id":"csv-to-dataframe-2","chapter":"Intermediate Python","heading":"CSV to DataFrame (2)","text":"\nread_csv() call import CSV data didn’t generate error, output entirely wanted. row labels imported another column without name.\n\nRemember index_col, argument read_csv(), can use specify column CSV file used row label? Well, ’s exactly need !\n\nPython code solves previous exercise already included; can make appropriate changes fix data import?\n\nRun code Run Code assert first column actually used row labels.\n\nSpecify index_col argument inside pd.read_csv(): set 0, first column used row labels.\n\nprintout cars improved now?\n\n’s much better!\n","code":"# Import pandas as pd\nimport pandas as pd\n\n# Fix import by including index_col\ncars = pd.read_csv('datasets/Intermediate-Python/cars.csv')\n\n# Print out cars\nprint(cars)##   Unnamed: 0  cars_per_cap        country  drives_right\n## 0         US           809  United States          True\n## 1        AUS           731      Australia         False\n## 2        JAP           588          Japan         False\n## 3         IN            18          India         False\n## 4         RU           200         Russia          True\n## 5        MOR            70        Morocco          True\n## 6         EG            45          Egypt          True# Import pandas as pd\nimport pandas as pd\n\n# Fix import by including index_col\ncars = pd.read_csv('datasets/Intermediate-Python/cars.csv', index_col = 0)\n\n# Print out cars\nprint(cars)##      cars_per_cap        country  drives_right\n## US            809  United States          True\n## AUS           731      Australia         False\n## JAP           588          Japan         False\n## IN             18          India         False\n## RU            200         Russia          True\n## MOR            70        Morocco          True\n## EG             45          Egypt          True"},{"path":"intermediate-python.html","id":"pandas-part-2","chapter":"Intermediate Python","heading":"Pandas, Part 2","text":"","code":""},{"path":"intermediate-python.html","id":"square-brackets-1","chapter":"Intermediate Python","heading":"Square Brackets (1)","text":"\nvideo, saw can index select Pandas DataFrames many different ways. simplest, powerful way, use square brackets.\n\nsample code, cars data imported CSV files Pandas DataFrame. select cars_per_cap column cars, can use:\n\nsingle bracket version gives Pandas Series, double bracket version gives Pandas DataFrame.\n\nUse single square brackets print country column cars Pandas Series.\n\nUse double square brackets print country column cars Pandas DataFrame.\n\nUse double square brackets print DataFrame country drives_right columns cars, order.\n\nNice!\n","code":"cars['cars_per_cap']\ncars[['cars_per_cap']]\n# Import cars data\nimport pandas as pd\ncars = pd.read_csv('datasets/Intermediate-Python/cars.csv', index_col = 0)\n\n# Print out country column as Pandas Series\nprint(cars['country'])## US     United States\n## AUS        Australia\n## JAP            Japan\n## IN             India\n## RU            Russia\n## MOR          Morocco\n## EG             Egypt\n## Name: country, dtype: object# Print out country column as Pandas DataFrame\nprint(cars[['country']])##            country\n## US   United States\n## AUS      Australia\n## JAP          Japan\n## IN           India\n## RU          Russia\n## MOR        Morocco\n## EG           Egypt# Print out DataFrame with country and drives_right columns\nprint(cars[['country', 'drives_right']])##            country  drives_right\n## US   United States          True\n## AUS      Australia         False\n## JAP          Japan         False\n## IN           India         False\n## RU          Russia          True\n## MOR        Morocco          True\n## EG           Egypt          True"},{"path":"intermediate-python.html","id":"square-brackets-2","chapter":"Intermediate Python","heading":"Square Brackets (2)","text":"\nSquare brackets can just selecting columns. can also use get rows, observations, DataFrame. following call selects first five rows cars DataFrame:\n\nresult another DataFrame containing rows specified.\n\nPay attention: can select rows using square brackets specify slice, like 0:4. Also, ’re using integer indexes rows , row labels!\n\nSelect first 3 observations cars print .\n\nSelect fourth, fifth sixth observation, corresponding row indexes 3, 4 5, print .\n\nGood job. can get interesting information, using square brackets indexing rather limited. Experiment advanced techniques following exercises.\n","code":"cars[0:5]\n# Import cars data\nimport pandas as pd\ncars = pd.read_csv('datasets/Intermediate-Python/cars.csv', index_col = 0)\n\n# Print out first 3 observations\nprint(cars[0:3])##      cars_per_cap        country  drives_right\n## US            809  United States          True\n## AUS           731      Australia         False\n## JAP           588          Japan         False# Print out fourth, fifth and sixth observation\nprint(cars[3:6])##      cars_per_cap  country  drives_right\n## IN             18    India         False\n## RU            200   Russia          True\n## MOR            70  Morocco          True"},{"path":"intermediate-python.html","id":"loc-and-iloc-1","chapter":"Intermediate Python","heading":"loc and iloc (1)","text":"\nloc iloc can practically data selection operation DataFrames can think . loc label-based, means specify rows columns based row column labels. iloc integer index based, specify rows columns integer index like previous exercise.\n\nTry following commands IPython Shell experiment loc iloc select observations. pair commands gives result.\n\n, code included imports cars data Pandas DataFrame.\n\nUse loc iloc select observation corresponding Japan Series. label row JPN, index 2. Make sure print resulting Series.\n\nUse loc iloc select observations Australia Egypt DataFrame. can find labels/indexes rows inspecting cars IPython Shell. Make sure print resulting DataFrame.\n\naced selecting observations DataFrames; selecting rows columns!\n","code":"cars.loc['RU']\ncars.iloc[4]\n\ncars.loc[['RU']]\ncars.iloc[[4]]\n\ncars.loc[['RU', 'AUS']]\ncars.iloc[[4, 1]]\n# Import cars data\nimport pandas as pd\ncars = pd.read_csv('datasets/Intermediate-Python/cars.csv', index_col = 0)\n\n# Print out observation for Japan\nprint(cars.iloc[2])## cars_per_cap      588\n## country         Japan\n## drives_right    False\n## Name: JAP, dtype: object# Print out observations for Australia and Egypt\nprint(cars.loc[['AUS', 'EG']])##      cars_per_cap    country  drives_right\n## AUS           731  Australia         False\n## EG             45      Egypt          True"},{"path":"intermediate-python.html","id":"loc-and-iloc-2","chapter":"Intermediate Python","heading":"loc and iloc (2)","text":"\nloc iloc also allow select rows columns DataFrame. experiment, try following commands IPython Shell. , paired commands produce result.\n\nPrint drives_right value row corresponding Morocco (row label MOR)\n\nPrint sub-DataFrame, containing observations Russia Morocco columns country drives_right.\n\nGreat work! .loc[] .iloc[] excellent tools selecting DataFrame values label index. next exercise, ’ll select entire columns using !\n","code":"cars.loc['IN', 'cars_per_cap']\ncars.iloc[3, 0]\n\ncars.loc[['IN', 'RU'], 'cars_per_cap']\ncars.iloc[[3, 4], 0]\n\ncars.loc[['IN', 'RU'], ['cars_per_cap', 'country']]\ncars.iloc[[3, 4], [0, 1]]\n# Import cars data\nimport pandas as pd\ncars = pd.read_csv('datasets/Intermediate-Python/cars.csv', index_col = 0)\n\n# Print out drives_right value of Morocco\nprint(cars.iloc[5, 2])## True# Print sub-DataFrame\nprint(cars.loc[['RU', 'MOR'], ['country', 'drives_right']])##      country  drives_right\n## RU    Russia          True\n## MOR  Morocco          True"},{"path":"intermediate-python.html","id":"loc-and-iloc-3","chapter":"Intermediate Python","heading":"loc and iloc (3)","text":"\n’s also possible select columns loc iloc. cases, simply put slice going beginning end front comma:\n\nPrint drives_right column Series using loc iloc.\n\nPrint drives_right column DataFrame using loc iloc.\n\nPrint cars_per_cap drives_right column DataFrame using loc iloc.\n\ndrill indexing selecting data Pandas DataFrames! ’ve done great! ’s time head Chapter 3 learn logic, control flow, filtering!\n","code":"cars.loc[:, 'country']\ncars.iloc[:, 1]\n\ncars.loc[:, ['country','drives_right']]\ncars.iloc[:, [1, 2]]\n# Import cars data\nimport pandas as pd\ncars = pd.read_csv('datasets/Intermediate-Python/cars.csv', index_col = 0)\n\n# Print out drives_right column as Series\nprint(cars.iloc[:, 2])## US      True\n## AUS    False\n## JAP    False\n## IN     False\n## RU      True\n## MOR     True\n## EG      True\n## Name: drives_right, dtype: bool# Print out drives_right column as DataFrame\nprint(cars.iloc[:, [2]])##      drives_right\n## US           True\n## AUS         False\n## JAP         False\n## IN          False\n## RU           True\n## MOR          True\n## EG           True# Print out cars_per_cap and drives_right as DataFrame\nprint(cars.loc[:, ['cars_per_cap', 'drives_right']])##      cars_per_cap  drives_right\n## US            809          True\n## AUS           731         False\n## JAP           588         False\n## IN             18         False\n## RU            200          True\n## MOR            70          True\n## EG             45          True"},{"path":"intermediate-python.html","id":"logic-control-flow-and-filtering","chapter":"Intermediate Python","heading":"Logic, Control Flow and Filtering","text":"\nBoolean logic foundation decision-making Python programs. Learn different comparison operators, combine Boolean operators, use Boolean outcomes control structures. ’ll also learn filter data pandas DataFrames using logic.\n","code":""},{"path":"intermediate-python.html","id":"comparison-operators","chapter":"Intermediate Python","heading":"Comparison Operators","text":"","code":""},{"path":"intermediate-python.html","id":"equality","chapter":"Intermediate Python","heading":"Equality","text":"\ncheck two Python values, variables, equal can use ==. check inequality, need !=. refresher, look following examples result True. Feel free try IPython Shell.\n\nwrite comparisons script, need wrap print() function around see output.\n\neditor right, write code see True equals False.\n\nWrite Python code check -5 * 15 equal 75.\n\nAsk Python whether strings “pyscript” “PyScript” equal.\n\nhappens compare booleans integers? Write code see True 1 equal.\n\nlast comparison worked fine actually, boolean special kind integer: True corresponds 1, False corresponds 0.\n","code":"2 == (1 + 1)\n\"intermediate\" != \"python\"\nTrue != False\n\"Python\" != \"python\"\n# Comparison of booleans\nprint(True == False)## False# Comparison of integers\nprint(-5 * 15 != 75)## True# Comparison of strings\nprint(\"pyscript\" == \"PyScript\")## False# Compare a boolean with a numeric\nprint(True == 1)## True"},{"path":"intermediate-python.html","id":"greater-and-less-than","chapter":"Intermediate Python","heading":"Greater and less than","text":"\nvideo, Hugo also talked less greater signs, < > Python. can combine equals sign: <= >=. Pay attention: <= valid syntax, =< .\n\nPython expressions following code chunk evaluate True:\n\nRemember string comparison, Python determines relationship based alphabetical order.\n\nWrite Python expressions, wrapped print() function, check whether:\n\nx greater equal -10. x already defined .\n\n“test” less equal y. y already defined .\n\nTrue greater False.\n\nGreat job!\n","code":"3 < 4\n3 <= 4\n\"alpha\" <= \"beta\"\n# Comparison of integers\nx = -3 * 6\nprint(x >= -10)## False# Comparison of strings\ny = \"test\"\nprint(\"test\" <= y)## True# Comparison of booleans\nprint(True > False)## True"},{"path":"intermediate-python.html","id":"compare-arrays","chapter":"Intermediate Python","heading":"Compare arrays","text":"\nbox, can also use comparison operators NumPy arrays.\n\nRemember areas, list area measurements different rooms house Introduction Python? time ’s two NumPy arrays: my_house your_house. contain areas kitchen, living room, bedroom bathroom order, can compare .\n\nUsing comparison operators, generate boolean arrays answer following questions:\n\nareas my_house greater equal 18?\n\ncan also compare two NumPy arrays element-wise. areas my_house smaller ones your_house?\n\nMake sure wrap commands print() statement can inspect output!\n\nGood job. appears living room bedroom my_house smaller corresponding areas your_house.\n","code":"# Create arrays\nimport numpy as np\nmy_house = np.array([18.0, 20.0, 10.75, 9.50])\nyour_house = np.array([14.0, 24.0, 14.25, 9.0])\n\n# my_house greater than or equal to 18\nprint(my_house >= 18)## [ True  True False False]# my_house less than your_house\nprint(my_house < your_house)## [False  True  True False]"},{"path":"intermediate-python.html","id":"boolean-operators","chapter":"Intermediate Python","heading":"Boolean Operators","text":"","code":""},{"path":"intermediate-python.html","id":"and-or-not-1","chapter":"Intermediate Python","heading":"and, or, not (1)","text":"\nboolean either 1 0, True False. boolean operators , , can combine booleans perform advanced queries data.\n\nsample code, two variables defined: my_kitchen your_kitchen, representing areas.\n\nWrite Python expressions, wrapped print() function, check whether:\n\nmy_kitchen bigger 10 smaller 18.\n\nmy_kitchen smaller 14 bigger 17.\n\ndouble area my_kitchen smaller triple area your_kitchen.\n\nGood job!\n","code":"# Define variables\nmy_kitchen = 18.0\nyour_kitchen = 14.0\n\n# my_kitchen bigger than 10 and smaller than 18?\nprint(my_kitchen > 10 and my_kitchen < 18)## False# my_kitchen smaller than 14 or bigger than 17?\nprint(my_kitchen < 14 or my_kitchen > 17)## True# Double my_kitchen smaller than triple your_kitchen?\nprint(my_kitchen * 2 < your_kitchen * 3)## True"},{"path":"intermediate-python.html","id":"and-or-not-2","chapter":"Intermediate Python","heading":"and, or, not (2)","text":"\nsee completely understood boolean operators, look following piece Python code:\n\nresult execute three commands IPython Shell?\n\nNB: Notice higher priority , executed first.\nTrueFalseRunning commands result error.\nCorrect! x < 3 False. y > 14 y > 10 False well. continue working like , simplifying inside outwards, ’ll end False.\n","code":"x = 8\ny = 9\nnot(not(x < 3) and not(y > 14 or y > 10))\n"},{"path":"intermediate-python.html","id":"boolean-operators-with-numpy","chapter":"Intermediate Python","heading":"Boolean operators with NumPy","text":"\n, operational operators like < >= worked NumPy arrays box. Unfortunately, true boolean operators , , .\n\nuse operators NumPy, need np.logical_and(), np.logical_or() np.logical_not(). ’s example my_house your_house arrays give idea:\n\nGenerate boolean arrays answer following questions:\n\nareas my_house greater 18.5 smaller 10?\n\nareas smaller 11 my_house your_house? Make sure wrap commands print() statement, can inspect output.\n\nCorrecto perfecto!\n","code":"np.logical_and(my_house > 13, \n               your_house < 15)\n# Create arrays\nimport numpy as np\nmy_house = np.array([18.0, 20.0, 10.75, 9.50])\nyour_house = np.array([14.0, 24.0, 14.25, 9.0])\n\n# my_house greater than 18.5 or smaller than 10\nprint(np.logical_or(my_house > 18.5, my_house < 10))## [False  True False  True]# Both my_house and your_house smaller than 11\nprint(np.logical_and(my_house < 11, your_house < 11))## [False False False  True]"},{"path":"intermediate-python.html","id":"if-elif-else","chapter":"Intermediate Python","heading":"if, elif, else","text":"","code":""},{"path":"intermediate-python.html","id":"warmup","chapter":"Intermediate Python","heading":"Warmup","text":"\nexperiment else bit, look code sample:\n\noutput run piece code IPython Shell?\nsmallmediumlargeThe syntax incorrect; code produce error.\nExactly!\n","code":"area = 10.0\nif(area < 9) :\n    print(\"small\")\nelif(area < 12) :\n    print(\"medium\")\nelse :\n    print(\"large\")\n"},{"path":"intermediate-python.html","id":"if","chapter":"Intermediate Python","heading":"if","text":"\n’s time take closer look around house.\n\nTwo variables defined sample code: room, string tells room house ’re looking , area, area room.\n\nExamine statement prints “looking around kitchen.” room equals “kit”.\n\nWrite another statement prints “big place!” area greater 15.\n\nGreat! big place! wasn’t printed, area > 15 True. Experiment values room area see printouts change.\n","code":"# Define variables\nroom = \"kit\"\narea = 14.0# if statement for room\nif room == \"kit\" :\n    print(\"looking around in the kitchen.\")\n    \n# if statement for area## looking around in the kitchen.if area > 15 :\n    print(\"big place!\")"},{"path":"intermediate-python.html","id":"add-else","chapter":"Intermediate Python","heading":"Add else","text":"\nscript, construct room extended else statement “looking around elsewhere.” printed condition room == “kit” evaluates False.\n\nCan similar thing add functionality construct area?\n\nAdd else statement second control structure “pretty small.” printed area > 15 evaluates False.\n\nNice! , feel free play around different values room area . , head next exercise ’ll take customization one step !\n","code":"# Define variables\nroom = \"kit\"\narea = 14.0# if-else construct for room\nif room == \"kit\" :\n    print(\"looking around in the kitchen.\")\nelse :\n    print(\"looking around elsewhere.\")## looking around in the kitchen.# if-else construct for area :\nif area > 15 :\n    print(\"big place!\")\nelse :\n    print(\"pretty small.\")## pretty small."},{"path":"intermediate-python.html","id":"customize-further-elif","chapter":"Intermediate Python","heading":"Customize further: elif","text":"\n’s also possible look around bedroom. sample code contains elif part checks room equals “bed”. case, “looking around bedroom.” printed .\n\n’s now! Make similar addition second control structure customize messages different values area.\n\nAdd elif second control structure “medium size, nice!” printed area greater 10.\n\nWell done!\n","code":"# Define variables\nroom = \"bed\"\narea = 14.0\n\n# if-elif-else construct for room\nif room == \"kit\" :\n    print(\"looking around in the kitchen.\")\nelif room == \"bed\":\n    print(\"looking around in the bedroom.\")\nelse :\n    print(\"looking around elsewhere.\")## looking around in the bedroom.# if-elif-else construct for area\nif area > 15 :\n    print(\"big place!\")\nelif area > 10 :\n    print(\"medium size, nice!\")\nelse :\n    print(\"pretty small.\")## medium size, nice!"},{"path":"intermediate-python.html","id":"filtering-pandas-dataframes","chapter":"Intermediate Python","heading":"Filtering pandas DataFrames","text":"","code":""},{"path":"intermediate-python.html","id":"driving-right-1","chapter":"Intermediate Python","heading":"Driving right (1)","text":"\nRemember cars dataset, containing cars per 1000 people (cars_per_cap) whether people drive right (drives_right) different countries (country)? code imports data CSV format Python DataFrame included script.\n\nvideo, saw step--step approach filter observations DataFrame based boolean arrays. Let’s start simple try find observations cars drives_right True.\n\ndrives_right boolean column, ’ll extract Series use boolean Series select observations cars.\n\nExtract drives_right column Pandas Series store dr.\n\nUse dr, boolean Series, subset cars DataFrame. Store resulting selection sel.\n\nPrint sel, assert drives_right True observations.\n\nGreat job!\n","code":"# Import cars data\nimport pandas as pd\ncars = pd.read_csv('datasets/Intermediate-Python/cars.csv', index_col = 0)\n\n# Extract drives_right column as Series: dr\ndr = cars['drives_right']\n\n# Use dr to subset cars: sel\nsel = cars[dr]\n\n# Print sel\nprint(sel)##      cars_per_cap        country  drives_right\n## US            809  United States          True\n## RU            200         Russia          True\n## MOR            70        Morocco          True\n## EG             45          Egypt          True"},{"path":"intermediate-python.html","id":"driving-right-2","chapter":"Intermediate Python","heading":"Driving right (2)","text":"\ncode previous example worked fine, actually unnecessarily created new variable dr. can achieve result without intermediate variable. Put code computes dr straight square brackets select observations cars.\n\nConvert code one-liner calculates variable sel .\n\nNice one! cars contains 7 rows observations, sel contains 4; majority countries dataset, people drive right side road.\n","code":"# Import cars data\nimport pandas as pd\ncars = pd.read_csv('datasets/Intermediate-Python/cars.csv', index_col = 0)\n\n# Convert code to a one-liner\nsel = cars[cars['drives_right']]\n\n# Print sel\nprint(sel)##      cars_per_cap        country  drives_right\n## US            809  United States          True\n## RU            200         Russia          True\n## MOR            70        Morocco          True\n## EG             45          Egypt          True"},{"path":"intermediate-python.html","id":"cars-per-capita-1","chapter":"Intermediate Python","heading":"Cars per capita (1)","text":"\nLet’s stick cars data . time want find countries high cars per capita figure. words, countries many people car, maybe multiple cars.\n\nSimilar previous example, ’ll want build boolean Series, can use subset cars DataFrame select certain observations. want one-liner, ’s perfectly fine!\n\nSelect cars_per_cap column cars Pandas Series store cpc.\n\nUse cpc combination comparison operator 500. want end boolean Series ’s True corresponding country cars_per_cap 500 False otherwise. Store boolean Series many_cars.\n\nUse many_cars subset cars, similar . Store result car_maniac.\n\nPrint car_maniac see got right.\n\nGood job! output shows US, Australia Japan cars_per_cap 500.\n","code":"# Import cars data\nimport pandas as pd\ncars = pd.read_csv('datasets/Intermediate-Python/cars.csv', index_col = 0)\n\n# Create car_maniac: observations that have a cars_per_cap over 500\ncpc = cars['cars_per_cap']\nmany_cars = cpc > 500\ncar_maniac = cars[many_cars]\n\n# Print car_maniac\nprint(car_maniac)##      cars_per_cap        country  drives_right\n## US            809  United States          True\n## AUS           731      Australia         False\n## JAP           588          Japan         False"},{"path":"intermediate-python.html","id":"cars-per-capita-2","chapter":"Intermediate Python","heading":"Cars per capita (2)","text":"\nRemember np.logical_and(), np.logical_or() np.logical_not(), NumPy variants , operators? can also use Pandas Series advanced filtering operations.\n\nTake example selects observations cars_per_cap 10 80. Try lines code step step see ’s happening.\n\nUse code sample provided create DataFrame medium, includes observations cars cars_per_cap 100 500.\n\nPrint medium.\n\nGreat work!\n","code":"cpc = cars['cars_per_cap']\nbetween = np.logical_and(cpc > 10, cpc < 80)\nmedium = cars[between]\n# Import cars data\nimport pandas as pd\ncars = pd.read_csv('datasets/Intermediate-Python/cars.csv', index_col = 0)\n\n# Import numpy, you'll need this\nimport numpy as np\n\n# Create medium: observations with cars_per_cap between 100 and 500\ncpc = cars['cars_per_cap']\nbetween = np.logical_and(cpc > 100, cpc < 500)\nmedium = cars[between]\n\n# Print medium\nprint(medium)##     cars_per_cap country  drives_right\n## RU           200  Russia          True"},{"path":"intermediate-python.html","id":"loops","chapter":"Intermediate Python","heading":"Loops","text":"\nseveral techniques can use repeatedly execute Python code. loops like repeated statements, loop iterates kinds data structures. Learn chapter.\n","code":""},{"path":"intermediate-python.html","id":"while-loop","chapter":"Intermediate Python","heading":"while loop","text":"","code":""},{"path":"intermediate-python.html","id":"while-warming-up","chapter":"Intermediate Python","heading":"while: warming up","text":"\nloop like repeated statement. code executed , long condition True. another look recipe.\n\nCan tell many printouts following loop ?\n01234\nCorrect! 3 runs, x equal 4, causing x < 4 evaluate False. means loop executed 3 times, giving three printouts.\n","code":"while condition :\n    expression\nx = 1\nwhile x < 4 :\n    print(x)\n    x = x + 1\n"},{"path":"intermediate-python.html","id":"basic-while-loop","chapter":"Intermediate Python","heading":"Basic while loop","text":"\ncan find example video error variable, initially equal 50.0, divided 4 printed every run:\n\nexample come handy, ’s time build loop ! ’re going code loop implements basic control system inverted pendulum. ’s offset standing perfectly straight, loop incrementally fix offset.\n\nNote loop takes long run, might made mistake. particular, remember indent contents loop using four spaces auto-indentation!\n\nCreate variable offset initial value 8.\n\nCode loop keeps running long offset equal 0. Inside loop:\n\nPrint sentence “correcting…”.\n\n\nNext, decrease value offset 1. can offset = offset - 1.\n\n\nFinally, still within loop, print offset can see changes.\n\n\nPrint sentence “correcting…”.\n\nNext, decrease value offset 1. can offset = offset - 1.\n\nFinally, still within loop, print offset can see changes.\n\nWell done!\n","code":"error = 50.0\nwhile error > 1 :\n    error = error / 4\n    print(error)\n# Initialize offset\noffset = 8\n\n# Code the while loop\nwhile offset != 0 :\n    print(\"correcting...\")\n    offset = offset - 1\n    print(offset)## correcting...\n## 7\n## correcting...\n## 6\n## correcting...\n## 5\n## correcting...\n## 4\n## correcting...\n## 3\n## correcting...\n## 2\n## correcting...\n## 1\n## correcting...\n## 0"},{"path":"intermediate-python.html","id":"add-conditionals","chapter":"Intermediate Python","heading":"Add conditionals","text":"\nloop corrects offset good start, offset negative? can try run following code offset initialized -6:\n\nsession disconnected. loop never stop running, offset decreased every run. offset != 0 never become False loop continues forever.\n\nFix things putting -else statement inside loop. code still taking long run, probably made mistake!\n\nInside loop, complete -else statement:\n\noffset greater zero, decrease offset 1.\n\nElse, increase offset 1.\n\n’ve coded things correctly, hitting Submit Answer work time.\n\ncode still taking long run (session expiring), probably made mistake. Check code make sure statement offset != 0 eventually evaluate FALSE!\n\nGood work! loop often used Data Science, let’s head loop.\n","code":"# Initialize offset\noffset = -6\n\n# Code the while loop\nwhile offset != 0 :\n    print(\"correcting...\")\n    offset = offset - 1\n    print(offset)\n# Initialize offset\noffset = -6\n\n# Code the while loop\nwhile offset != 0 :\n    print(\"correcting...\")\n    if offset > 0 :\n        offset = offset - 1\n    else :\n        offset = offset + 1\n    print(offset)## correcting...\n## -5\n## correcting...\n## -4\n## correcting...\n## -3\n## correcting...\n## -2\n## correcting...\n## -1\n## correcting...\n## 0"},{"path":"intermediate-python.html","id":"for-loop","chapter":"Intermediate Python","heading":"for loop","text":"","code":""},{"path":"intermediate-python.html","id":"loop-over-a-list","chapter":"Intermediate Python","heading":"Loop over a list","text":"\nanother look loop Hugo showed video:\n\nusual, simply indent code 4 spaces tell Python code executed loop.\n\nareas variable, containing area different rooms house, already defined.\n\nWrite loop iterates elements areas list prints every element separately.\n\nGreat! wasn’t hard, ?\n","code":"fam = [1.73, 1.68, 1.71, 1.89]\nfor height in fam : \n    print(height)\n# areas list\nareas = [11.25, 18.0, 20.0, 10.75, 9.50]\n\n# Code the for loop\nfor area in areas :\n    print(area)## 11.25\n## 18.0\n## 20.0\n## 10.75\n## 9.5"},{"path":"intermediate-python.html","id":"indexes-and-values-1","chapter":"Intermediate Python","heading":"Indexes and values (1)","text":"\nUsing loop iterate list gives access every list element run, one . also want access index information, list element ’re iterating located, can use enumerate().\n\nexample, look loop video converted:\n\nAdapt loop sample code use enumerate() use two iterator variables.\n\nUpdate print() statement run, line form “room x: y” printed, x index list element y actual list element, .e. area. Make sure print exact string, correct spacing.\n\nWell done!\n","code":"fam = [1.73, 1.68, 1.71, 1.89]\nfor index, height in enumerate(fam) :\n    print(\"person \" + str(index) + \": \" + str(height))\n# areas list\nareas = [11.25, 18.0, 20.0, 10.75, 9.50]\n\n# Change for loop to use enumerate() and update print()\nfor index, area in enumerate(areas) :\n    print(\"room \" + str(index) + \": \" + str(area))## room 0: 11.25\n## room 1: 18.0\n## room 2: 20.0\n## room 3: 10.75\n## room 4: 9.5"},{"path":"intermediate-python.html","id":"indexes-and-values-2","chapter":"Intermediate Python","heading":"Indexes and values (2)","text":"\nnon-programmer folks, room 0: 11.25 strange. Wouldn’t better count started 1?\n\nAdapt print() function loop first printout becomes “room 1: 11.25”, second one “room 2: 18.0” .\n\nMuch better!\n","code":"# areas list\nareas = [11.25, 18.0, 20.0, 10.75, 9.50]\n\n# Adapt the printout\nfor index, area in enumerate(areas) :\n    print(\"room \" + str(index + 1) + \": \" + str(area))## room 1: 11.25\n## room 2: 18.0\n## room 3: 20.0\n## room 4: 10.75\n## room 5: 9.5"},{"path":"intermediate-python.html","id":"loop-over-list-of-lists","chapter":"Intermediate Python","heading":"Loop over list of lists","text":"\nRemember house variable Intro Python course? look definition script. ’s basically list lists, sublist contains name area room house.\n\n’s build loop scratch time!\n\nWrite loop goes sublist house prints x y sqm, x name room y area room.\n\nnext video!\n","code":"# house list of lists\nhouse = [[\"hallway\", 11.25], \n         [\"kitchen\", 18.0], \n         [\"living room\", 20.0], \n         [\"bedroom\", 10.75], \n         [\"bathroom\", 9.50]]\n         \n# Build a for loop from scratch\nfor x in house :\n    print(\"the \" + x[0] + \" is \" + str(x[1]) + \" sqm\")## the hallway is 11.25 sqm\n## the kitchen is 18.0 sqm\n## the living room is 20.0 sqm\n## the bedroom is 10.75 sqm\n## the bathroom is 9.5 sqm"},{"path":"intermediate-python.html","id":"loop-data-structures-part-1","chapter":"Intermediate Python","heading":"Loop Data Structures Part 1","text":"","code":""},{"path":"intermediate-python.html","id":"loop-over-dictionary","chapter":"Intermediate Python","heading":"Loop over dictionary","text":"\nPython 3, need items() method loop dictionary:\n\nRemember europe dictionary contained names European countries key capitals corresponding value? Go ahead write loop iterate !\n\nWrite loop goes key:value pair europe. iteration, “capital x y” printed , x key y value pair.\n\nGreat! Notice order printouts doesn’t necessarily correspond order used defining europe. Remember: dictionaries inherently unordered!\n","code":"world = { \"afghanistan\":30.55, \n          \"albania\":2.77,\n          \"algeria\":39.21 }\n\nfor key, value in world.items() :\n    print(key + \" -- \" + str(value))\n# Definition of dictionary\neurope = {'spain':'madrid', 'france':'paris', 'germany':'berlin',\n          'norway':'oslo', 'italy':'rome', 'poland':'warsaw', 'austria':'vienna' }\n          \n# Iterate over europe\nfor key, value in europe.items() :\n     print(\"the capital of \" + str(key) + \" is \" + str(value))## the capital of spain is madrid\n## the capital of france is paris\n## the capital of germany is berlin\n## the capital of norway is oslo\n## the capital of italy is rome\n## the capital of poland is warsaw\n## the capital of austria is vienna"},{"path":"intermediate-python.html","id":"loop-over-numpy-array","chapter":"Intermediate Python","heading":"Loop over NumPy array","text":"\n’re dealing 1D NumPy array, looping elements can simple :\n\n’re dealing 2D NumPy array, ’s complicated. 2D array built multiple 1D arrays. explicitly iterate separate elements multi-dimensional array, ’ll need syntax:\n\nTwo NumPy arrays might recognize intro course available Python session: np_height, NumPy array containing heights Major League Baseball players, np_baseball, 2D NumPy array contains heights (first column) weights (second column) players.\n\nImport numpy package local alias np.\n\nWrite loop iterates elements np_height prints “x inches” element, x value array.\n\nWrite loop visits every element np_baseball array prints .\n\nWow, ’s lot output! Try add additional argument end = print() call - output mesmerizing!\n","code":"for x in my_array :\n    ...\nfor x in np.nditer(my_array) :\n    ...\n# edited/added\nimport pandas as pd\nmlb = pd.read_csv('datasets/Intermediate-Python/baseball.csv')\nnp_height = np.array(mlb['Height'])\nnp_weight = np.array(mlb['Weight'])\nbaseball = [[180, 78.4],\n            [215, 102.7],\n            [210, 98.5],\n            [188, 75.2]]\nnp_baseball = np.array(baseball)\n\n# Import numpy as np\nimport numpy as np\n\n# For loop over np_height\nfor x in np_height :\n    print(str(x) + \" inches\")## 74 inches\n## 74 inches\n## 72 inches\n## 72 inches\n## 73 inches\n## 69 inches\n## 69 inches\n## 71 inches\n## 76 inches\n## 71 inches\n## 73 inches\n## 73 inches\n## 74 inches\n## 74 inches\n## 69 inches\n## 70 inches\n## 73 inches\n## 75 inches\n## 78 inches\n## 79 inches\n## 76 inches\n## 74 inches\n## 76 inches\n## 72 inches\n## 71 inches\n## 75 inches\n## 77 inches\n## 74 inches\n## 73 inches\n## 74 inches\n## 78 inches\n## 73 inches\n## 75 inches\n## 73 inches\n## 75 inches\n## 75 inches\n## 74 inches\n## 69 inches\n## 71 inches\n## 74 inches\n## 73 inches\n## 73 inches\n## 76 inches\n## 74 inches\n## 74 inches\n## 70 inches\n## 72 inches\n## 77 inches\n## 74 inches\n## 70 inches\n## 73 inches\n## 75 inches\n## 76 inches\n## 76 inches\n## 78 inches\n## 74 inches\n## 74 inches\n## 76 inches\n## 77 inches\n## 81 inches\n## 78 inches\n## 75 inches\n## 77 inches\n## 75 inches\n## 76 inches\n## 74 inches\n## 72 inches\n## 72 inches\n## 75 inches\n## 73 inches\n## 73 inches\n## 73 inches\n## 70 inches\n## 70 inches\n## 70 inches\n## 76 inches\n## 68 inches\n## 71 inches\n## 72 inches\n## 75 inches\n## 75 inches\n## 75 inches\n## 75 inches\n## 68 inches\n## 74 inches\n## 78 inches\n## 71 inches\n## 73 inches\n## 76 inches\n## 74 inches\n## 74 inches\n## 79 inches\n## 75 inches\n## 73 inches\n## 76 inches\n## 74 inches\n## 74 inches\n## 73 inches\n## 72 inches\n## 74 inches\n## 73 inches\n## 74 inches\n## 72 inches\n## 73 inches\n## 69 inches\n## 72 inches\n## 73 inches\n## 75 inches\n## 75 inches\n## 73 inches\n## 72 inches\n## 72 inches\n## 76 inches\n## 74 inches\n## 72 inches\n## 77 inches\n## 74 inches\n## 77 inches\n## 75 inches\n## 76 inches\n## 80 inches\n## 74 inches\n## 74 inches\n## 75 inches\n## 78 inches\n## 73 inches\n## 73 inches\n## 74 inches\n## 75 inches\n## 76 inches\n## 71 inches\n## 73 inches\n## 74 inches\n## 76 inches\n## 76 inches\n## 74 inches\n## 73 inches\n## 74 inches\n## 70 inches\n## 72 inches\n## 73 inches\n## 73 inches\n## 73 inches\n## 73 inches\n## 71 inches\n## 74 inches\n## 74 inches\n## 72 inches\n## 74 inches\n## 71 inches\n## 74 inches\n## 73 inches\n## 75 inches\n## 75 inches\n## 79 inches\n## 73 inches\n## 75 inches\n## 76 inches\n## 74 inches\n## 76 inches\n## 78 inches\n## 74 inches\n## 76 inches\n## 72 inches\n## 74 inches\n## 76 inches\n## 74 inches\n## 75 inches\n## 78 inches\n## 75 inches\n## 72 inches\n## 74 inches\n## 72 inches\n## 74 inches\n## 70 inches\n## 71 inches\n## 70 inches\n## 75 inches\n## 71 inches\n## 71 inches\n## 73 inches\n## 72 inches\n## 71 inches\n## 73 inches\n## 72 inches\n## 75 inches\n## 74 inches\n## 74 inches\n## 75 inches\n## 73 inches\n## 77 inches\n## 73 inches\n## 76 inches\n## 75 inches\n## 74 inches\n## 76 inches\n## 75 inches\n## 73 inches\n## 71 inches\n## 76 inches\n## 75 inches\n## 72 inches\n## 71 inches\n## 77 inches\n## 73 inches\n## 74 inches\n## 71 inches\n## 72 inches\n## 74 inches\n## 75 inches\n## 73 inches\n## 72 inches\n## 75 inches\n## 75 inches\n## 74 inches\n## 72 inches\n## 74 inches\n## 71 inches\n## 70 inches\n## 74 inches\n## 77 inches\n## 77 inches\n## 75 inches\n## 75 inches\n## 78 inches\n## 75 inches\n## 76 inches\n## 73 inches\n## 75 inches\n## 75 inches\n## 79 inches\n## 77 inches\n## 76 inches\n## 71 inches\n## 75 inches\n## 74 inches\n## 69 inches\n## 71 inches\n## 76 inches\n## 72 inches\n## 72 inches\n## 70 inches\n## 72 inches\n## 73 inches\n## 71 inches\n## 72 inches\n## 71 inches\n## 73 inches\n## 72 inches\n## 73 inches\n## 74 inches\n## 74 inches\n## 72 inches\n## 75 inches\n## 74 inches\n## 74 inches\n## 77 inches\n## 75 inches\n## 73 inches\n## 72 inches\n## 71 inches\n## 74 inches\n## 77 inches\n## 75 inches\n## 75 inches\n## 75 inches\n## 78 inches\n## 78 inches\n## 74 inches\n## 76 inches\n## 78 inches\n## 76 inches\n## 70 inches\n## 72 inches\n## 80 inches\n## 74 inches\n## 74 inches\n## 71 inches\n## 70 inches\n## 72 inches\n## 71 inches\n## 74 inches\n## 71 inches\n## 72 inches\n## 71 inches\n## 74 inches\n## 69 inches\n## 76 inches\n## 75 inches\n## 75 inches\n## 76 inches\n## 73 inches\n## 76 inches\n## 73 inches\n## 77 inches\n## 73 inches\n## 72 inches\n## 72 inches\n## 77 inches\n## 77 inches\n## 71 inches\n## 74 inches\n## 74 inches\n## 73 inches\n## 78 inches\n## 75 inches\n## 73 inches\n## 70 inches\n## 74 inches\n## 72 inches\n## 73 inches\n## 73 inches\n## 75 inches\n## 75 inches\n## 74 inches\n## 76 inches\n## 73 inches\n## 74 inches\n## 75 inches\n## 75 inches\n## 72 inches\n## 73 inches\n## 73 inches\n## 72 inches\n## 74 inches\n## 78 inches\n## 76 inches\n## 73 inches\n## 74 inches\n## 75 inches\n## 70 inches\n## 75 inches\n## 71 inches\n## 72 inches\n## 78 inches\n## 75 inches\n## 73 inches\n## 73 inches\n## 71 inches\n## 75 inches\n## 77 inches\n## 72 inches\n## 69 inches\n## 73 inches\n## 74 inches\n## 72 inches\n## 70 inches\n## 75 inches\n## 70 inches\n## 72 inches\n## 72 inches\n## 74 inches\n## 73 inches\n## 74 inches\n## 76 inches\n## 75 inches\n## 80 inches\n## 72 inches\n## 75 inches\n## 73 inches\n## 74 inches\n## 74 inches\n## 73 inches\n## 75 inches\n## 75 inches\n## 71 inches\n## 73 inches\n## 75 inches\n## 74 inches\n## 74 inches\n## 72 inches\n## 74 inches\n## 74 inches\n## 74 inches\n## 73 inches\n## 76 inches\n## 75 inches\n## 72 inches\n## 73 inches\n## 73 inches\n## 73 inches\n## 72 inches\n## 72 inches\n## 72 inches\n## 72 inches\n## 71 inches\n## 75 inches\n## 75 inches\n## 74 inches\n## 73 inches\n## 75 inches\n## 79 inches\n## 74 inches\n## 76 inches\n## 73 inches\n## 74 inches\n## 74 inches\n## 72 inches\n## 74 inches\n## 74 inches\n## 75 inches\n## 78 inches\n## 74 inches\n## 74 inches\n## 74 inches\n## 77 inches\n## 70 inches\n## 73 inches\n## 74 inches\n## 73 inches\n## 71 inches\n## 75 inches\n## 71 inches\n## 72 inches\n## 77 inches\n## 74 inches\n## 70 inches\n## 77 inches\n## 73 inches\n## 72 inches\n## 76 inches\n## 71 inches\n## 76 inches\n## 78 inches\n## 75 inches\n## 73 inches\n## 78 inches\n## 74 inches\n## 79 inches\n## 75 inches\n## 76 inches\n## 72 inches\n## 75 inches\n## 75 inches\n## 70 inches\n## 72 inches\n## 70 inches\n## 74 inches\n## 71 inches\n## 76 inches\n## 73 inches\n## 76 inches\n## 71 inches\n## 69 inches\n## 72 inches\n## 72 inches\n## 69 inches\n## 73 inches\n## 69 inches\n## 73 inches\n## 74 inches\n## 74 inches\n## 72 inches\n## 71 inches\n## 72 inches\n## 72 inches\n## 76 inches\n## 76 inches\n## 76 inches\n## 74 inches\n## 76 inches\n## 75 inches\n## 71 inches\n## 72 inches\n## 71 inches\n## 73 inches\n## 75 inches\n## 76 inches\n## 75 inches\n## 71 inches\n## 75 inches\n## 74 inches\n## 72 inches\n## 73 inches\n## 73 inches\n## 73 inches\n## 73 inches\n## 76 inches\n## 72 inches\n## 76 inches\n## 73 inches\n## 73 inches\n## 73 inches\n## 75 inches\n## 75 inches\n## 77 inches\n## 73 inches\n## 72 inches\n## 75 inches\n## 70 inches\n## 74 inches\n## 72 inches\n## 80 inches\n## 71 inches\n## 71 inches\n## 74 inches\n## 74 inches\n## 73 inches\n## 75 inches\n## 76 inches\n## 73 inches\n## 77 inches\n## 72 inches\n## 73 inches\n## 77 inches\n## 76 inches\n## 71 inches\n## 75 inches\n## 73 inches\n## 74 inches\n## 77 inches\n## 71 inches\n## 72 inches\n## 73 inches\n## 69 inches\n## 73 inches\n## 70 inches\n## 74 inches\n## 76 inches\n## 73 inches\n## 73 inches\n## 75 inches\n## 73 inches\n## 79 inches\n## 74 inches\n## 73 inches\n## 74 inches\n## 77 inches\n## 75 inches\n## 74 inches\n## 73 inches\n## 77 inches\n## 73 inches\n## 77 inches\n## 74 inches\n## 74 inches\n## 73 inches\n## 77 inches\n## 74 inches\n## 77 inches\n## 75 inches\n## 77 inches\n## 75 inches\n## 71 inches\n## 74 inches\n## 70 inches\n## 79 inches\n## 72 inches\n## 72 inches\n## 70 inches\n## 74 inches\n## 74 inches\n## 72 inches\n## 73 inches\n## 72 inches\n## 74 inches\n## 74 inches\n## 76 inches\n## 82 inches\n## 74 inches\n## 74 inches\n## 70 inches\n## 73 inches\n## 73 inches\n## 74 inches\n## 77 inches\n## 72 inches\n## 76 inches\n## 73 inches\n## 73 inches\n## 72 inches\n## 74 inches\n## 74 inches\n## 71 inches\n## 72 inches\n## 75 inches\n## 74 inches\n## 74 inches\n## 77 inches\n## 70 inches\n## 71 inches\n## 73 inches\n## 76 inches\n## 71 inches\n## 75 inches\n## 74 inches\n## 72 inches\n## 76 inches\n## 79 inches\n## 76 inches\n## 73 inches\n## 76 inches\n## 78 inches\n## 75 inches\n## 76 inches\n## 72 inches\n## 72 inches\n## 73 inches\n## 73 inches\n## 75 inches\n## 71 inches\n## 76 inches\n## 70 inches\n## 75 inches\n## 74 inches\n## 75 inches\n## 73 inches\n## 71 inches\n## 71 inches\n## 72 inches\n## 73 inches\n## 73 inches\n## 72 inches\n## 69 inches\n## 73 inches\n## 78 inches\n## 71 inches\n## 73 inches\n## 75 inches\n## 76 inches\n## 70 inches\n## 74 inches\n## 77 inches\n## 75 inches\n## 79 inches\n## 72 inches\n## 77 inches\n## 73 inches\n## 75 inches\n## 75 inches\n## 75 inches\n## 73 inches\n## 73 inches\n## 76 inches\n## 77 inches\n## 75 inches\n## 70 inches\n## 71 inches\n## 71 inches\n## 75 inches\n## 74 inches\n## 69 inches\n## 70 inches\n## 75 inches\n## 72 inches\n## 75 inches\n## 73 inches\n## 72 inches\n## 72 inches\n## 72 inches\n## 76 inches\n## 75 inches\n## 74 inches\n## 69 inches\n## 73 inches\n## 72 inches\n## 72 inches\n## 75 inches\n## 77 inches\n## 76 inches\n## 80 inches\n## 77 inches\n## 76 inches\n## 79 inches\n## 71 inches\n## 75 inches\n## 73 inches\n## 76 inches\n## 77 inches\n## 73 inches\n## 76 inches\n## 70 inches\n## 75 inches\n## 73 inches\n## 75 inches\n## 70 inches\n## 69 inches\n## 71 inches\n## 72 inches\n## 72 inches\n## 73 inches\n## 70 inches\n## 70 inches\n## 73 inches\n## 76 inches\n## 75 inches\n## 72 inches\n## 73 inches\n## 79 inches\n## 71 inches\n## 72 inches\n## 74 inches\n## 74 inches\n## 74 inches\n## 72 inches\n## 76 inches\n## 76 inches\n## 72 inches\n## 72 inches\n## 71 inches\n## 72 inches\n## 72 inches\n## 70 inches\n## 77 inches\n## 74 inches\n## 72 inches\n## 76 inches\n## 71 inches\n## 76 inches\n## 71 inches\n## 73 inches\n## 70 inches\n## 73 inches\n## 73 inches\n## 72 inches\n## 71 inches\n## 71 inches\n## 71 inches\n## 72 inches\n## 72 inches\n## 74 inches\n## 74 inches\n## 74 inches\n## 71 inches\n## 72 inches\n## 75 inches\n## 72 inches\n## 71 inches\n## 72 inches\n## 72 inches\n## 72 inches\n## 72 inches\n## 74 inches\n## 74 inches\n## 77 inches\n## 75 inches\n## 73 inches\n## 75 inches\n## 73 inches\n## 76 inches\n## 72 inches\n## 77 inches\n## 75 inches\n## 72 inches\n## 71 inches\n## 71 inches\n## 75 inches\n## 72 inches\n## 73 inches\n## 73 inches\n## 71 inches\n## 70 inches\n## 75 inches\n## 71 inches\n## 76 inches\n## 73 inches\n## 68 inches\n## 71 inches\n## 72 inches\n## 74 inches\n## 77 inches\n## 72 inches\n## 76 inches\n## 78 inches\n## 81 inches\n## 72 inches\n## 73 inches\n## 76 inches\n## 72 inches\n## 72 inches\n## 74 inches\n## 76 inches\n## 73 inches\n## 76 inches\n## 75 inches\n## 70 inches\n## 71 inches\n## 74 inches\n## 72 inches\n## 73 inches\n## 76 inches\n## 76 inches\n## 73 inches\n## 71 inches\n## 68 inches\n## 71 inches\n## 71 inches\n## 74 inches\n## 77 inches\n## 69 inches\n## 72 inches\n## 76 inches\n## 75 inches\n## 76 inches\n## 75 inches\n## 76 inches\n## 72 inches\n## 74 inches\n## 76 inches\n## 74 inches\n## 72 inches\n## 75 inches\n## 78 inches\n## 77 inches\n## 70 inches\n## 72 inches\n## 79 inches\n## 74 inches\n## 71 inches\n## 68 inches\n## 77 inches\n## 75 inches\n## 71 inches\n## 72 inches\n## 70 inches\n## 72 inches\n## 72 inches\n## 73 inches\n## 72 inches\n## 74 inches\n## 72 inches\n## 72 inches\n## 75 inches\n## 72 inches\n## 73 inches\n## 74 inches\n## 72 inches\n## 78 inches\n## 75 inches\n## 72 inches\n## 74 inches\n## 75 inches\n## 75 inches\n## 76 inches\n## 74 inches\n## 74 inches\n## 73 inches\n## 74 inches\n## 71 inches\n## 74 inches\n## 75 inches\n## 76 inches\n## 74 inches\n## 76 inches\n## 76 inches\n## 73 inches\n## 75 inches\n## 75 inches\n## 74 inches\n## 68 inches\n## 72 inches\n## 75 inches\n## 71 inches\n## 70 inches\n## 72 inches\n## 73 inches\n## 72 inches\n## 75 inches\n## 74 inches\n## 70 inches\n## 76 inches\n## 71 inches\n## 82 inches\n## 72 inches\n## 73 inches\n## 74 inches\n## 71 inches\n## 75 inches\n## 77 inches\n## 72 inches\n## 74 inches\n## 72 inches\n## 73 inches\n## 78 inches\n## 77 inches\n## 73 inches\n## 73 inches\n## 73 inches\n## 73 inches\n## 73 inches\n## 76 inches\n## 75 inches\n## 70 inches\n## 73 inches\n## 72 inches\n## 73 inches\n## 75 inches\n## 74 inches\n## 73 inches\n## 73 inches\n## 76 inches\n## 73 inches\n## 75 inches\n## 70 inches\n## 77 inches\n## 72 inches\n## 77 inches\n## 74 inches\n## 75 inches\n## 75 inches\n## 75 inches\n## 75 inches\n## 72 inches\n## 74 inches\n## 71 inches\n## 76 inches\n## 71 inches\n## 75 inches\n## 76 inches\n## 83 inches\n## 75 inches\n## 74 inches\n## 76 inches\n## 72 inches\n## 72 inches\n## 75 inches\n## 75 inches\n## 72 inches\n## 77 inches\n## 73 inches\n## 72 inches\n## 70 inches\n## 74 inches\n## 72 inches\n## 74 inches\n## 72 inches\n## 71 inches\n## 70 inches\n## 71 inches\n## 76 inches\n## 74 inches\n## 76 inches\n## 74 inches\n## 74 inches\n## 74 inches\n## 75 inches\n## 75 inches\n## 71 inches\n## 71 inches\n## 74 inches\n## 77 inches\n## 71 inches\n## 74 inches\n## 75 inches\n## 77 inches\n## 76 inches\n## 74 inches\n## 76 inches\n## 72 inches\n## 71 inches\n## 72 inches\n## 75 inches\n## 73 inches\n## 68 inches\n## 72 inches\n## 69 inches\n## 73 inches\n## 73 inches\n## 75 inches\n## 70 inches\n## 70 inches\n## 74 inches\n## 75 inches\n## 74 inches\n## 74 inches\n## 73 inches\n## 74 inches\n## 75 inches\n## 77 inches\n## 73 inches\n## 74 inches\n## 76 inches\n## 74 inches\n## 75 inches\n## 73 inches\n## 76 inches\n## 78 inches\n## 75 inches\n## 73 inches\n## 77 inches\n## 74 inches\n## 72 inches\n## 74 inches\n## 72 inches\n## 71 inches\n## 73 inches\n## 75 inches\n## 73 inches\n## 67 inches\n## 67 inches\n## 76 inches\n## 74 inches\n## 73 inches\n## 70 inches\n## 75 inches\n## 70 inches\n## 72 inches\n## 77 inches\n## 79 inches\n## 78 inches\n## 74 inches\n## 75 inches\n## 75 inches\n## 78 inches\n## 76 inches\n## 75 inches\n## 69 inches\n## 75 inches\n## 72 inches\n## 75 inches\n## 73 inches\n## 74 inches\n## 75 inches\n## 75 inches\n## 73 inches# For loop over np_baseball\nfor x in np.nditer(np_baseball) :\n    print(x)## 180.0\n## 78.4\n## 215.0\n## 102.7\n## 210.0\n## 98.5\n## 188.0\n## 75.2"},{"path":"intermediate-python.html","id":"loop-data-structures-part-2","chapter":"Intermediate Python","heading":"Loop Data Structures Part 2","text":"","code":""},{"path":"intermediate-python.html","id":"loop-over-dataframe-1","chapter":"Intermediate Python","heading":"Loop over DataFrame (1)","text":"\nIterating Pandas DataFrame typically done iterrows() method. Used loop, every observation iterated every iteration row label actual row contents available:\n\nfollowing exercises working cars DataFrame. contains information cars per capita whether people drive right left seven countries world.\n\nWrite loop iterates rows cars iteration perform two print() calls: one print row label one print rows contents.\n\nWell done!\n","code":"for lab, row in brics.iterrows() :\n    ...\n# Import cars data\nimport pandas as pd\ncars = pd.read_csv('datasets/Intermediate-Python/cars.csv', index_col = 0)\n\n# Iterate over rows of cars\nfor lab, row in cars.iterrows() :\n    print(lab)\n    print(row)## US\n## cars_per_cap              809\n## country         United States\n## drives_right             True\n## Name: US, dtype: object\n## AUS\n## cars_per_cap          731\n## country         Australia\n## drives_right        False\n## Name: AUS, dtype: object\n## JAP\n## cars_per_cap      588\n## country         Japan\n## drives_right    False\n## Name: JAP, dtype: object\n## IN\n## cars_per_cap       18\n## country         India\n## drives_right    False\n## Name: IN, dtype: object\n## RU\n## cars_per_cap       200\n## country         Russia\n## drives_right      True\n## Name: RU, dtype: object\n## MOR\n## cars_per_cap         70\n## country         Morocco\n## drives_right       True\n## Name: MOR, dtype: object\n## EG\n## cars_per_cap       45\n## country         Egypt\n## drives_right     True\n## Name: EG, dtype: object"},{"path":"intermediate-python.html","id":"loop-over-dataframe-2","chapter":"Intermediate Python","heading":"Loop over DataFrame (2)","text":"\nrow data ’s generated iterrows() every run Pandas Series. format convenient print . Luckily, can easily select variables Pandas Series using square brackets:\n\nUsing iterators lab row, adapt code loop first iteration prints “US: 809”, second iteration “AUS: 731”, .\n\noutput form “country: cars_per_cap”. Make sure print exact string (correct spacing).\n\ncan use str() convert integer data string can print conjunction country label.\n\nSolid!\n","code":"for lab, row in brics.iterrows() :\n    print(row['country'])\n# Import cars data\nimport pandas as pd\ncars = pd.read_csv('datasets/Intermediate-Python/cars.csv', index_col = 0)\n\n# Adapt for loop\nfor lab, row in cars.iterrows() :\n    print(lab + \": \" + str(row['cars_per_cap']))## US: 809\n## AUS: 731\n## JAP: 588\n## IN: 18\n## RU: 200\n## MOR: 70\n## EG: 45"},{"path":"intermediate-python.html","id":"add-column-1","chapter":"Intermediate Python","heading":"Add column (1)","text":"\nvideo, Hugo showed add length country names brics DataFrame new column:\n\ncan similar things cars DataFrame.\n\nUse loop add new column, named COUNTRY, contains uppercase version country names “country” column. can use string method upper() .\n\nsee code worked, print cars. Don’t indent code, ’s part loop.\n\nGreat, might remember also easier way .\n","code":"for lab, row in brics.iterrows() :\n    brics.loc[lab, \"name_length\"] = len(row[\"country\"])\n# Import cars data\nimport pandas as pd\ncars = pd.read_csv('datasets/Intermediate-Python/cars.csv', index_col = 0)\n\n# Code for loop that adds COUNTRY column\nfor lab, row in cars.iterrows() :\n    cars.loc[lab, \"COUNTRY\"] = row[\"country\"].upper()\n\n# Print cars\nprint(cars)##      cars_per_cap        country  drives_right        COUNTRY\n## US            809  United States          True  UNITED STATES\n## AUS           731      Australia         False      AUSTRALIA\n## JAP           588          Japan         False          JAPAN\n## IN             18          India         False          INDIA\n## RU            200         Russia          True         RUSSIA\n## MOR            70        Morocco          True        MOROCCO\n## EG             45          Egypt          True          EGYPT"},{"path":"intermediate-python.html","id":"add-column-2","chapter":"Intermediate Python","heading":"Add column (2)","text":"\nUsing iterrows() iterate every observation Pandas DataFrame easy understand, efficient. every iteration, ’re creating new Pandas Series.\n\nwant add column DataFrame calling function another column, iterrows() method combination loop preferred way go. Instead, ’ll want use apply().\n\nCompare iterrows() version apply() version get result brics DataFrame:\n\ncan similar thing call upper() method every name country column. However, upper() method, ’ll need slightly different approach:\n\nReplace loop one-liner uses .apply(str.upper). call give result: column COUNTRY added cars, containing uppercase version country names.\n\nusual, print cars see fruits hard labor\n\nGreat job! ’s time blend everything ’ve learned together case-study. Head next chapter!\n","code":"for lab, row in brics.iterrows() :\n    brics.loc[lab, \"name_length\"] = len(row[\"country\"])\n\nbrics[\"name_length\"] = brics[\"country\"].apply(len)\n# Import cars data\nimport pandas as pd\ncars = pd.read_csv('datasets/Intermediate-Python/cars.csv', index_col = 0)\n\n# Use .apply(str.upper)\ncars[\"COUNTRY\"] = cars[\"country\"].apply(str.upper)\n\n# Print cars\nprint(cars)##      cars_per_cap        country  drives_right        COUNTRY\n## US            809  United States          True  UNITED STATES\n## AUS           731      Australia         False      AUSTRALIA\n## JAP           588          Japan         False          JAPAN\n## IN             18          India         False          INDIA\n## RU            200         Russia          True         RUSSIA\n## MOR            70        Morocco          True        MOROCCO\n## EG             45          Egypt          True          EGYPT"},{"path":"intermediate-python.html","id":"case-study-hacker-statistics","chapter":"Intermediate Python","heading":"Case Study: Hacker Statistics","text":"\nchapter allow apply concepts ’ve learned course. use hacker statistics calculate chances winning bet. Use random number generators, loops, Matplotlib gain competitive edge!\n","code":""},{"path":"intermediate-python.html","id":"random-numbers","chapter":"Intermediate Python","heading":"Random Numbers","text":"","code":""},{"path":"intermediate-python.html","id":"random-float","chapter":"Intermediate Python","heading":"Random float","text":"\nRandomness many uses science, art, statistics, cryptography, gaming, gambling, fields. ’re going use randomness simulate game.\n\nfunctionality need contained random package, sub-package numpy. exercise, ’ll using two functions package:\n\nseed(): sets random seed, results reproducible simulations. argument, takes integer choosing. call function, output generated.\n\nrand(): don’t specify arguments, generates random float zero one.\n\nImport numpy np.\n\nUse seed() set seed; argument, pass 123.\n\nGenerate first random float rand() print .\n\nGreat! Now let’s simulate dice.\n","code":"# Import numpy as np\nimport numpy as np\n\n# Set the seed\nnp.random.seed(123)\n\n# Generate and print random float\nprint(np.random.rand())## 0.6964691855978616"},{"path":"intermediate-python.html","id":"roll-the-dice","chapter":"Intermediate Python","heading":"Roll the dice","text":"\nprevious exercise, used rand(), generates random float 0 1.\n\nHugo explained video can just well use randint(), also function random package, generate integers randomly. following call generates integer 4, 5, 6 7 randomly. 8 included.\n\nNumPy already imported np seed set. Can roll dice?\n\nUse randint() appropriate arguments randomly generate integer 1, 2, 3, 4, 5 6. simulates dice. Print .\n\nRepeat outcome see second throw different. , print result.\n\nAlright! Time actually start coding things !\n","code":"import numpy as np\nnp.random.randint(4, 8)\n# Import numpy and set seed\nimport numpy as np\nnp.random.seed(123)\n\n# Use randint() to simulate a dice\nprint(np.random.randint(1,7))## 6# Use randint() again\nprint(np.random.randint(1,7))## 3"},{"path":"intermediate-python.html","id":"determine-your-next-move","chapter":"Intermediate Python","heading":"Determine your next move","text":"\nEmpire State Building bet, next move depends number eyes throw dice. can perfectly code -elif-else construct!\n\nsample code assumes ’re currently step 50. Can fill missing pieces finish script? numpy already imported np seed set 123, don’t worry anymore.\n\nRoll dice. Use randint() create variable dice.\n\nFinish -elif-else construct replacing ___:\n\ndice 1 2, go one step .\n\ndice 3, 4 5, go one step .\n\nElse, throw dice . number eyes number steps go .\n\nPrint dice step. Given value dice, step updated correctly?\n\nCool! threw 6, code else statement executed. threw , apparently threw 3, causing take three steps : ’re currently step 53.\n","code":"# NumPy is imported, seed is set\n\n# Starting step\nstep = 50\n\n# Roll the dice\ndice = np.random.randint(1,7)\n\n# Finish the control construct\nif dice <= 2 :\n    step = step - 1\nelif dice <= 5 :\n    step = step + 1\nelse :\n    step = step + np.random.randint(1,7)\n    \n# Print out dice and step\nprint(dice)## 5print(step)## 51"},{"path":"intermediate-python.html","id":"random-walk","chapter":"Intermediate Python","heading":"Random Walk","text":"","code":""},{"path":"intermediate-python.html","id":"the-next-step","chapter":"Intermediate Python","heading":"The next step","text":"\n, already written Python code determines next step based previous step. Now ’s time put code inside loop can simulate random walk.\n\nnumpy imported np.\n\nMake list random_walk contains first step, integer 0.\n\nFinish loop:\n\nloop run 100 times.\n\niteration, set step equal last element random_walk list. can use index -1 .\n\nNext, let -elif-else construct update step .\n\ncode appends step random_walk already coded.\n\nPrint random_walk.\n\nGood job! ’s still something wrong: level index 15 negative!\n","code":"# NumPy is imported, seed is set\n\n# Initialize random_walk\nrandom_walk = [0]\n\n# Complete the ___\nfor x in range(100) :\n    # Set step: last element in random_walk\n    step = random_walk[-1]\n\n    # Roll the dice\n    dice = np.random.randint(1,7)\n\n    # Determine next step\n    if dice <= 2:\n        step = step - 1\n    elif dice <= 5:\n        step = step + 1\n    else:\n        step = step + np.random.randint(1,7)\n\n    # append next_step to random_walk\n    random_walk.append(step)\n    \n# Print random_walk\nprint(random_walk)## [0, 1, 0, 1, 2, 3, 2, 1, 0, -1, -2, -3, -4, -5, -4, 1, 0, -1, 0, -1, 0, 1, 2, 3, 4, 3, 4, 3, 4, 5, 6, 7, 6, 10, 11, 10, 11, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 23, 28, 29, 33, 34, 33, 34, 35, 34, 35, 36, 38, 39, 40, 39, 38, 39, 40, 39, 38, 39, 40, 42, 41, 40, 41, 40, 41, 42, 43, 45, 44, 45, 46, 47, 48, 49, 48, 47, 48, 47, 48, 49, 48, 51, 52, 53, 54, 53, 54, 55, 59, 58]"},{"path":"intermediate-python.html","id":"how-low-can-you-go","chapter":"Intermediate Python","heading":"How low can you go?","text":"\nThings shaping nicely! already code calculates location Empire State Building 100 dice throws. However, ’s something haven’t thought - can’t go 0!\n\ntypical way solve problems like using max(). pass max() two arguments, biggest one gets returned. example, make sure variable x never goes 10 decrease , can use:\n\nUse max() similar way make sure step doesn’t go zero dice <= 2.\n\nHit Submit Answer check contents random_walk.\n\nlook closely output, ’ll see around index 15 step stays 0. ’re going zero anymore. Great!\n","code":"x = max(10, x - 1)\n# NumPy is imported, seed is set\n\n# Initialize random_walk\nrandom_walk = [0]\n\nfor x in range(100) :\n    step = random_walk[-1]\n    dice = np.random.randint(1,7)\n\n    if dice <= 2:\n        # Replace below: use max to make sure step can't go below 0\n        step = max(0, step - 1)\n    elif dice <= 5:\n        step = step + 1\n    else:\n        step = step + np.random.randint(1,7)\n\n    random_walk.append(step)\n    \nprint(random_walk)## [0, 0, 2, 1, 2, 4, 5, 6, 11, 10, 11, 12, 13, 14, 15, 14, 19, 20, 21, 22, 21, 20, 19, 18, 17, 18, 19, 20, 26, 25, 24, 23, 24, 25, 26, 25, 26, 27, 26, 31, 32, 31, 30, 29, 28, 29, 28, 27, 29, 30, 33, 34, 36, 37, 38, 39, 38, 37, 38, 39, 40, 41, 40, 41, 42, 43, 46, 47, 48, 47, 48, 47, 48, 49, 50, 54, 53, 52, 53, 54, 55, 54, 55, 54, 55, 57, 62, 61, 62, 63, 64, 65, 66, 67, 66, 67, 68, 69, 71, 73, 72]"},{"path":"intermediate-python.html","id":"visualize-the-walk","chapter":"Intermediate Python","heading":"Visualize the walk","text":"\nLet’s visualize random walk! Remember use matplotlib build line plot?\n\nfirst list pass mapped onto x axis second list mapped onto y axis.\n\npass one argument, Python know use index list map onto x axis, values list onto y axis.\n\nAdd lines code loop:\n\nImport matplotlib.pyplot plt.\n\nUse plt.plot() plot random_walk.\n\nFinish plt.show() actually display plot.\n\npretty cool! can clearly see random walk progressed.\n","code":"import matplotlib.pyplot as plt\nplt.plot(x, y)\nplt.show()\n# Import matplotlib.pyplot as plt\nimport matplotlib.pyplot as plt\n\n# NumPy is imported, seed is set\n\n# Initialization\nrandom_walk = [0]\n\nfor x in range(100) :\n    step = random_walk[-1]\n    dice = np.random.randint(1,7)\n\n    if dice <= 2:\n        step = max(0, step - 1)\n    elif dice <= 5:\n        step = step + 1\n    else:\n        step = step + np.random.randint(1,7)\n\n    random_walk.append(step)\n    \n# Plot random_walk\nplt.plot(random_walk)\n# Show the plot\nplt.show()"},{"path":"intermediate-python.html","id":"distribution","chapter":"Intermediate Python","heading":"Distribution","text":"","code":""},{"path":"intermediate-python.html","id":"simulate-multiple-walks","chapter":"Intermediate Python","heading":"Simulate multiple walks","text":"\nsingle random walk one thing, doesn’t tell good chance winning bet.\n\nget idea big chances reaching 60 steps, can repeatedly simulate random walk collect results. ’s exactly ’ll exercise.\n\nsample code already sets right direction. Another loop wrapped around code already wrote. ’s add bits pieces make sure results recorded correctly.\n\nNote: Don’t change anything initialization all_walks given. Setting number inside list cause exercise crash!\n\nFill specification loop random walk simulated 10 times.\n\nrandom_walk array entirely populated, append array all_walks list.\n\nFinally, top-level loop, print all_walks.\n\nWell done!\n","code":"# NumPy is imported; seed is set\n\n# Initialize all_walks (don't change this line)\nall_walks = []\n\n# Simulate random walk 10 times\nfor i in range(10) :\n\n    # Code from before\n    random_walk = [0]\n    for x in range(100) :\n        step = random_walk[-1]\n        dice = np.random.randint(1,7)\n\n        if dice <= 2:\n            step = max(0, step - 1)\n        elif dice <= 5:\n            step = step + 1\n        else:\n            step = step + np.random.randint(1,7)\n        random_walk.append(step)\n\n    # Append random_walk to all_walks\n    all_walks.append(random_walk)\n    \n# Print all_walks\nprint(all_walks)## [[0, 1, 2, 3, 4, 5, 6, 7, 8, 7, 8, 7, 6, 7, 6, 7, 6, 7, 8, 12, 13, 12, 18, 17, 16, 17, 16, 15, 16, 15, 19, 18, 19, 18, 19, 18, 19, 21, 20, 19, 18, 19, 18, 23, 24, 25, 24, 23, 24, 23, 24, 23, 28, 29, 28, 27, 26, 25, 26, 27, 31, 37, 38, 39, 40, 41, 40, 41, 43, 44, 45, 46, 45, 44, 45, 44, 45, 46, 47, 46, 47, 48, 49, 48, 47, 48, 49, 54, 55, 56, 61, 60, 61, 60, 61, 62, 63, 64, 63, 69, 68], [0, 1, 0, 0, 1, 5, 6, 7, 8, 9, 8, 7, 6, 5, 4, 5, 6, 7, 8, 9, 10, 9, 10, 11, 10, 11, 12, 15, 14, 15, 14, 15, 18, 19, 20, 21, 20, 19, 22, 23, 24, 25, 24, 23, 24, 27, 28, 33, 34, 33, 34, 33, 34, 33, 39, 38, 37, 38, 40, 39, 38, 37, 38, 39, 40, 41, 45, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 62, 61, 60, 61, 62, 61, 67, 66, 67, 68, 67, 66, 67, 66, 65, 71, 70, 69, 70, 71, 70, 69, 68, 67], [0, 1, 7, 8, 11, 12, 18, 19, 20, 26, 25, 31, 30, 31, 32, 33, 32, 38, 39, 38, 39, 38, 39, 38, 39, 38, 39, 43, 44, 46, 45, 46, 45, 44, 45, 44, 45, 44, 48, 52, 51, 50, 49, 50, 51, 55, 56, 57, 61, 60, 59, 58, 59, 60, 62, 61, 60, 61, 62, 64, 67, 72, 73, 72, 73, 74, 75, 76, 77, 76, 77, 78, 84, 83, 88, 87, 91, 90, 94, 93, 96, 97, 96, 97, 103, 102, 101, 100, 104, 103, 102, 103, 104, 103, 104, 105, 106, 107, 106, 105, 104], [0, 1, 0, 0, 4, 5, 7, 11, 17, 16, 15, 16, 17, 18, 17, 18, 17, 18, 19, 18, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 33, 32, 35, 36, 35, 34, 35, 36, 37, 36, 35, 34, 33, 34, 35, 36, 37, 38, 39, 40, 39, 40, 41, 43, 42, 43, 44, 47, 49, 50, 49, 48, 47, 46, 45, 46, 45, 46, 48, 49, 50, 49, 50, 49, 48, 49, 48, 47, 46, 47, 46, 45, 46, 47, 48, 50, 51, 52, 51, 50, 51, 57, 56, 57, 58, 63, 62, 63, 62, 63], [0, 1, 0, 1, 2, 8, 9, 10, 11, 10, 12, 13, 14, 15, 14, 15, 16, 17, 18, 17, 18, 17, 18, 19, 18, 19, 23, 24, 27, 28, 32, 33, 32, 33, 34, 33, 32, 37, 38, 39, 38, 37, 38, 39, 40, 39, 43, 42, 43, 44, 45, 46, 47, 48, 49, 48, 47, 46, 47, 48, 52, 53, 52, 53, 54, 53, 59, 60, 61, 62, 61, 62, 63, 66, 65, 66, 65, 64, 63, 64, 65, 67, 68, 69, 73, 74, 73, 72, 73, 74, 73, 72, 73, 74, 75, 74, 73, 74, 75, 76, 75], [0, 1, 2, 1, 0, 0, 1, 2, 3, 4, 5, 10, 14, 13, 14, 13, 12, 11, 12, 11, 12, 13, 12, 16, 17, 16, 17, 16, 15, 16, 15, 19, 20, 21, 22, 23, 24, 23, 24, 25, 26, 27, 28, 27, 32, 33, 34, 33, 34, 33, 34, 35, 34, 35, 40, 41, 42, 41, 42, 43, 44, 43, 44, 43, 44, 45, 44, 43, 42, 43, 44, 43, 42, 41, 42, 46, 47, 48, 49, 50, 51, 50, 51, 52, 51, 52, 57, 58, 57, 56, 57, 56, 55, 54, 58, 59, 60, 61, 60, 61, 62], [0, 1, 2, 3, 2, 1, 4, 3, 2, 1, 0, 1, 7, 8, 7, 8, 9, 8, 7, 8, 9, 10, 9, 13, 14, 13, 15, 16, 15, 16, 17, 18, 19, 20, 21, 20, 19, 20, 21, 20, 21, 22, 21, 20, 19, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 31, 32, 33, 34, 35, 36, 35, 34, 40, 41, 42, 41, 40, 39, 43, 44, 48, 47, 53, 54, 55, 59, 60, 59, 58, 59, 60, 61, 62, 61, 67, 68, 67, 71, 72, 71, 72, 71, 77, 83, 84, 83, 84, 85, 86, 87], [0, 1, 0, 3, 2, 4, 5, 11, 10, 11, 12, 11, 10, 11, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 23, 24, 25, 26, 25, 24, 23, 24, 23, 27, 26, 25, 26, 28, 29, 34, 33, 34, 35, 39, 38, 39, 40, 39, 38, 39, 40, 41, 40, 39, 38, 39, 38, 37, 38, 37, 36, 35, 36, 37, 36, 35, 34, 35, 36, 37, 36, 35, 36, 37, 38, 39, 38, 39, 38, 39, 40, 41, 42, 43, 48, 53, 52, 53, 54, 53, 54, 60, 59, 60, 59, 60], [0, 0, 1, 2, 3, 2, 1, 2, 3, 4, 3, 2, 1, 3, 4, 5, 4, 3, 2, 3, 4, 5, 4, 3, 4, 7, 12, 15, 16, 17, 23, 24, 25, 26, 25, 27, 32, 33, 34, 35, 36, 37, 38, 37, 38, 39, 40, 41, 42, 44, 48, 49, 50, 51, 52, 56, 61, 60, 59, 58, 57, 60, 61, 62, 63, 62, 61, 64, 65, 64, 63, 62, 63, 64, 65, 66, 65, 66, 65, 66, 67, 66, 67, 68, 69, 70, 71, 72, 73, 72, 71, 72, 73, 76, 77, 76, 75, 76, 77, 78, 83], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 4, 3, 2, 3, 4, 5, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 21, 22, 23, 24, 25, 26, 25, 24, 23, 24, 25, 26, 27, 29, 30, 31, 32, 34, 38, 37, 36, 35, 34, 35, 36, 37, 36, 35, 34, 33, 32, 31, 32, 36, 40, 41, 42, 41, 40, 41, 42, 43, 49, 50, 49, 48, 49, 48, 49, 48, 49, 50, 49, 50, 49, 48, 49, 50, 49, 50, 49, 50, 53, 54, 55, 56, 57, 56, 57, 58, 63, 62, 63, 64]]"},{"path":"intermediate-python.html","id":"visualize-all-walks","chapter":"Intermediate Python","heading":"Visualize all walks","text":"\nall_walks list lists: every sub-list represents single random walk. convert list lists NumPy array, can start making interesting plots! matplotlib.pyplot already imported plt.\n\nnested loop already coded - don’t worry . now, focus code comes loop.\n\nUse np.array() convert all_walks NumPy array, np_aw.\n\nTry use plt.plot() np_aw. Also include plt.show(). work box?\n\nTranspose np_aw calling np.transpose() np_aw. Call result np_aw_t. Now every row np_all_walks represents position 1 throw 10 random walks.\n\nUse plt.plot() plot np_aw_t; also include plt.show(). look better time?\n\nGood job! can clearly see different simulations random walk went. Transposing 2D NumPy array crucial; otherwise Python misunderstood.\n","code":"# numpy and matplotlib imported, seed set.\n\n# initialize and populate all_walks\nall_walks = []\nfor i in range(10) :\n    random_walk = [0]\n    for x in range(100) :\n        step = random_walk[-1]\n        dice = np.random.randint(1,7)\n        if dice <= 2:\n            step = max(0, step - 1)\n        elif dice <= 5:\n            step = step + 1\n        else:\n            step = step + np.random.randint(1,7)\n        random_walk.append(step)\n    all_walks.append(random_walk)\n\n# Convert all_walks to NumPy array: np_aw\nnp_aw = np.array(all_walks)\n\n# Plot np_aw and show\nplt.plot(np_aw)\nplt.show()# Clear the figure\nplt.clf()# Transpose np_aw: np_aw_t\nnp_aw_t = np.transpose(np_aw)\n\n# Plot np_aw_t and show\nplt.plot(np_aw_t)\nplt.show()"},{"path":"intermediate-python.html","id":"implement-clumsiness","chapter":"Intermediate Python","heading":"Implement clumsiness","text":"\nneatly written code , changing number times random walk simulated super-easy. simply update range() function top-level loop.\n\n’s still something forgot! ’re bit clumsy 0.1% chance falling . calls another random number generation. Basically, can generate random float 0 1. value less equal 0.001, reset step 0.\n\nChange range() function simulation performed 250 times.\n\nFinish condition step set 0 random float less equal 0.001. Use np.random.rand().\n\nSuperb! Look plot. 250 simulations ’re indeed taking deep dive !\n","code":"# numpy and matplotlib imported, seed set\n\n# Simulate random walk 250 times\nall_walks = []\nfor i in range(250) :\n    random_walk = [0]\n    for x in range(100) :\n        step = random_walk[-1]\n        dice = np.random.randint(1,7)\n        if dice <= 2:\n            step = max(0, step - 1)\n        elif dice <= 5:\n            step = step + 1\n        else:\n            step = step + np.random.randint(1,7)\n\n        # Implement clumsiness\n        if np.random.rand() <= 0.001 :\n            step = 0\n\n        random_walk.append(step)\n    all_walks.append(random_walk)\n\n# Create and plot np_aw_t\nnp_aw_t = np.transpose(np.array(all_walks))\nplt.plot(np_aw_t)\nplt.show()"},{"path":"intermediate-python.html","id":"plot-the-distribution","chapter":"Intermediate Python","heading":"Plot the distribution","text":"\nfancy visualizations put us sidetrack. still solve million-dollar problem: odds ’ll reach 60 steps high Empire State Building?\n\nBasically, want know end points random walks ’ve simulated. end points certain distribution can visualize histogram.\n\nNote code taking long run, might plotting histogram wrong data!\n\nmake sure ’ve got enough simulations, go crazy. Simulate random walk 500 times.\n\nnp_aw_t, select last row. contains endpoint 500 random walks ’ve simulated. Store NumPy array ends.\n\nUse plt.hist() build histogram ends. Don’t forget plt.show() display plot.\n\nGreat job! look histogram; think chances ?\n","code":"# numpy and matplotlib imported, seed set\n\n# Simulate random walk 500 times\nall_walks = []\nfor i in range(500) :\n    random_walk = [0]\n    for x in range(100) :\n        step = random_walk[-1]\n        dice = np.random.randint(1,7)\n        if dice <= 2:\n            step = max(0, step - 1)\n        elif dice <= 5:\n            step = step + 1\n        else:\n            step = step + np.random.randint(1,7)\n        if np.random.rand() <= 0.001 :\n            step = 0\n        random_walk.append(step)\n    all_walks.append(random_walk)\n\n# Create and plot np_aw_t\nnp_aw_t = np.transpose(np.array(all_walks))\n\n# Select last row from np_aw_t: ends\nends = np_aw_t[-1,:]\n\n# Plot histogram of ends, display plot\nplt.hist(ends)## (array([ 14.,  13.,  13.,  28.,  97., 151., 103.,  61.,  19.,   1.]), array([  2. ,  14.8,  27.6,  40.4,  53.2,  66. ,  78.8,  91.6, 104.4,\n##        117.2, 130. ]), <BarContainer object of 10 artists>)plt.show()"},{"path":"intermediate-python.html","id":"calculate-the-odds","chapter":"Intermediate Python","heading":"Calculate the odds","text":"\nhistogram previous exercise created NumPy array ends, contains 500 integers. integer represents end point random walk. calculate chance end point greater equal 60, can count number integers ends greater equal 60 divide number 500, total number simulations.\n\nWell , ’s estimated chance ’ll reach 60 steps high play Empire State Building game? ends array everything need; ’s available Python session can make calculations IPython Shell.\n48.8%76.6%78.4%95.9%\nCorrect! Seems like pretty high chance winning bet!\n","code":"# edited/added\nsum(ends>60)/len(ends)## 0.76"},{"path":"python-data-science-toolbox-part-1.html","id":"python-data-science-toolbox-part-1","chapter":"Python Data Science Toolbox (Part 1)","heading":"Python Data Science Toolbox (Part 1)","text":"\n’s time push forward develop Python chops even . tons fantastic functions Python library ecosystem. However, data scientist, ’ll constantly need write functions solve problems dictated data. learn art function writing first Python Data Science Toolbox course. ’ll come course able write custom functions, complete multiple parameters multiple return values, along default arguments variable-length arguments. ’ll gain insight scoping Python able write lambda functions handle errors function writing practice. ’ll wrap chapter using new skills write functions analyze Twitter DataFrames.\n","code":""},{"path":"python-data-science-toolbox-part-1.html","id":"writing-your-own-functions","chapter":"Python Data Science Toolbox (Part 1)","heading":"Writing your own functions","text":"\nchapter, ’ll learn write simple functions, well functions accept multiple arguments return multiple values. ’ll also opportunity apply new skills questions commonly encountered data scientists.\n","code":""},{"path":"python-data-science-toolbox-part-1.html","id":"user-defined-functions","chapter":"Python Data Science Toolbox (Part 1)","heading":"User-defined functions","text":"","code":""},{"path":"python-data-science-toolbox-part-1.html","id":"strings-in-python","chapter":"Python Data Science Toolbox (Part 1)","heading":"Strings in Python","text":"\nvideo, learned another standard Python datatype, strings. Recall represent textual data. assign string ‘DataCamp’ variable company, execute:\n\n’ve also learned use operations + * strings. Unlike numeric types ints floats, + operator concatenates strings together, * concatenates multiple copies string together. exercise, use + * operations strings answer question . Execute following code shell:\n\nvalues object1, object2, object3, respectively?\nobject1 contains “data + analysis + visualization”, object2 contains “1*3”, object3 contains 13.object1 contains “data+analysis+visualization”, object2 contains 3, object3 contains “13”.object1 contains “dataanalysisvisualization”, object2 contains 3, object3 contains “111”.\nCorrect!\n","code":"company = 'DataCamp'\nobject1 = \"data\" + \"analysis\" + \"visualization\"\nobject2 = 1 * 3\nobject3 = \"1\" * 3\n"},{"path":"python-data-science-toolbox-part-1.html","id":"recapping-built-in-functions","chapter":"Python Data Science Toolbox (Part 1)","heading":"Recapping built-in functions","text":"\nvideo, Hugo briefly examined return behavior built-functions print() str(). , use functions examine return values. variable x preloaded exercise. Run code console. Pay close attention results answer question follows.\n\nAssign str(x) variable y1: y1 = str(x)\n\nAssign print(x) variable y2: y2 = print(x)\n\nCheck types variables x, y1, y2.\n\ntypes x, y1, y2?\nstr types.x float, y1 float, y2 str.x float, y1 str, y2 NoneType.NoneType types.\nCorrect! important remember assigning variable y2 function prints value return value result variable y2 type NoneType.\n","code":"# edited/added\nx = 4.89\ny1 = str(x)\ny2 = print(x)## 4.89type(x),type(y1),type(y2)## (<class 'float'>, <class 'str'>, <class 'NoneType'>)"},{"path":"python-data-science-toolbox-part-1.html","id":"write-a-simple-function","chapter":"Python Data Science Toolbox (Part 1)","heading":"Write a simple function","text":"\nlast video, Hugo described basics define function. now write function!\n\nDefine function, shout(), simply prints string three exclamation marks ‘!!!’ end. code square() function wrote earlier found . can use pattern define shout().\n\nNote function body indented 4 spaces already . Function bodies need indented consistent number spaces choice 4 common.\n\ncourse touches lot concepts may forgotten, ever need quick refresher, download Python Data Science Cheat Sheet keep handy!\n\nComplete function header adding appropriate function name, shout.\n\nfunction body, concatenate string, ‘congratulations’ another string, ‘!!!’. Assign result shout_word.\n\nPrint value shout_word.\n\nCall shout function.\n\nGreat work!\n","code":"def square():\n    new_value = 4 ** 2\n    return new_value\n# Define the function shout\ndef shout():\n    \"\"\"Print a string with three exclamation marks\"\"\"\n    # Concatenate the strings: shout_word\n    shout_word = 'congratulations' + '!!!'\n\n    # Print shout_word\n    print(shout_word)\n\n# Call shout\nshout()## congratulations!!!"},{"path":"python-data-science-toolbox-part-1.html","id":"single-parameter-functions","chapter":"Python Data Science Toolbox (Part 1)","heading":"Single-parameter functions","text":"\nCongratulations! successfully defined called function! ’s pretty cool.\n\nprevious exercise, defined called function shout(), printed string concatenated ‘!!!’.\nnow update shout() adding parameter can accept process string argument passed . Also note shout(word), part header specifies function name parameter(s), known signature function. may encounter term wild!\n\nComplete function header adding parameter name, word.\n\nAssign result concatenating word ‘!!!’ shout_word.\n\nPrint value shout_word.\n\nCall shout() function, passing string, ‘congratulations’.\n\nGreat work!\n","code":"# Define shout with the parameter, word\ndef shout(word):\n    \"\"\"Print a string with three exclamation marks\"\"\"\n    # Concatenate the strings: shout_word\n    shout_word = word + '!!!'\n\n    # Print shout_word\n    print(shout_word)\n    \n# Call shout with the string 'congratulations'\nshout('congratulations')## congratulations!!!"},{"path":"python-data-science-toolbox-part-1.html","id":"functions-that-return-single-values","chapter":"Python Data Science Toolbox (Part 1)","heading":"Functions that return single values","text":"\n’re getting good ! Try hand another modification shout() function now returns single value instead printing within function. Recall return keyword lets return values functions. Parts function shout(), wrote earlier, shown. Returning values generally desirable printing , saw earlier, print() call assigned variable type NoneType.\n\nfunction body, concatenate string word ‘!!!’ assign shout_word.\n\nReplace print() statement appropriate return statement.\n\nCall shout() function, passing string, ‘congratulations’, assigning call variable, yell.\n\ncheck yell contains value returned shout(), print value yell.\n\nGreat work! made sense assign output shout(‘congratulations’) variable yell function shout actually returns value, merely print one.\n","code":"# Define shout with the parameter, word\ndef shout(word):\n    \"\"\"Return a string with three exclamation marks\"\"\"\n    # Concatenate the strings: shout_word\n    shout_word = word + '!!!'\n\n    # Replace print with return\n    return shout_word\n  \n# Pass 'congratulations' to shout: yell\nyell = shout('congratulations')\n\n# Print yell\nprint(yell)## congratulations!!!"},{"path":"python-data-science-toolbox-part-1.html","id":"multiple-parameters-and-return-values","chapter":"Python Data Science Toolbox (Part 1)","heading":"Multiple parameters and return values","text":"","code":""},{"path":"python-data-science-toolbox-part-1.html","id":"functions-with-multiple-parameters","chapter":"Python Data Science Toolbox (Part 1)","heading":"Functions with multiple parameters","text":"\nHugo discussed use multiple parameters defining functions last lecture. now going use ’ve learned modify shout() function . , modify shout() accept two arguments. Parts function shout(), wrote earlier, shown.\n\nModify function header accepts two parameters, word1 word2, order.\n\nConcatenate word1 word2 ‘!!!’ assign shout1 shout2, respectively.\n\nConcatenate shout1 shout2 together, order, assign new_shout.\n\nPass strings ‘congratulations’ ‘’, order, call shout(). Assign return value yell.\n\nGreat work!\n","code":"# Define shout with parameters word1 and word2\ndef shout(word1, word2):\n    \"\"\"Concatenate strings with three exclamation marks\"\"\"\n    # Concatenate word1 with '!!!': shout1\n    shout1 = word1 + '!!!'\n    \n    # Concatenate word2 with '!!!': shout2\n    shout2 = word2 + '!!!'\n    \n    # Concatenate shout1 with shout2: new_shout\n    new_shout = shout1 + shout2\n\n    # Return new_shout\n    return new_shout\n  \n# Pass 'congratulations' and 'you' to shout: yell\nyell = shout('congratulations', 'you')\n\n# Print yell\nprint(yell)## congratulations!!!you!!!"},{"path":"python-data-science-toolbox-part-1.html","id":"a-brief-introduction-to-tuples","chapter":"Python Data Science Toolbox (Part 1)","heading":"A brief introduction to tuples","text":"\nAlongside learning functions, ’ve also learned tuples! , practice ’ve learned tuples: construct, unpack, access tuple elements. Recall Hugo unpacked tuple even_nums video:\n\n, b, c = even_nums\n\nthree-element tuple named nums preloaded exercise. completing script, perform following:\n\nPrint value nums IPython shell. Note elements tuple.\n\nIPython shell, try change first element nums value 2 assignment: nums[0] = 2. happens?\n\nUnpack nums variables num1, num2, num3.\n\nConstruct new tuple, even_nums composed elements nums, 1st element replaced value, 2.\n\nGreat work!\n","code":"# edited/added\nnums = (3,4,6)\n\n# Unpack nums into num1, num2, and num3\nnum1, num2, num3 = nums\n\n# Construct even_nums\neven_nums = (2, num2, num3)"},{"path":"python-data-science-toolbox-part-1.html","id":"functions-that-return-multiple-values","chapter":"Python Data Science Toolbox (Part 1)","heading":"Functions that return multiple values","text":"\nprevious exercise, constructed tuples, assigned tuples variables, unpacked tuples. return multiple values function using tuples. Let’s now update shout() function return multiple values. Instead returning just one string, return two strings string !!! concatenated .\n\nNote return statement return x, y result return (x, y): former actually packs x y tuple hood!\n\nModify function header function name now shout_all, accepts two parameters, word1 word2, order.\n\nConcatenate string ‘!!!’ word1 word2 assign shout1 shout2, respectively.\n\nConstruct tuple shout_words, composed shout1 shout2.\n\nCall shout_all() strings ‘congratulations’ ‘’ assign result yell1 yell2 (remember, shout_all() returns 2 variables!).\n\nGreat work!\n","code":"# Define shout_all with parameters word1 and word2\ndef shout_all(word1, word2):\n    \"\"\"Return a tuple of strings\"\"\"\n    # Concatenate word1 with '!!!': shout1\n    shout1 = word1 + '!!!'\n    \n    # Concatenate word2 with '!!!': shout2\n    shout2 = word2 + '!!!'\n    \n    # Construct a tuple with shout1 and shout2: shout_words\n    shout_words = (shout1, shout2)\n\n    # Return shout_words\n    return shout_words\n  \n# Pass 'congratulations' and 'you' to shout_all(): yell1, yell2\nyell1, yell2 = shout_all('congratulations', 'you')\n\n# Print yell1 and yell2\nprint(yell1)## congratulations!!!print(yell2)## you!!!"},{"path":"python-data-science-toolbox-part-1.html","id":"bringing-it-all-together","chapter":"Python Data Science Toolbox (Part 1)","heading":"Bringing it all together","text":"","code":""},{"path":"python-data-science-toolbox-part-1.html","id":"bringing-it-all-together-1","chapter":"Python Data Science Toolbox (Part 1)","heading":"Bringing it all together (1)","text":"\n’ve got first taste writing functions previous exercises. ’ve learned add parameters function definitions, return value multiple values tuples, call functions ’ve defined.\n\nfollowing exercise, bring together concepts apply simple data science problem. load dataset develop functionalities extract simple insights data.\n\nexercise, goal recall load dataset DataFrame. dataset contains Twitter data iterate entries column build dictionary keys names languages values number tweets given language. file tweets.csv available current directory.\n\naware real data Twitter always risk may contain profanity offensive content (exercise, following exercises also use real Twitter data).\n\nImport pandas package alias pd.\n\nImport file ‘tweets.csv’ using pandas function read_csv(). Assign resulting DataFrame df.\n\nComplete loop iterating col, ‘lang’ column DataFrame df.\n\nComplete bodies -else statements loop: key dictionary langs_count, add 1 value corresponding key dictionary, else add key langs_count set corresponding value 1. Use loop variable entry code.\n\nGreat work!\n","code":"# Import pandas\nimport pandas as pd\n\n# Import Twitter data as DataFrame: df\ndf = pd.read_csv('datasets/Python-Data-Science-Toolbox-Part-1/tweets.csv') # edited/added\n\n# Initialize an empty dictionary: langs_count\nlangs_count = {}\n\n# Extract column from DataFrame: col\ncol = df['lang']\n\n# Iterate over lang column in DataFrame\nfor entry in col:\n\n    # If the language is in langs_count, add 1\n    if entry in langs_count.keys():\n        langs_count[entry] += 1\n    # Else add the language to langs_count, set the value to 1\n    else:\n        langs_count[entry] = 1\n\n# Print the populated dictionary\nprint(langs_count)## {'en': 97, 'et': 1, 'und': 2}"},{"path":"python-data-science-toolbox-part-1.html","id":"bringing-it-all-together-2","chapter":"Python Data Science Toolbox (Part 1)","heading":"Bringing it all together (2)","text":"\nGreat job! ’ve now defined functionality iterating entries column building dictionary keys names languages values number tweets given language.\n\nexercise, define function functionality developed previous exercise, return resulting dictionary within function, call function appropriate arguments.\n\nconvenience, pandas package imported pd ‘tweets.csv’ file imported tweets_df variable.\n\nDefine function count_entries(), two parameters. first parameter df DataFrame second col_name column name.\n\nComplete bodies -else statements loop: key dictionary langs_count, add 1 current value, else add key langs_count set value 1. Use loop variable entry code.\n\nReturn langs_count dictionary inside count_entries() function.\n\nCall count_entries() function passing tweets_df name column, ‘lang’. Assign result call variable result.\n\nGreat work!\n","code":"# Define count_entries()\ndef count_entries(df, col_name):\n    \"\"\"Return a dictionary with counts of \n    occurrences as value for each key.\"\"\"\n\n    # Initialize an empty dictionary: langs_count\n    langs_count = {}\n    \n    # Extract column from DataFrame: col\n    col = df[col_name]\n\n    # Iterate over lang column in DataFrame\n    for entry in col:\n\n        # If the language is in langs_count, add 1\n        if entry in langs_count.keys():\n            langs_count[entry] += 1\n        # Else add the language to langs_count, set the value to 1\n        else:\n            langs_count[entry] = 1\n\n    # Return the langs_count dictionary\n    return langs_count\n  \n# edited/added\ntweets_df = pd.read_csv('datasets/Python-Data-Science-Toolbox-Part-1/tweets.csv')\n\n# Call count_entries(): result\nresult = count_entries(tweets_df, 'lang')\n\n# Print the result\nprint(result)## {'en': 97, 'et': 1, 'und': 2}"},{"path":"python-data-science-toolbox-part-1.html","id":"default-arguments-variable-length-arguments-and-scope","chapter":"Python Data Science Toolbox (Part 1)","heading":"Default arguments, variable-length arguments and scope","text":"\nchapter, ’ll learn write functions default arguments user doesn’t always need specify , variable-length arguments can pass arbitrary number arguments functions. ’ll also learn essential concept scope.\n","code":""},{"path":"python-data-science-toolbox-part-1.html","id":"scope-and-user-defined-functions","chapter":"Python Data Science Toolbox (Part 1)","heading":"Scope and user-defined functions","text":"","code":""},{"path":"python-data-science-toolbox-part-1.html","id":"pop-quiz-on-understanding-scope","chapter":"Python Data Science Toolbox (Part 1)","heading":"Pop quiz on understanding scope","text":"\nexercise, practice ’ve learned scope functions. variable num predefined 5, alongside following function definitions:\n\nTry calling func1() func2() shell, answer following questions:\n\nvalues printed call func1() func2()?\n\nvalue num global scope calling func1() func2()?\nfunc1() prints 3, func2() prints 6, value num global scope 3.func1() prints 3, func2() prints 3, value num global scope 3.func1() prints 3, func2() prints 10, value num global scope 10.func1() prints 3, func2() prints 10, value num global scope 6.\nCorrect!\n","code":"def func1():\n    num = 3\n    print(num)\n\ndef func2():\n    global num\n    double_num = num * 2\n    num = 6\n    print(double_num)\n"},{"path":"python-data-science-toolbox-part-1.html","id":"the-keyword-global","chapter":"Python Data Science Toolbox (Part 1)","heading":"The keyword global","text":"\nLet’s work mastery scope. exercise, use keyword global within function alter value variable defined global scope.\n\nUse keyword global alter object team global scope.\n\nChange value team global scope string “justice league”. Assign result team.\n\nHit Submit button see executing newly defined function change_team() changes value name team!\n\nGreat work!\n","code":"# Create a string: team\nteam = \"teen titans\"\n\n# Define change_team()\ndef change_team():\n    \"\"\"Change the value of the global variable team.\"\"\"\n\n    # Use team in global scope\n    global team\n\n    # Change the value of team in global: team\n    team = \"justice league\"\n    \n# Print team\nprint(team)## teen titans# Call change_team()\nchange_team()\n\n# Print team\nprint(team)## justice league"},{"path":"python-data-science-toolbox-part-1.html","id":"pythons-built-in-scope","chapter":"Python Data Science Toolbox (Part 1)","heading":"Python’s built-in scope","text":"\n’re going check Python’s built-scope, really just built-module called builtins. However, query builtins, ’ll need import builtins ‘name builtins built …, ’m serious!’ (Learning Python, 5th edition, Mark Lutz).\nexecuting import builtins IPython Shell, execute dir(builtins) print list names module builtins. look ’ll see bunch names ’ll recognize! following names module builtins?\n‘sum’‘range’‘array’‘tuple’\ngot !\n","code":""},{"path":"python-data-science-toolbox-part-1.html","id":"nested-functions","chapter":"Python Data Science Toolbox (Part 1)","heading":"Nested functions","text":"","code":""},{"path":"python-data-science-toolbox-part-1.html","id":"nested-functions-i","chapter":"Python Data Science Toolbox (Part 1)","heading":"Nested Functions I","text":"\n’ve learned last video nesting functions within functions. One reason ’d like avoid writing computations within functions repeatedly. ’s nothing new defining nested functions: simply define regular function def embed inside another function!\n\nexercise, inside function three_shouts(), define nested function inner() concatenates string object !!!. three_shouts() returns tuple three elements, string concatenated !!! using inner(). Go !\n\nComplete function header nested function function name inner() single parameter word.\n\nComplete return value: element tuple call inner(), passing parameters three_shouts() arguments call.\n\nGreat work!\n","code":"# Define three_shouts\ndef three_shouts(word1, word2, word3):\n    \"\"\"Returns a tuple of strings\n    concatenated with '!!!'.\"\"\"\n\n    # Define inner\n    def inner(word):\n        \"\"\"Returns a string concatenated with '!!!'.\"\"\"\n        return word + '!!!'\n\n    # Return a tuple of strings\n    return (inner(word1), inner(word2), inner(word3))\n\n# Call three_shouts() and print\nprint(three_shouts('a', 'b', 'c'))## ('a!!!', 'b!!!', 'c!!!')"},{"path":"python-data-science-toolbox-part-1.html","id":"nested-functions-ii","chapter":"Python Data Science Toolbox (Part 1)","heading":"Nested Functions II","text":"\nGreat job, ’ve just nested function within another function. One pretty cool reason nesting functions idea closure. means nested inner function remembers state enclosing scope called. Thus, anything defined locally enclosing scope available inner function even outer function finished execution.\n\nLet’s move forward ! exercise, complete definition inner function inner_echo() call echo() couple times, different argument. Complete exercise see output !\n\nComplete function header inner function function name inner_echo() single parameter word1.\n\nComplete function echo() returns inner_echo.\n\ncalled echo(), passing 2 argument, assigned resulting function twice. job call echo(), passing 3 argument. Assign resulting function thrice.\n\nHit Submit call twice() thrice() print results.\n\nGreat work!\n","code":"# Define echo\ndef echo(n):\n    \"\"\"Return the inner_echo function.\"\"\"\n\n    # Define inner_echo\n    def inner_echo(word1):\n        \"\"\"Concatenate n copies of word1.\"\"\"\n        echo_word = word1 * n\n        return echo_word\n\n    # Return inner_echo\n    return inner_echo\n  \n# Call echo: twice\ntwice = echo(2)\n\n# Call echo: thrice\nthrice = echo(3)\n\n# Call twice() and thrice() then print\nprint(twice('hello'), thrice('hello'))## hellohello hellohellohello"},{"path":"python-data-science-toolbox-part-1.html","id":"the-keyword-nonlocal-and-nested-functions","chapter":"Python Data Science Toolbox (Part 1)","heading":"The keyword nonlocal and nested functions","text":"\nLet’s work mastery scope! exercise, use keyword nonlocal within nested function alter value variable defined enclosing scope.\n\nAssign echo_word string word, concatenated .\n\nUse keyword nonlocal alter value echo_word enclosing scope.\n\nAlter echo_word echo_word concatenated ‘!!!’.\n\nCall function echo_shout(), passing single argument ‘hello’.\n\nQuite something, nonlocal keyword!\n","code":"# Define echo_shout()\ndef echo_shout(word):\n    \"\"\"Change the value of a nonlocal variable\"\"\"\n    \n    # Concatenate word with itself: echo_word\n    echo_word = word*2\n    \n    # Print echo_word\n    print(echo_word)\n    \n    # Define inner function shout()\n    def shout():\n        \"\"\"Alter a variable in the enclosing scope\"\"\"\n        \n        # Use echo_word in nonlocal scope\n        nonlocal echo_word\n        \n        # Change echo_word to echo_word concatenated with '!!!'\n        echo_word = echo_word + '!!!'\n    \n    # Call function shout()\n    shout()\n    \n    # Print echo_word\n    print(echo_word)\n    \n# Call function echo_shout() with argument 'hello'\necho_shout('hello')## hellohello\n## hellohello!!!"},{"path":"python-data-science-toolbox-part-1.html","id":"default-and-flexible-arguments","chapter":"Python Data Science Toolbox (Part 1)","heading":"Default and flexible arguments","text":"","code":""},{"path":"python-data-science-toolbox-part-1.html","id":"functions-with-one-default-argument","chapter":"Python Data Science Toolbox (Part 1)","heading":"Functions with one default argument","text":"\nprevious chapter, ’ve learned define functions one parameter calling functions passing required number arguments. last video, Hugo built idea showing define functions default arguments. practice skill exercise writing function uses default argument calling function couple times.\n\nComplete function header function name shout_echo. accepts argument word1 default argument echo default value 1, order.\n\nUse * operator concatenate echo copies word1. Assign result echo_word.\n\nCall shout_echo() just string, “Hey”. Assign result no_echo.\n\nCall shout_echo() string “Hey” value 5 default argument, echo. Assign result with_echo.\n\nGreat work!\n","code":"# Define shout_echo\ndef shout_echo(word1, echo=1):\n    \"\"\"Concatenate echo copies of word1 and three\n     exclamation marks at the end of the string.\"\"\"\n\n    # Concatenate echo copies of word1 using *: echo_word\n    echo_word = word1 * echo\n\n    # Concatenate '!!!' to echo_word: shout_word\n    shout_word = echo_word + '!!!'\n\n    # Return shout_word\n    return shout_word\n  \n# Call shout_echo() with \"Hey\": no_echo\nno_echo = shout_echo(\"Hey\")\n\n# Call shout_echo() with \"Hey\" and echo=5: with_echo\nwith_echo = shout_echo(\"Hey\", echo=5)\n\n# Print no_echo and with_echo\nprint(no_echo)## Hey!!!print(with_echo)## HeyHeyHeyHeyHey!!!"},{"path":"python-data-science-toolbox-part-1.html","id":"functions-with-multiple-default-arguments","chapter":"Python Data Science Toolbox (Part 1)","heading":"Functions with multiple default arguments","text":"\n’ve now defined function uses default argument - don’t stop just yet! now try hand defining function one default argument calling function various ways.\n\ndefining function, call supplying values default arguments function. Additionally, call function passing value one default arguments - see changes output function!\n\nComplete function header function name shout_echo. accepts argument word1, default argument echo default value 1 default argument intense default value False, order.\n\nbody statement, make string object echo_word upper case applying method .upper() .\n\nCall shout_echo() string, “Hey”, value 5 echo value True intense. Assign result with_big_echo.\n\nCall shout_echo() string “Hey” value True intense. Assign result big_no_echo.\n\nGreat work!\n","code":"# Define shout_echo\ndef shout_echo(word1, echo=1, intense=False):\n    \"\"\"Concatenate echo copies of word1 and three\n    exclamation marks at the end of the string.\"\"\"\n\n    # Concatenate echo copies of word1 using *: echo_word\n    echo_word = word1 * echo\n\n    # Make echo_word uppercase if intense is True\n    if intense is True:\n        # Make uppercase and concatenate '!!!': echo_word_new\n        echo_word_new = echo_word.upper() + '!!!'\n    else:\n        # Concatenate '!!!' to echo_word: echo_word_new\n        echo_word_new = echo_word + '!!!'\n\n    # Return echo_word_new\n    return echo_word_new\n  \n# Call shout_echo() with \"Hey\", echo=5 and intense=True: with_big_echo\nwith_big_echo = shout_echo(\"Hey\", echo=5, intense=True)\n\n# Call shout_echo() with \"Hey\" and intense=True: big_no_echo\nbig_no_echo = shout_echo(\"Hey\", intense=True)\n\n# Print with_big_echo and big_no_echo\nprint(with_big_echo)## HEYHEYHEYHEYHEY!!!print(big_no_echo)## HEY!!!"},{"path":"python-data-science-toolbox-part-1.html","id":"functions-with-variable-length-arguments-args","chapter":"Python Data Science Toolbox (Part 1)","heading":"Functions with variable-length arguments (*args)","text":"\nFlexible arguments enable pass variable number arguments function. exercise, practice defining function accepts variable number string arguments.\n\nfunction define gibberish() can accept variable number string values. return value single string composed string arguments concatenated together order passed function call. call function single string argument see output changes another call using one string argument. Recall previous video , within function definition, args tuple.\n\nComplete function header function name gibberish. accepts single flexible argument *args.\n\nInitialize variable hodgepodge empty string.\n\nReturn variable hodgepodge end function body.\n\nCall gibberish() single string, “luke”. Assign result one_word.\n\nHit Submit button call gibberish() multiple arguments print value Shell.\n\nGreat work!\n","code":"# Define gibberish\ndef gibberish(*args):\n    \"\"\"Concatenate strings in *args together.\"\"\"\n\n    # Initialize an empty string: hodgepodge\n    hodgepodge = ''\n\n    # Concatenate the strings in args\n    for word in args:\n        hodgepodge += word\n\n    # Return hodgepodge\n    return hodgepodge\n  \n# Call gibberish() with one string: one_word\none_word = gibberish(\"luke\")\n\n# Call gibberish() with five strings: many_words\nmany_words = gibberish(\"luke\", \"leia\", \"han\", \"obi\", \"darth\")\n\n# Print one_word and many_words\nprint(one_word)## lukeprint(many_words)## lukeleiahanobidarth"},{"path":"python-data-science-toolbox-part-1.html","id":"functions-with-variable-length-keyword-arguments-kwargs","chapter":"Python Data Science Toolbox (Part 1)","heading":"Functions with variable-length keyword arguments (**kwargs)","text":"\nLet’s push ’ve learned flexible arguments - ’ve used *args, ’re now going use **kwargs! makes **kwargs different allows pass variable number keyword arguments functions. Recall previous video , within function definition, kwargs dictionary.\n\nunderstand idea better, ’re going use **kwargs exercise define function accepts variable number keyword arguments. function simulates simple status report system prints status character movie.\n\nComplete function header function name report_status. accepts single flexible argument **kwargs.\n\nIterate key-value pairs kwargs print keys values, separated colon ‘:’.\n\nfirst call report_status(), pass following keyword-value pairs: name=“luke”, affiliation=“jedi” status=“missing”.\n\nsecond call report_status(), pass following keyword-value pairs: name=“anakin”, affiliation=“sith lord” status=“deceased”.\n\nGreat work!\n","code":"# Define report_status\ndef report_status(**kwargs):\n    \"\"\"Print out the status of a movie character.\"\"\"\n\n    print(\"\\nBEGIN: REPORT\\n\")\n\n    # Iterate over the key-value pairs of kwargs\n    for key, value in kwargs.items():\n        # Print out the keys and values, separated by a colon ':'\n        print(key + \": \" + value)\n\n    print(\"\\nEND REPORT\")\n    \n# First call to report_status()\nreport_status(name=\"luke\", affiliation=\"jedi\", status=\"missing\")## \n## BEGIN: REPORT\n## \n## name: luke\n## affiliation: jedi\n## status: missing\n## \n## END REPORT# Second call to report_status()\nreport_status(name=\"anakin\", affiliation=\"sith lord\", status=\"deceased\")## \n## BEGIN: REPORT\n## \n## name: anakin\n## affiliation: sith lord\n## status: deceased\n## \n## END REPORT"},{"path":"python-data-science-toolbox-part-1.html","id":"bringing-it-all-together-3","chapter":"Python Data Science Toolbox (Part 1)","heading":"Bringing it all together","text":"","code":""},{"path":"python-data-science-toolbox-part-1.html","id":"bringing-it-all-together-1-1","chapter":"Python Data Science Toolbox (Part 1)","heading":"Bringing it all together (1)","text":"\nRecall Bringing together exercise previous chapter simple Twitter analysis developing function counts many tweets certain languages. output function dictionary language keys counts tweets language value.\n\nexercise, generalize Twitter language analysis previous chapter. including default argument takes column name.\n\nconvenience, pandas imported pd ‘tweets.csv’ file imported DataFrame tweets_df. Parts code previous work also provided.\n\nComplete function header supplying parameter DataFrame df parameter col_name default value ‘lang’ DataFrame column name.\n\nCall count_entries() passing tweets_df DataFrame column name ‘lang’. Assign result result1. Note since ‘lang’ default value col_name parameter, don’t specify .\n\nCall count_entries() passing tweets_df DataFrame column name ‘source’. Assign result result2.\n\nGreat work!\n","code":"# Define count_entries()\ndef count_entries(df, col_name='lang'):\n    \"\"\"Return a dictionary with counts of\n    occurrences as value for each key.\"\"\"\n\n    # Initialize an empty dictionary: cols_count\n    cols_count = {}\n    \n    # Extract column from DataFrame: col\n    col = df[col_name]\n\n    # Iterate over the column in DataFrame\n    for entry in col:\n\n        # If entry is in cols_count, add 1\n        if entry in cols_count.keys():\n            cols_count[entry] += 1\n\n        # Else add the entry to cols_count, set the value to 1\n        else:\n            cols_count[entry] = 1\n\n    # Return the cols_count dictionary\n    return cols_count\n  \n# Call count_entries(): result1\nresult1 = count_entries(tweets_df, col_name='lang')\n\n# Call count_entries(): result2\nresult2 = count_entries(tweets_df, col_name='source')\n\n# Print result1 and result2\nprint(result1)## {'en': 97, 'et': 1, 'und': 2}print(result2)## {'<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client<\/a>': 24, '<a href=\"http://www.facebook.com/twitter\" rel=\"nofollow\">Facebook<\/a>': 1, '<a href=\"http://twitter.com/download/android\" rel=\"nofollow\">Twitter for Android<\/a>': 26, '<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone<\/a>': 33, '<a href=\"http://www.twitter.com\" rel=\"nofollow\">Twitter for BlackBerry<\/a>': 2, '<a href=\"http://www.google.com/\" rel=\"nofollow\">Google<\/a>': 2, '<a href=\"http://twitter.com/#!/download/ipad\" rel=\"nofollow\">Twitter for iPad<\/a>': 6, '<a href=\"http://linkis.com\" rel=\"nofollow\">Linkis.com<\/a>': 2, '<a href=\"http://rutracker.org/forum/viewforum.php?f=93\" rel=\"nofollow\">newzlasz<\/a>': 2, '<a href=\"http://ifttt.com\" rel=\"nofollow\">IFTTT<\/a>': 1, '<a href=\"http://www.myplume.com/\" rel=\"nofollow\">Plume\\xa0for\\xa0Android<\/a>': 1}"},{"path":"python-data-science-toolbox-part-1.html","id":"bringing-it-all-together-2-1","chapter":"Python Data Science Toolbox (Part 1)","heading":"Bringing it all together (2)","text":"\nWow, ’ve just generalized Twitter language analysis previous chapter include default argument column name. ’re now going generalize function one step allowing user pass flexible argument, , case, many column names user like!\n\n, convenience, pandas imported pd ‘tweets.csv’ file imported DataFrame tweets_df. Parts code previous work also provided.\n\nComplete function header supplying parameter DataFrame df flexible argument *args.\n\nComplete loop within function definition loop occurs tuple args.\n\nCall count_entries() passing tweets_df DataFrame column name ‘lang’. Assign result result1.\n\nCall count_entries() passing tweets_df DataFrame column names ‘lang’ ‘source’. Assign result result2.\n\nGreat work!\n","code":"# Define count_entries()\ndef count_entries(df, *args):\n    \"\"\"Return a dictionary with counts of\n    occurrences as value for each key.\"\"\"\n    \n    #Initialize an empty dictionary: cols_count\n    cols_count = {}\n    \n    # Iterate over column names in args\n    for col_name in args:\n    \n        # Extract column from DataFrame: col\n        col = df[col_name]\n    \n        # Iterate over the column in DataFrame\n        for entry in col:\n    \n            # If entry is in cols_count, add 1\n            if entry in cols_count.keys():\n                cols_count[entry] += 1\n    \n            # Else add the entry to cols_count, set the value to 1\n            else:\n                cols_count[entry] = 1\n\n    # Return the cols_count dictionary\n    return cols_count\n  \n# Call count_entries(): result1\nresult1 = count_entries(tweets_df, 'lang')\n\n# Call count_entries(): result2\nresult2 = count_entries(tweets_df, 'lang', 'source')\n\n# Print result1 and result2\nprint(result1)## {'en': 97, 'et': 1, 'und': 2}print(result2)## {'en': 97, 'et': 1, 'und': 2, '<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client<\/a>': 24, '<a href=\"http://www.facebook.com/twitter\" rel=\"nofollow\">Facebook<\/a>': 1, '<a href=\"http://twitter.com/download/android\" rel=\"nofollow\">Twitter for Android<\/a>': 26, '<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone<\/a>': 33, '<a href=\"http://www.twitter.com\" rel=\"nofollow\">Twitter for BlackBerry<\/a>': 2, '<a href=\"http://www.google.com/\" rel=\"nofollow\">Google<\/a>': 2, '<a href=\"http://twitter.com/#!/download/ipad\" rel=\"nofollow\">Twitter for iPad<\/a>': 6, '<a href=\"http://linkis.com\" rel=\"nofollow\">Linkis.com<\/a>': 2, '<a href=\"http://rutracker.org/forum/viewforum.php?f=93\" rel=\"nofollow\">newzlasz<\/a>': 2, '<a href=\"http://ifttt.com\" rel=\"nofollow\">IFTTT<\/a>': 1, '<a href=\"http://www.myplume.com/\" rel=\"nofollow\">Plume\\xa0for\\xa0Android<\/a>': 1}"},{"path":"python-data-science-toolbox-part-1.html","id":"lambda-functions-and-error-handling","chapter":"Python Data Science Toolbox (Part 1)","heading":"Lambda functions and error-handling","text":"\nLearn lambda functions, allow write functions quickly fly. ’ll also practice handling errors functions, essential skill. , apply new skills answer data science questions.\n","code":""},{"path":"python-data-science-toolbox-part-1.html","id":"lambda-functions","chapter":"Python Data Science Toolbox (Part 1)","heading":"Lambda functions","text":"","code":""},{"path":"python-data-science-toolbox-part-1.html","id":"pop-quiz-on-lambda-functions","chapter":"Python Data Science Toolbox (Part 1)","heading":"Pop quiz on lambda functions","text":"\nexercise, practice writing simple lambda function calling function. Recall know lambda functions answer following questions:\n\nwrite lambda function add_bangs adds three exclamation points ‘!!!’ end string ?\n\ncall add_bangs argument ‘hello’?\n\nmay use IPython shell test code.\nlambda function definition : add_bangs = (+ ‘!!!’), function call : add_bangs(‘hello’).lambda function definition : add_bangs = (lambda : + ‘!!!’), function call : add_bangs(‘hello’).lambda function definition : (lambda : + ‘!!!’) = add_bangs, function call : add_bangs(‘hello’).\nCorrect!\n","code":""},{"path":"python-data-science-toolbox-part-1.html","id":"writing-a-lambda-function-you-already-know","chapter":"Python Data Science Toolbox (Part 1)","heading":"Writing a lambda function you already know","text":"\nfunction definitions simple enough can converted lambda function. , write less lines code, pretty awesome come handy, especially ’re writing maintaining big programs. exercise, use know lambda functions convert function simple task lambda function. Take look function definition:\n\nfunction echo_word takes 2 parameters: string value, word1 integer value, echo. returns string concatenation echo copies word1. task convert simple function lambda function.\n\nDefine lambda function echo_word using variables word1 echo. Replicate original function definition echo_word() .\n\nCall echo_word() string argument ‘hey’ value 5, order. Assign call result.\n\nGreat work!\n","code":"def echo_word(word1, echo):\n    \"\"\"Concatenate echo copies of word1.\"\"\"\n    words = word1 * echo\n    return words\n# Define echo_word as a lambda function: echo_word\necho_word = (lambda word1, echo: word1 * echo)\n\n# Call echo_word: result\nresult = echo_word('hey', 5)\n\n# Print result\nprint(result)## heyheyheyheyhey"},{"path":"python-data-science-toolbox-part-1.html","id":"map-and-lambda-functions","chapter":"Python Data Science Toolbox (Part 1)","heading":"Map() and lambda functions","text":"\nfar, ’ve used lambda functions write short, simple functions well redefine functions simple functionality. best use case lambda functions, however, want simple functionalities anonymously embedded within larger expressions. means functionality stored environment, unlike function defined def. understand idea better, use lambda function context map() function.\n\nRecall video map() applies function object, list. , can use lambda functions define function map() use process object. example:\n\ncan see lambda function, raises value power 2, passed map() alongside list numbers, nums. map object results call map() stored result. now practice use lambda functions map(). exercise, map functionality add_bangs() function defined previous exercises list strings.\n\nmap() call, pass lambda function concatenates string ‘!!!’ string item; also pass list strings, spells. Assign resulting map object shout_spells.\n\nConvert shout_spells list print list.\n\nGreat work!\n","code":"nums = [2, 4, 6, 8, 10]\n\nresult = map(lambda a: a ** 2, nums)\n# Create a list of strings: spells\nspells = ['protego', 'accio', 'expecto patronum', 'legilimens']\n\n# Use map() to apply a lambda function over spells: shout_spells\nshout_spells = map(lambda item: item + '!!!', spells)\n\n# Convert shout_spells to a list: shout_spells_list\nshout_spells_list = list(shout_spells)\n\n# Print the result\nprint(shout_spells_list)## ['protego!!!', 'accio!!!', 'expecto patronum!!!', 'legilimens!!!']"},{"path":"python-data-science-toolbox-part-1.html","id":"filter-and-lambda-functions","chapter":"Python Data Science Toolbox (Part 1)","heading":"Filter() and lambda functions","text":"\nprevious exercise, used lambda functions anonymously embed operation within map(). practice exercise using lambda function filter(), may new ! function filter() offers way filter elements list don’t satisfy certain criteria.\n\ngoal exercise use filter() create, input list strings, new list contains strings 6 characters.\n\nfilter() call, pass lambda function list strings, fellowship. lambda function check number characters string member greater 6; use len() function . Assign resulting filter object result.\n\nConvert result list print list.\n\nGreat work!\n","code":"# Create a list of strings: fellowship\nfellowship = ['frodo', 'samwise', 'merry', 'pippin', 'aragorn', 'boromir', 'legolas', 'gimli', 'gandalf']\n\n# Use filter() to apply a lambda function over fellowship: result\nresult = filter(lambda member: len(member) > 6, fellowship)\n\n# Convert result to a list: result_list\nresult_list = list(result)\n\n# Print result_list\nprint(result_list)## ['samwise', 'aragorn', 'boromir', 'legolas', 'gandalf']"},{"path":"python-data-science-toolbox-part-1.html","id":"reduce-and-lambda-functions","chapter":"Python Data Science Toolbox (Part 1)","heading":"Reduce() and lambda functions","text":"\n’re getting good using lambda functions! ’s one function add repertoire skills. reduce() function useful performing computation list , unlike map() filter(), returns single value result. use reduce(), must import functools module.\n\nRemember gibberish() exercises back?\n\ngibberish() simply takes list strings argument returns, single-value result, concatenation strings. exercise, replicate functionality using reduce() lambda function concatenates strings together.\n\nImport reduce function functools module.\n\nreduce() call, pass lambda function takes two string arguments item1 item2 concatenates ; also pass list strings, stark. Assign result result. first argument reduce() lambda function second argument list stark.\n\nGreat work!\n","code":"# Define gibberish\ndef gibberish(*args):\n    \"\"\"Concatenate strings in *args together.\"\"\"\n    hodgepodge = ''\n    for word in args:\n        hodgepodge += word\n    return hodgepodge\n# Import reduce from functools\nfrom functools import reduce\n\n# Create a list of strings: stark\nstark = ['robb', 'sansa', 'arya', 'brandon', 'rickon']\n\n# Use reduce() to apply a lambda function over stark: result\nresult = reduce(lambda item1, item2: item1 + item2, stark)\n\n# Print the result\nprint(result)## robbsansaaryabrandonrickon"},{"path":"python-data-science-toolbox-part-1.html","id":"introduction-to-error-handling","chapter":"Python Data Science Toolbox (Part 1)","heading":"Introduction to error handling","text":"","code":""},{"path":"python-data-science-toolbox-part-1.html","id":"pop-quiz-about-errors","chapter":"Python Data Science Toolbox (Part 1)","heading":"Pop quiz about errors","text":"\nvideo, Hugo talked errors happen functions supplied arguments unable work . exercise, identify function call raises error type error raised.\n\nTake look following function calls len():\n\nfunction calls raises error type error raised?\ncall len(‘beast every man stirs put sword hand.’) raises TypeError.call len([‘robb’, ‘sansa’, ‘arya’, ‘eddard’, ‘jon’]) raises IndexError.call len(525600) raises TypeError.call len((‘jaime’, ‘cersei’, ‘tywin’, ‘tyrion’, ‘joffrey’)) raises NameError.\nCorrect!\n","code":"len('There is a beast in every man and it stirs when you put a sword in his hand.')\n\nlen(['robb', 'sansa', 'arya', 'eddard', 'jon'])\n\nlen(525600)\n\nlen(('jaime', 'cersei', 'tywin', 'tyrion', 'joffrey'))\n"},{"path":"python-data-science-toolbox-part-1.html","id":"error-handling-with-try-except","chapter":"Python Data Science Toolbox (Part 1)","heading":"Error handling with try-except","text":"\ngood practice writing functions also anticipating ways people (, accidentally misuse function) might use function defined.\n\nprevious exercise, saw len() function able handle input arguments strings, lists, tuples, int type ones raises appropriate error error message encounters invalid input arguments. One way exception handling try-except block.\n\nexercise, define function well use try-except block handling cases incorrect input arguments passed function.\n\nRecall shout_echo() function defined previous exercises; parts function definition provided sample code. goal complete exception handling code function definition provide appropriate error message raising error.\n\nInitialize variables echo_word shout_words empty strings.\n\nAdd keywords try except appropriate locations exception handling block.\n\nUse * operator concatenate echo copies word1. Assign result echo_word.\n\nConcatenate string ‘!!!’ echo_word. Assign result shout_words.\n\nGreat work!\n","code":"# Define shout_echo\ndef shout_echo(word1, echo=1):\n    \"\"\"Concatenate echo copies of word1 and three\n    exclamation marks at the end of the string.\"\"\"\n\n    # Initialize empty strings: echo_word, shout_words\n    echo_word = ''\n    shout_words = ''\n\n    # Add exception handling with try-except\n    try:\n        # Concatenate echo copies of word1 using *: echo_word\n        echo_word = word1 * echo\n\n        # Concatenate '!!!' to echo_word: shout_words\n        shout_words = echo_word + '!!!'\n    except:\n        # Print error message\n        print(\"word1 must be a string and echo must be an integer.\")\n\n    # Return shout_words\n    return shout_words\n\n# Call shout_echo\nshout_echo(\"particle\", echo=\"accelerator\")## word1 must be a string and echo must be an integer.\n## ''"},{"path":"python-data-science-toolbox-part-1.html","id":"error-handling-by-raising-an-error","chapter":"Python Data Science Toolbox (Part 1)","heading":"Error handling by raising an error","text":"\nAnother way raise error using raise. exercise, add raise statement shout_echo() function defined raise error message value supplied user echo argument less 0.\n\ncall shout_echo() uses valid argument values. test see raise statement works, simply change value echo argument negative value. Don’t forget change back valid values move next exercise!\n\nComplete statement checking value echo less 0.\n\nbody statement, add raise statement raises ValueError message ‘echo must greater equal 0’ value supplied user echo less 0.\n\nGreat work!\n","code":"# Define shout_echo\ndef shout_echo(word1, echo=1):\n    \"\"\"Concatenate echo copies of word1 and three\n    exclamation marks at the end of the string.\"\"\"\n\n    # Raise an error with raise\n    if echo < 0:\n        raise ValueError('echo must be greater than or equal to 0')\n\n    # Concatenate echo copies of word1 using *: echo_word\n    echo_word = word1 * echo\n\n    # Concatenate '!!!' to echo_word: shout_word\n    shout_word = echo_word + '!!!'\n\n    # Return shout_word\n    return shout_word\n\n# Call shout_echo\nshout_echo(\"particle\", echo=5)## 'particleparticleparticleparticleparticle!!!'"},{"path":"python-data-science-toolbox-part-1.html","id":"bringing-it-all-together-4","chapter":"Python Data Science Toolbox (Part 1)","heading":"Bringing it all together","text":"","code":""},{"path":"python-data-science-toolbox-part-1.html","id":"bringing-it-all-together-1-2","chapter":"Python Data Science Toolbox (Part 1)","heading":"Bringing it all together (1)","text":"\nawesome! now learned write anonymous functions using lambda, pass lambda functions arguments functions map(), filter(), reduce(), well write errors output custom error messages within functions. now put together learnings good use working Twitter dataset. practicing new error handling skills; exercise, write lambda function use filter() select retweets, , tweets begin string ‘RT’.\n\nhelp accomplish , Twitter data imported DataFrame, tweets_df. Go !\n\nfilter() call, pass lambda function sequence tweets strings, tweets_df[‘text’]. lambda function check first 2 characters tweet x ‘RT’. Assign resulting filter object result. get first 2 characters tweet x, use x[0:2]. check equality, use Boolean filter ==.\n\nConvert result list print list.\n\nGreat work!\n","code":"# Select retweets from the Twitter DataFrame: result\nresult = filter(lambda x: x[0:2] == 'RT', tweets_df['text'])\n\n# Create list from filter object result: res_list\nres_list = list(result)\n\n# Print all retweets in res_list\nfor tweet in res_list:\n    print(tweet)## RT @bpolitics: .@krollbondrating's Christopher Whalen says Clinton is the weakest Dem candidate in 50 years https://t.co/pLk7rvoRSn https:/…\n## RT @HeidiAlpine: @dmartosko Cruz video found.....racing from the scene.... #cruzsexscandal https://t.co/zuAPZfQDk3\n## RT @AlanLohner: The anti-American D.C. elites despise Trump for his America-first foreign policy. Trump threatens their gravy train. https:…\n## RT @BIackPplTweets: Young Donald trump meets his neighbor  https://t.co/RFlu17Z1eE\n## RT @trumpresearch: @WaitingInBagdad @thehill Trump supporters have selective amnisia.\n## RT @HouseCracka: 29,000+ PEOPLE WATCHING TRUMP LIVE ON ONE STREAM!!!\n## \n## https://t.co/7QCFz9ehNe\n## RT @urfavandtrump: RT for Brendon Urie\n## Fav for Donald Trump https://t.co/PZ5vS94lOg\n## RT @trapgrampa: This is how I see #Trump every time he speaks. https://t.co/fYSiHNS0nT\n## RT @trumpresearch: @WaitingInBagdad @thehill Trump supporters have selective amnisia.\n## RT @Pjw20161951: NO KIDDING: #SleazyDonald just attacked Scott Walker for NOT RAISING TAXES in WI! #LyinTrump\n## #NeverTrump  #CruzCrew  https…\n## RT @urfavandtrump: RT for Brendon Urie\n## Fav for Donald Trump https://t.co/PZ5vS94lOg\n## RT @ggreenwald: The media spent all day claiming @SusanSarandon said she might vote for Trump. A total fabrication, but whatever... https:/…\n## RT @Pjw20161951: NO KIDDING: #SleazyDonald just attacked Scott Walker for NOT RAISING TAXES in WI! #LyinTrump\n## #NeverTrump  #CruzCrew  https…\n## RT @trapgrampa: This is how I see #Trump every time he speaks. https://t.co/fYSiHNS0nT\n## RT @mitchellvii: So let me get this straight.  Any reporter can assault Mr Trump at any time and Corey can do nothing?  Michelle is clearly…\n## RT @paulbenedict7: How #Trump Sacks RINO Strongholds by Hitting Positions Held by Dems and GOP https://t.co/D7ulnAJhis   #tcot #PJNET https…\n## RT @DRUDGE_REPORT: VIDEO:  Trump emotional moment with Former Miss Wisconsin who has terminal illness... https://t.co/qt06aG9inT\n## RT @ggreenwald: The media spent all day claiming @SusanSarandon said she might vote for Trump. A total fabrication, but whatever... https:/…\n## RT @DennisApgar: Thank God I seen Trump at first stop in Wisconsin media doesn't know how great he is, advice watch live streaming https://…\n## RT @paulbenedict7: How #Trump Sacks RINO Strongholds by Hitting Positions Held by Dems and GOP https://t.co/D7ulnAJhis   #tcot #PJNET https…\n## RT @DRUDGE_REPORT: VIDEO:  Trump emotional moment with Former Miss Wisconsin who has terminal illness... https://t.co/qt06aG9inT\n## RT @DennisApgar: Thank God I seen Trump at first stop in Wisconsin media doesn't know how great he is, advice watch live streaming https://…\n## RT @mitchellvii: So let me get this straight.  Any reporter can assault Mr Trump at any time and Corey can do nothing?  Michelle is clearly…\n## RT @sciam: Trump's idiosyncratic patterns of speech are why people tend either to love or hate him https://t.co/QXwquVgs3c https://t.co/P9N…\n## RT @Norsu2: Nightmare WI poll for Ted Cruz has Kasich surging: Trump 29, Kasich 27, Cruz 25. https://t.co/lJsgbLYY1P #NeverTrump\n## RT @thehill: WATCH: Protester pepper-sprayed point blank at Trump rally https://t.co/B5f65Al9ld https://t.co/skAfByXuQc\n## RT @sciam: Trump's idiosyncratic patterns of speech are why people tend either to love or hate him https://t.co/QXwquVgs3c https://t.co/P9N…\n## RT @ggreenwald: The media spent all day claiming @SusanSarandon said she might vote for Trump. A total fabrication, but whatever... https:/…\n## RT @DebbieStout5: Wow! Last I checked it was just 12 points &amp; that wasn't more than a day ago. Oh boy Trump ppl might want to rethink🤔 http…\n## RT @tyleroakley: i'm a messy bitch, but at least i'm not voting for trump\n## RT @vandives: Trump supporters r tired of justice NOT being served. There's no justice anymore. Hardworking Americans get screwed. That's n…\n## RT @AP: BREAKING: Trump vows to stand by campaign manager charged with battery, says he does not discard people.\n## RT @AP: BREAKING: Trump vows to stand by campaign manager charged with battery, says he does not discard people.\n## RT @urfavandtrump: RT for Jerrie (Little Mix)\n## Fav for Donald Trump https://t.co/nEVxElW6iG\n## RT @urfavandtrump: RT for Jerrie (Little Mix)\n## Fav for Donald Trump https://t.co/nEVxElW6iG\n## RT @NoahCRothman: When Walker was fighting for reforms, Trump was defending unions and collective bargaining privileges https://t.co/e1UWNN…\n## RT @RedheadAndRight: Report: Secret Service Says Michelle Fields Touched Trump https://t.co/c5c2sD8VO2\n## \n## This is the only article you will n…\n## RT @AIIAmericanGirI: VIDEO=&gt; Anti-Trump Protester SLUGS Elderly Trump Supporter in the Face\n## https://t.co/GeEryMDuDY\n## RT @NoahCRothman: When Walker was fighting for reforms, Trump was defending unions and collective bargaining privileges https://t.co/e1UWNN…\n## RT @JusticeRanger1: @realDonaldTrump @Pudingtane @DanScavino @GOP @infowars @EricTrump \n## URGENT PUBLIC TRUMP ALERT:\n## COVERT KILL MEANS https:…\n## RT @AIIAmericanGirI: VIDEO=&gt; Anti-Trump Protester SLUGS Elderly Trump Supporter in the Face\n## https://t.co/GeEryMDuDY\n## RT @RedheadAndRight: Report: Secret Service Says Michelle Fields Touched Trump https://t.co/c5c2sD8VO2\n## \n## This is the only article you will n…\n## RT @JusticeRanger1: @realDonaldTrump @Pudingtane @DanScavino @GOP @infowars @EricTrump \n## URGENT PUBLIC TRUMP ALERT:\n## COVERT KILL MEANS https:…\n## RT @Schneider_CM: Trump says nobody had ever heard of executive orders before Obama started signing them. Never heard of the Emancipation P…\n## RT @RonBasler1: @DavidWhitDennis @realDonaldTrump @tedcruz \n## \n## CRUZ SCREWS HOOKERS\n## \n## CRUZ / CLINTON\n## RT @DonaldsAngel: Former Ms. WI just said that she is terminally ill but because of Trump pageant, her 7 yr. old son has his college educat…\n## RT @Schneider_CM: Trump says nobody had ever heard of executive orders before Obama started signing them. Never heard of the Emancipation P…\n## RT @DonaldsAngel: Former Ms. WI just said that she is terminally ill but because of Trump pageant, her 7 yr. old son has his college educat…\n## RT @Dodarey: @DR8801 @SykesCharlie Charlie, let's see you get a straight \"yes\" or \"no\" answer from Cruz a/b being unfaithful to his wife @T…\n## RT @RonBasler1: @DavidWhitDennis @realDonaldTrump @tedcruz \n## \n## CRUZ SCREWS HOOKERS\n## \n## CRUZ / CLINTON\n## RT @RockCliffOne: Remember when the idea of a diabolical moron holding the world hostage was an idea for a funny movie? #Trump #GOP https:/…\n## RT @HillaryClinton: \"Every day, another Republican bemoans the rise of Donald Trump... but [he] didn’t come out of nowhere.\" —Hillary\n## https…\n## RT @Dodarey: @DR8801 @SykesCharlie Charlie, let's see you get a straight \"yes\" or \"no\" answer from Cruz a/b being unfaithful to his wife @T…\n## RT @HillaryClinton: \"Every day, another Republican bemoans the rise of Donald Trump... but [he] didn’t come out of nowhere.\" —Hillary\n## https…\n## RT @RockCliffOne: Remember when the idea of a diabolical moron holding the world hostage was an idea for a funny movie? #Trump #GOP https:/…\n## RT @immigrant4trump: @immigrant4trump msm, cable news attacking trump all day, from 8am to 10pm today, then the reruns come on, repeating t…\n## RT @immigrant4trump: @immigrant4trump msm, cable news attacking trump all day, from 8am to 10pm today, then the reruns come on, repeating t…\n## RT @GlendaJazzey: Donald Trump’s Campaign Financing Dodge, @rrotunda https://t.co/L8flI4lswG via @VerdictJustia\n## RT @TUSK81: LOUDER FOR THE PEOPLE IN THE BACK https://t.co/hlPVyNLXzx\n## RT @loopzoop: Well...put it back https://t.co/8Yb7BDT5VM\n## RT @claytoncubitt: Stop asking Bernie supporters if they’ll vote for Hillary against Trump. We got a plan to beat Trump already. Called Ber…\n## RT @akaMaude13: Seriously can't make this up. What a joke. #NeverTrump  https://t.co/JkTx6mdRgC"},{"path":"python-data-science-toolbox-part-1.html","id":"bringing-it-all-together-2-2","chapter":"Python Data Science Toolbox (Part 1)","heading":"Bringing it all together (2)","text":"\nSometimes, make mistakes calling functions - even ones made . don’t fret! exercise, improve previous work count_entries() function last chapter adding try-except block . allow function provide helpful message user calls count_entries() function provides column name isn’t DataFrame.\n\n, convenience, pandas imported pd ‘tweets.csv’ file imported DataFrame tweets_df. Parts code previous work also provided.\n\nAdd try block function called correct arguments, processes DataFrame returns dictionary results.\n\nAdd except block function called incorrectly, displays following error message: ‘DataFrame ’ + col_name + ’ column.’.\n\nGreat work!\n","code":"# Define count_entries()\ndef count_entries(df, col_name='lang'):\n    \"\"\"Return a dictionary with counts of\n    occurrences as value for each key.\"\"\"\n\n    # Initialize an empty dictionary: cols_count\n    cols_count = {}\n\n    # Add try block\n    try: \n        # Extract column from DataFrame: col\n        col = df[col_name]\n        \n        # Iterate over the column in DataFrame\n        for entry in col:\n    \n            # If entry is in cols_count, add 1\n            if entry in cols_count.keys():\n                cols_count[entry] += 1\n            # Else add the entry to cols_count, set the value to 1\n            else:\n                cols_count[entry] = 1\n    \n        # Return the cols_count dictionary\n        return cols_count\n\n    # Add except block\n    except:\n        print('The DataFrame does not have a ' + col_name + ' column.')\n\n# Call count_entries(): result1\nresult1 = count_entries(tweets_df, 'lang')\n\n# Print result1\nprint(result1)## {'en': 97, 'et': 1, 'und': 2}"},{"path":"python-data-science-toolbox-part-1.html","id":"bringing-it-all-together-3-1","chapter":"Python Data Science Toolbox (Part 1)","heading":"Bringing it all together (3)","text":"\nprevious exercise, built function count_entries() add try-except block. users get helpful messages calling count_entries() function providing column name isn’t DataFrame. exercise, ’ll instead raise ValueError case user provides column name isn’t DataFrame.\n\n, convenience, pandas imported pd ‘tweets.csv’ file imported DataFrame tweets_df. Parts code previous work also provided.\n\ncol_name column DataFrame df, raise ValueError ‘DataFrame ’ + col_name + ’ column.’.\n\nCall new function count_entries() analyze ‘lang’ column tweets_df. Store result result1.\n\nPrint result1. done , hit ‘Submit Answer’ check result. next exercise, ’ll see raises necessary ValueErrors.\n\nGreat work!\n","code":"# Define count_entries()\ndef count_entries(df, col_name='lang'):\n    \"\"\"Return a dictionary with counts of\n    occurrences as value for each key.\"\"\"\n    \n    # Raise a ValueError if col_name is NOT in DataFrame\n    if col_name not in df.columns:\n        raise ValueError('The DataFrame does not have a ' + col_name + ' column.')\n\n    # Initialize an empty dictionary: cols_count\n    cols_count = {}\n    \n    # Extract column from DataFrame: col\n    col = df[col_name]\n    \n    # Iterate over the column in DataFrame\n    for entry in col:\n\n        # If entry is in cols_count, add 1\n        if entry in cols_count.keys():\n            cols_count[entry] += 1\n            # Else add the entry to cols_count, set the value to 1\n        else:\n            cols_count[entry] = 1\n        \n        # Return the cols_count dictionary\n    return cols_count\n  \n# Call count_entries(): result1\nresult1 = count_entries(tweets_df, 'lang')\n\n# Print result1\nprint(result1)## {'en': 97, 'et': 1, 'und': 2}"},{"path":"python-data-science-toolbox-part-1.html","id":"bringing-it-all-together-testing-your-error-handling-skills","chapter":"Python Data Science Toolbox (Part 1)","heading":"Bringing it all together: testing your error handling skills","text":"\njust written error handling count_entries() function , user passes function column (2nd argument) contained DataFrame (1st argument), ValueError thrown. ’re now going play function: loaded pre-exercise code, DataFrame tweets_df. Try calling count_entries(tweets_df, ‘lang’) confirm function behaves . call count_entries(tweets_df, ‘lang1’): last line output?\n‘ValueError: DataFrame requested column.’‘ValueError: DataFrame lang1 column.’‘TypeError: DataFrame requested column.’\nCorrect!\n","code":""},{"path":"python-data-science-toolbox-part-1.html","id":"congratulations","chapter":"Python Data Science Toolbox (Part 1)","heading":"Congratulations!","text":"","code":""},{"path":"python-data-science-toolbox-part-1.html","id":"congratulations-1","chapter":"Python Data Science Toolbox (Part 1)","heading":"Congratulations!","text":"Well done. ’re now well way Pythonista Data Science ninja.","code":""},{"path":"python-data-science-toolbox-part-1.html","id":"what-youve-learned","chapter":"Python Data Science Toolbox (Part 1)","heading":"What you’ve learned:","text":"’re now able write functions Python accept single multiple arguments can return many values please. ’re also adept using default flexible arguments keyword arguments. ’ve gained insight scoping Python, can write lambda functions handle errors function writing practice. ’ve also gained invaluable practice using techniques write functions useful Data Science context. come long way developing practice budding Pythonista Data Scientist.","code":""},{"path":"python-data-science-toolbox-part-1.html","id":"theres-more-to-learn","chapter":"Python Data Science Toolbox (Part 1)","heading":"There’s more to learn!","text":"basic skills need learn Python valuable working Data Scientist many ’ll cover sequel course ’re finding still thirsty Pythonista Data Science chops, ’d head right now. ’ll learn list comprehensions, allow wrangle data lists create lists, tool utilized Data Scientists working Python. ’ll also learn iterators, already seen context loops without necessarily known . Iterators everywhere PythonLand , put simply, allow rapidly iterate Data Science protocols procedures sets objects; couple cool functionalities PythonLand ’ll encounter sequel course, conclude entire chapter devoted case study ’ll apply time time techniques learnt courses.","code":""},{"path":"python-data-science-toolbox-part-1.html","id":"lets-practice","chapter":"Python Data Science Toolbox (Part 1)","heading":"Let’s practice!","text":"’m looking forward seeing congratulations !","code":""}]
